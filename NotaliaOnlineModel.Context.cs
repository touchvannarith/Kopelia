//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NotaliaOnline
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NotaliaOnlineEntities : DbContext
    {
        public NotaliaOnlineEntities()
            : base("name=NotaliaOnlineEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<online_Calculez_Maintenant> online_Calculez_Maintenant { get; set; }
        public virtual DbSet<online_Client> online_Client { get; set; }
        public virtual DbSet<online_SIMULATION_ACTE> online_SIMULATION_ACTE { get; set; }
        public virtual DbSet<online_token> online_token { get; set; }
        public virtual DbSet<vw_online_Calculez_Maintenant> vw_online_Calculez_Maintenant { get; set; }
        public virtual DbSet<vw_online_Simulation> vw_online_Simulation { get; set; }
    
        public virtual int AddAffiliate(Nullable<int> vendorId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<double> cPC, Nullable<double> cPA)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var cPCParameter = cPC.HasValue ?
                new ObjectParameter("CPC", cPC) :
                new ObjectParameter("CPC", typeof(double));
    
            var cPAParameter = cPA.HasValue ?
                new ObjectParameter("CPA", cPA) :
                new ObjectParameter("CPA", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAffiliate", vendorIdParameter, startDateParameter, endDateParameter, cPCParameter, cPAParameter);
        }
    
        public virtual int AddAuthentication(Nullable<int> packageID, string authenticationType, Nullable<bool> isEnabled, string settingsControlSrc, string loginControlSrc, string logoffControlSrc, Nullable<int> createdByUserID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var authenticationTypeParameter = authenticationType != null ?
                new ObjectParameter("AuthenticationType", authenticationType) :
                new ObjectParameter("AuthenticationType", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var settingsControlSrcParameter = settingsControlSrc != null ?
                new ObjectParameter("SettingsControlSrc", settingsControlSrc) :
                new ObjectParameter("SettingsControlSrc", typeof(string));
    
            var loginControlSrcParameter = loginControlSrc != null ?
                new ObjectParameter("LoginControlSrc", loginControlSrc) :
                new ObjectParameter("LoginControlSrc", typeof(string));
    
            var logoffControlSrcParameter = logoffControlSrc != null ?
                new ObjectParameter("LogoffControlSrc", logoffControlSrc) :
                new ObjectParameter("LogoffControlSrc", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAuthentication", packageIDParameter, authenticationTypeParameter, isEnabledParameter, settingsControlSrcParameter, loginControlSrcParameter, logoffControlSrcParameter, createdByUserIDParameter);
        }
    
        public virtual int AddBanner(string bannerName, Nullable<int> vendorId, string imageFile, string uRL, Nullable<int> impressions, Nullable<double> cPM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userName, Nullable<int> bannerTypeId, string description, string groupName, Nullable<bool> criteria, Nullable<int> width, Nullable<int> height)
        {
            var bannerNameParameter = bannerName != null ?
                new ObjectParameter("BannerName", bannerName) :
                new ObjectParameter("BannerName", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var imageFileParameter = imageFile != null ?
                new ObjectParameter("ImageFile", imageFile) :
                new ObjectParameter("ImageFile", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var impressionsParameter = impressions.HasValue ?
                new ObjectParameter("Impressions", impressions) :
                new ObjectParameter("Impressions", typeof(int));
    
            var cPMParameter = cPM.HasValue ?
                new ObjectParameter("CPM", cPM) :
                new ObjectParameter("CPM", typeof(double));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var bannerTypeIdParameter = bannerTypeId.HasValue ?
                new ObjectParameter("BannerTypeId", bannerTypeId) :
                new ObjectParameter("BannerTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var criteriaParameter = criteria.HasValue ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(bool));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBanner", bannerNameParameter, vendorIdParameter, imageFileParameter, uRLParameter, impressionsParameter, cPMParameter, startDateParameter, endDateParameter, userNameParameter, bannerTypeIdParameter, descriptionParameter, groupNameParameter, criteriaParameter, widthParameter, heightParameter);
        }
    
        public virtual int AddContentItem(string content, Nullable<int> contentTypeID, Nullable<int> tabID, Nullable<int> moduleID, string contentKey, Nullable<bool> indexed, Nullable<int> createdByUserID, Nullable<int> stateID)
        {
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentTypeIDParameter = contentTypeID.HasValue ?
                new ObjectParameter("ContentTypeID", contentTypeID) :
                new ObjectParameter("ContentTypeID", typeof(int));
    
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var contentKeyParameter = contentKey != null ?
                new ObjectParameter("ContentKey", contentKey) :
                new ObjectParameter("ContentKey", typeof(string));
    
            var indexedParameter = indexed.HasValue ?
                new ObjectParameter("Indexed", indexed) :
                new ObjectParameter("Indexed", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddContentItem", contentParameter, contentTypeIDParameter, tabIDParameter, moduleIDParameter, contentKeyParameter, indexedParameter, createdByUserIDParameter, stateIDParameter);
        }
    
        public virtual int AddContentType(string contentType)
        {
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddContentType", contentTypeParameter);
        }
    
        public virtual int AddContentWorkflow(Nullable<int> portalID, string workflowName, string description, Nullable<bool> isDeleted, Nullable<bool> startAfterCreating, Nullable<bool> startAfterEditing, Nullable<bool> dispositionEnabled)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var workflowNameParameter = workflowName != null ?
                new ObjectParameter("WorkflowName", workflowName) :
                new ObjectParameter("WorkflowName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var startAfterCreatingParameter = startAfterCreating.HasValue ?
                new ObjectParameter("StartAfterCreating", startAfterCreating) :
                new ObjectParameter("StartAfterCreating", typeof(bool));
    
            var startAfterEditingParameter = startAfterEditing.HasValue ?
                new ObjectParameter("StartAfterEditing", startAfterEditing) :
                new ObjectParameter("StartAfterEditing", typeof(bool));
    
            var dispositionEnabledParameter = dispositionEnabled.HasValue ?
                new ObjectParameter("DispositionEnabled", dispositionEnabled) :
                new ObjectParameter("DispositionEnabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddContentWorkflow", portalIDParameter, workflowNameParameter, descriptionParameter, isDeletedParameter, startAfterCreatingParameter, startAfterEditingParameter, dispositionEnabledParameter);
        }
    
        public virtual int AddContentWorkflowLog(string action, string comment, Nullable<int> user, Nullable<int> workflowID, Nullable<int> contentItemID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddContentWorkflowLog", actionParameter, commentParameter, userParameter, workflowIDParameter, contentItemIDParameter);
        }
    
        public virtual int AddContentWorkflowSource(Nullable<int> workflowID, string sourceName, string sourceType)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var sourceNameParameter = sourceName != null ?
                new ObjectParameter("SourceName", sourceName) :
                new ObjectParameter("SourceName", typeof(string));
    
            var sourceTypeParameter = sourceType != null ?
                new ObjectParameter("SourceType", sourceType) :
                new ObjectParameter("SourceType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddContentWorkflowSource", workflowIDParameter, sourceNameParameter, sourceTypeParameter);
        }
    
        public virtual int AddContentWorkflowState(Nullable<int> workflowID, string stateName, Nullable<int> order, Nullable<bool> isActive, Nullable<bool> sendEmail, Nullable<bool> sendMessage, Nullable<bool> isDisposalState, string onCompleteMessageSubject, string onCompleteMessageBody, string onDiscardMessageSubject, string onDiscardMessageBody)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var sendEmailParameter = sendEmail.HasValue ?
                new ObjectParameter("SendEmail", sendEmail) :
                new ObjectParameter("SendEmail", typeof(bool));
    
            var sendMessageParameter = sendMessage.HasValue ?
                new ObjectParameter("SendMessage", sendMessage) :
                new ObjectParameter("SendMessage", typeof(bool));
    
            var isDisposalStateParameter = isDisposalState.HasValue ?
                new ObjectParameter("IsDisposalState", isDisposalState) :
                new ObjectParameter("IsDisposalState", typeof(bool));
    
            var onCompleteMessageSubjectParameter = onCompleteMessageSubject != null ?
                new ObjectParameter("OnCompleteMessageSubject", onCompleteMessageSubject) :
                new ObjectParameter("OnCompleteMessageSubject", typeof(string));
    
            var onCompleteMessageBodyParameter = onCompleteMessageBody != null ?
                new ObjectParameter("OnCompleteMessageBody", onCompleteMessageBody) :
                new ObjectParameter("OnCompleteMessageBody", typeof(string));
    
            var onDiscardMessageSubjectParameter = onDiscardMessageSubject != null ?
                new ObjectParameter("OnDiscardMessageSubject", onDiscardMessageSubject) :
                new ObjectParameter("OnDiscardMessageSubject", typeof(string));
    
            var onDiscardMessageBodyParameter = onDiscardMessageBody != null ?
                new ObjectParameter("OnDiscardMessageBody", onDiscardMessageBody) :
                new ObjectParameter("OnDiscardMessageBody", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddContentWorkflowState", workflowIDParameter, stateNameParameter, orderParameter, isActiveParameter, sendEmailParameter, sendMessageParameter, isDisposalStateParameter, onCompleteMessageSubjectParameter, onCompleteMessageBodyParameter, onDiscardMessageSubjectParameter, onDiscardMessageBodyParameter);
        }
    
        public virtual int AddContentWorkflowStatePermission(Nullable<int> stateID, Nullable<int> permissionID, Nullable<int> roleID, Nullable<bool> allowAccess, Nullable<int> userID, Nullable<int> createdByUserID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddContentWorkflowStatePermission", stateIDParameter, permissionIDParameter, roleIDParameter, allowAccessParameter, userIDParameter, createdByUserIDParameter);
        }
    
        public virtual int AddDefaultFolderTypes(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDefaultFolderTypes", portalIDParameter);
        }
    
        public virtual int AddDesktopModule(Nullable<int> packageID, string moduleName, string folderName, string friendlyName, string description, string version, Nullable<bool> isPremium, Nullable<bool> isAdmin, string businessController, Nullable<int> supportedFeatures, Nullable<int> shareable, string compatibleVersions, string dependencies, string permissions, Nullable<int> contentItemId, Nullable<int> createdByUserID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var folderNameParameter = folderName != null ?
                new ObjectParameter("FolderName", folderName) :
                new ObjectParameter("FolderName", typeof(string));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var isPremiumParameter = isPremium.HasValue ?
                new ObjectParameter("IsPremium", isPremium) :
                new ObjectParameter("IsPremium", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var businessControllerParameter = businessController != null ?
                new ObjectParameter("BusinessController", businessController) :
                new ObjectParameter("BusinessController", typeof(string));
    
            var supportedFeaturesParameter = supportedFeatures.HasValue ?
                new ObjectParameter("SupportedFeatures", supportedFeatures) :
                new ObjectParameter("SupportedFeatures", typeof(int));
    
            var shareableParameter = shareable.HasValue ?
                new ObjectParameter("Shareable", shareable) :
                new ObjectParameter("Shareable", typeof(int));
    
            var compatibleVersionsParameter = compatibleVersions != null ?
                new ObjectParameter("CompatibleVersions", compatibleVersions) :
                new ObjectParameter("CompatibleVersions", typeof(string));
    
            var dependenciesParameter = dependencies != null ?
                new ObjectParameter("Dependencies", dependencies) :
                new ObjectParameter("Dependencies", typeof(string));
    
            var permissionsParameter = permissions != null ?
                new ObjectParameter("Permissions", permissions) :
                new ObjectParameter("Permissions", typeof(string));
    
            var contentItemIdParameter = contentItemId.HasValue ?
                new ObjectParameter("ContentItemId", contentItemId) :
                new ObjectParameter("ContentItemId", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDesktopModule", packageIDParameter, moduleNameParameter, folderNameParameter, friendlyNameParameter, descriptionParameter, versionParameter, isPremiumParameter, isAdminParameter, businessControllerParameter, supportedFeaturesParameter, shareableParameter, compatibleVersionsParameter, dependenciesParameter, permissionsParameter, contentItemIdParameter, createdByUserIDParameter);
        }
    
        public virtual int AddDesktopModulePermission(Nullable<int> portalDesktopModuleID, Nullable<int> permissionId, Nullable<int> roleId, Nullable<bool> allowAccess, Nullable<int> userId, Nullable<int> createdByUserId)
        {
            var portalDesktopModuleIDParameter = portalDesktopModuleID.HasValue ?
                new ObjectParameter("PortalDesktopModuleID", portalDesktopModuleID) :
                new ObjectParameter("PortalDesktopModuleID", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDesktopModulePermission", portalDesktopModuleIDParameter, permissionIdParameter, roleIdParameter, allowAccessParameter, userIdParameter, createdByUserIdParameter);
        }
    
        public virtual int AddEventLog(string logGUID, string logTypeKey, Nullable<int> logUserID, string logUserName, Nullable<int> logPortalID, string logPortalName, Nullable<System.DateTime> logCreateDate, string logServerName, string logProperties, Nullable<int> logConfigID, string exceptionHash)
        {
            var logGUIDParameter = logGUID != null ?
                new ObjectParameter("LogGUID", logGUID) :
                new ObjectParameter("LogGUID", typeof(string));
    
            var logTypeKeyParameter = logTypeKey != null ?
                new ObjectParameter("LogTypeKey", logTypeKey) :
                new ObjectParameter("LogTypeKey", typeof(string));
    
            var logUserIDParameter = logUserID.HasValue ?
                new ObjectParameter("LogUserID", logUserID) :
                new ObjectParameter("LogUserID", typeof(int));
    
            var logUserNameParameter = logUserName != null ?
                new ObjectParameter("LogUserName", logUserName) :
                new ObjectParameter("LogUserName", typeof(string));
    
            var logPortalIDParameter = logPortalID.HasValue ?
                new ObjectParameter("LogPortalID", logPortalID) :
                new ObjectParameter("LogPortalID", typeof(int));
    
            var logPortalNameParameter = logPortalName != null ?
                new ObjectParameter("LogPortalName", logPortalName) :
                new ObjectParameter("LogPortalName", typeof(string));
    
            var logCreateDateParameter = logCreateDate.HasValue ?
                new ObjectParameter("LogCreateDate", logCreateDate) :
                new ObjectParameter("LogCreateDate", typeof(System.DateTime));
    
            var logServerNameParameter = logServerName != null ?
                new ObjectParameter("LogServerName", logServerName) :
                new ObjectParameter("LogServerName", typeof(string));
    
            var logPropertiesParameter = logProperties != null ?
                new ObjectParameter("LogProperties", logProperties) :
                new ObjectParameter("LogProperties", typeof(string));
    
            var logConfigIDParameter = logConfigID.HasValue ?
                new ObjectParameter("LogConfigID", logConfigID) :
                new ObjectParameter("LogConfigID", typeof(int));
    
            var exceptionHashParameter = exceptionHash != null ?
                new ObjectParameter("ExceptionHash", exceptionHash) :
                new ObjectParameter("ExceptionHash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEventLog", logGUIDParameter, logTypeKeyParameter, logUserIDParameter, logUserNameParameter, logPortalIDParameter, logPortalNameParameter, logCreateDateParameter, logServerNameParameter, logPropertiesParameter, logConfigIDParameter, exceptionHashParameter);
        }
    
        public virtual int AddEventLogConfig(string logTypeKey, Nullable<int> logTypePortalID, Nullable<bool> loggingIsActive, Nullable<int> keepMostRecent, Nullable<bool> emailNotificationIsActive, Nullable<int> notificationThreshold, Nullable<int> notificationThresholdTime, Nullable<int> notificationThresholdTimeType, string mailFromAddress, string mailToAddress)
        {
            var logTypeKeyParameter = logTypeKey != null ?
                new ObjectParameter("LogTypeKey", logTypeKey) :
                new ObjectParameter("LogTypeKey", typeof(string));
    
            var logTypePortalIDParameter = logTypePortalID.HasValue ?
                new ObjectParameter("LogTypePortalID", logTypePortalID) :
                new ObjectParameter("LogTypePortalID", typeof(int));
    
            var loggingIsActiveParameter = loggingIsActive.HasValue ?
                new ObjectParameter("LoggingIsActive", loggingIsActive) :
                new ObjectParameter("LoggingIsActive", typeof(bool));
    
            var keepMostRecentParameter = keepMostRecent.HasValue ?
                new ObjectParameter("KeepMostRecent", keepMostRecent) :
                new ObjectParameter("KeepMostRecent", typeof(int));
    
            var emailNotificationIsActiveParameter = emailNotificationIsActive.HasValue ?
                new ObjectParameter("EmailNotificationIsActive", emailNotificationIsActive) :
                new ObjectParameter("EmailNotificationIsActive", typeof(bool));
    
            var notificationThresholdParameter = notificationThreshold.HasValue ?
                new ObjectParameter("NotificationThreshold", notificationThreshold) :
                new ObjectParameter("NotificationThreshold", typeof(int));
    
            var notificationThresholdTimeParameter = notificationThresholdTime.HasValue ?
                new ObjectParameter("NotificationThresholdTime", notificationThresholdTime) :
                new ObjectParameter("NotificationThresholdTime", typeof(int));
    
            var notificationThresholdTimeTypeParameter = notificationThresholdTimeType.HasValue ?
                new ObjectParameter("NotificationThresholdTimeType", notificationThresholdTimeType) :
                new ObjectParameter("NotificationThresholdTimeType", typeof(int));
    
            var mailFromAddressParameter = mailFromAddress != null ?
                new ObjectParameter("MailFromAddress", mailFromAddress) :
                new ObjectParameter("MailFromAddress", typeof(string));
    
            var mailToAddressParameter = mailToAddress != null ?
                new ObjectParameter("MailToAddress", mailToAddress) :
                new ObjectParameter("MailToAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEventLogConfig", logTypeKeyParameter, logTypePortalIDParameter, loggingIsActiveParameter, keepMostRecentParameter, emailNotificationIsActiveParameter, notificationThresholdParameter, notificationThresholdTimeParameter, notificationThresholdTimeTypeParameter, mailFromAddressParameter, mailToAddressParameter);
        }
    
        public virtual int AddEventLogType(string logTypeKey, string logTypeFriendlyName, string logTypeDescription, string logTypeOwner, string logTypeCSSClass)
        {
            var logTypeKeyParameter = logTypeKey != null ?
                new ObjectParameter("LogTypeKey", logTypeKey) :
                new ObjectParameter("LogTypeKey", typeof(string));
    
            var logTypeFriendlyNameParameter = logTypeFriendlyName != null ?
                new ObjectParameter("LogTypeFriendlyName", logTypeFriendlyName) :
                new ObjectParameter("LogTypeFriendlyName", typeof(string));
    
            var logTypeDescriptionParameter = logTypeDescription != null ?
                new ObjectParameter("LogTypeDescription", logTypeDescription) :
                new ObjectParameter("LogTypeDescription", typeof(string));
    
            var logTypeOwnerParameter = logTypeOwner != null ?
                new ObjectParameter("LogTypeOwner", logTypeOwner) :
                new ObjectParameter("LogTypeOwner", typeof(string));
    
            var logTypeCSSClassParameter = logTypeCSSClass != null ?
                new ObjectParameter("LogTypeCSSClass", logTypeCSSClass) :
                new ObjectParameter("LogTypeCSSClass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEventLogType", logTypeKeyParameter, logTypeFriendlyNameParameter, logTypeDescriptionParameter, logTypeOwnerParameter, logTypeCSSClassParameter);
        }
    
        public virtual int AddEventMessage(string eventName, Nullable<int> priority, string processorType, string processorCommand, string body, string sender, string subscriber, string authorizedRoles, string exceptionMessage, Nullable<System.DateTime> sentDate, Nullable<System.DateTime> expirationDate, string attributes)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var processorTypeParameter = processorType != null ?
                new ObjectParameter("ProcessorType", processorType) :
                new ObjectParameter("ProcessorType", typeof(string));
    
            var processorCommandParameter = processorCommand != null ?
                new ObjectParameter("ProcessorCommand", processorCommand) :
                new ObjectParameter("ProcessorCommand", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var senderParameter = sender != null ?
                new ObjectParameter("Sender", sender) :
                new ObjectParameter("Sender", typeof(string));
    
            var subscriberParameter = subscriber != null ?
                new ObjectParameter("Subscriber", subscriber) :
                new ObjectParameter("Subscriber", typeof(string));
    
            var authorizedRolesParameter = authorizedRoles != null ?
                new ObjectParameter("AuthorizedRoles", authorizedRoles) :
                new ObjectParameter("AuthorizedRoles", typeof(string));
    
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var attributesParameter = attributes != null ?
                new ObjectParameter("Attributes", attributes) :
                new ObjectParameter("Attributes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEventMessage", eventNameParameter, priorityParameter, processorTypeParameter, processorCommandParameter, bodyParameter, senderParameter, subscriberParameter, authorizedRolesParameter, exceptionMessageParameter, sentDateParameter, expirationDateParameter, attributesParameter);
        }
    
        public virtual int AddException(string exceptionHash, string message, string stackTrace, string innerMessage, string innerStackTrace, string source)
        {
            var exceptionHashParameter = exceptionHash != null ?
                new ObjectParameter("ExceptionHash", exceptionHash) :
                new ObjectParameter("ExceptionHash", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var innerMessageParameter = innerMessage != null ?
                new ObjectParameter("InnerMessage", innerMessage) :
                new ObjectParameter("InnerMessage", typeof(string));
    
            var innerStackTraceParameter = innerStackTrace != null ?
                new ObjectParameter("InnerStackTrace", innerStackTrace) :
                new ObjectParameter("InnerStackTrace", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddException", exceptionHashParameter, messageParameter, stackTraceParameter, innerMessageParameter, innerStackTraceParameter, sourceParameter);
        }
    
        public virtual int AddExceptionEvent(Nullable<long> logEventID, string assemblyVersion, Nullable<int> portalId, Nullable<int> userId, Nullable<int> tabId, string rawUrl, string referrer, string userAgent)
        {
            var logEventIDParameter = logEventID.HasValue ?
                new ObjectParameter("LogEventID", logEventID) :
                new ObjectParameter("LogEventID", typeof(long));
    
            var assemblyVersionParameter = assemblyVersion != null ?
                new ObjectParameter("AssemblyVersion", assemblyVersion) :
                new ObjectParameter("AssemblyVersion", typeof(string));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var rawUrlParameter = rawUrl != null ?
                new ObjectParameter("RawUrl", rawUrl) :
                new ObjectParameter("RawUrl", typeof(string));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            var userAgentParameter = userAgent != null ?
                new ObjectParameter("UserAgent", userAgent) :
                new ObjectParameter("UserAgent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddExceptionEvent", logEventIDParameter, assemblyVersionParameter, portalIdParameter, userIdParameter, tabIdParameter, rawUrlParameter, referrerParameter, userAgentParameter);
        }
    
        public virtual int AddExtensionUrlProvider(Nullable<int> extensionUrlProviderID, Nullable<int> desktopModuleId, string providerName, string providerType, string settingsControlSrc, Nullable<bool> isActive, Nullable<bool> rewriteAllUrls, Nullable<bool> redirectAllUrls, Nullable<bool> replaceAllUrls)
        {
            var extensionUrlProviderIDParameter = extensionUrlProviderID.HasValue ?
                new ObjectParameter("ExtensionUrlProviderID", extensionUrlProviderID) :
                new ObjectParameter("ExtensionUrlProviderID", typeof(int));
    
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var providerTypeParameter = providerType != null ?
                new ObjectParameter("ProviderType", providerType) :
                new ObjectParameter("ProviderType", typeof(string));
    
            var settingsControlSrcParameter = settingsControlSrc != null ?
                new ObjectParameter("SettingsControlSrc", settingsControlSrc) :
                new ObjectParameter("SettingsControlSrc", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var rewriteAllUrlsParameter = rewriteAllUrls.HasValue ?
                new ObjectParameter("RewriteAllUrls", rewriteAllUrls) :
                new ObjectParameter("RewriteAllUrls", typeof(bool));
    
            var redirectAllUrlsParameter = redirectAllUrls.HasValue ?
                new ObjectParameter("RedirectAllUrls", redirectAllUrls) :
                new ObjectParameter("RedirectAllUrls", typeof(bool));
    
            var replaceAllUrlsParameter = replaceAllUrls.HasValue ?
                new ObjectParameter("ReplaceAllUrls", replaceAllUrls) :
                new ObjectParameter("ReplaceAllUrls", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddExtensionUrlProvider", extensionUrlProviderIDParameter, desktopModuleIdParameter, providerNameParameter, providerTypeParameter, settingsControlSrcParameter, isActiveParameter, rewriteAllUrlsParameter, redirectAllUrlsParameter, replaceAllUrlsParameter);
        }
    
        public virtual int AddFile(Nullable<int> portalId, Nullable<System.Guid> uniqueId, Nullable<System.Guid> versionGuid, string fileName, string extension, Nullable<int> size, Nullable<int> width, Nullable<int> height, string contentType, string folder, Nullable<int> folderID, Nullable<int> createdByUserID, string hash, Nullable<System.DateTime> lastModificationTime, string title, Nullable<bool> enablePublishPeriod, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> contentItemID)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            var folderParameter = folder != null ?
                new ObjectParameter("Folder", folder) :
                new ObjectParameter("Folder", typeof(string));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var hashParameter = hash != null ?
                new ObjectParameter("Hash", hash) :
                new ObjectParameter("Hash", typeof(string));
    
            var lastModificationTimeParameter = lastModificationTime.HasValue ?
                new ObjectParameter("LastModificationTime", lastModificationTime) :
                new ObjectParameter("LastModificationTime", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var enablePublishPeriodParameter = enablePublishPeriod.HasValue ?
                new ObjectParameter("EnablePublishPeriod", enablePublishPeriod) :
                new ObjectParameter("EnablePublishPeriod", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFile", portalIdParameter, uniqueIdParameter, versionGuidParameter, fileNameParameter, extensionParameter, sizeParameter, widthParameter, heightParameter, contentTypeParameter, folderParameter, folderIDParameter, createdByUserIDParameter, hashParameter, lastModificationTimeParameter, titleParameter, enablePublishPeriodParameter, startDateParameter, endDateParameter, contentItemIDParameter);
        }
    
        public virtual int AddFileVersion(Nullable<int> fileId, Nullable<System.Guid> uniqueId, Nullable<System.Guid> versionGuid, string fileName, string extension, Nullable<int> size, Nullable<int> width, Nullable<int> height, string contentType, string folder, Nullable<int> folderID, Nullable<int> userID, string hash, Nullable<System.DateTime> lastModificationTime, string title, Nullable<bool> enablePublishPeriod, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> contentItemID, Nullable<bool> isPublished, byte[] content)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            var folderParameter = folder != null ?
                new ObjectParameter("Folder", folder) :
                new ObjectParameter("Folder", typeof(string));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var hashParameter = hash != null ?
                new ObjectParameter("Hash", hash) :
                new ObjectParameter("Hash", typeof(string));
    
            var lastModificationTimeParameter = lastModificationTime.HasValue ?
                new ObjectParameter("LastModificationTime", lastModificationTime) :
                new ObjectParameter("LastModificationTime", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var enablePublishPeriodParameter = enablePublishPeriod.HasValue ?
                new ObjectParameter("EnablePublishPeriod", enablePublishPeriod) :
                new ObjectParameter("EnablePublishPeriod", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFileVersion", fileIdParameter, uniqueIdParameter, versionGuidParameter, fileNameParameter, extensionParameter, sizeParameter, widthParameter, heightParameter, contentTypeParameter, folderParameter, folderIDParameter, userIDParameter, hashParameter, lastModificationTimeParameter, titleParameter, enablePublishPeriodParameter, startDateParameter, endDateParameter, contentItemIDParameter, isPublishedParameter, contentParameter);
        }
    
        public virtual int AddFolder(Nullable<int> portalID, Nullable<System.Guid> uniqueId, Nullable<System.Guid> versionGuid, string folderPath, string mappedPath, Nullable<int> storageLocation, Nullable<bool> isProtected, Nullable<bool> isCached, Nullable<System.DateTime> lastUpdated, Nullable<int> createdByUserID, Nullable<int> folderMappingID, Nullable<bool> isVersioned, Nullable<int> workflowID, Nullable<int> parentID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var mappedPathParameter = mappedPath != null ?
                new ObjectParameter("MappedPath", mappedPath) :
                new ObjectParameter("MappedPath", typeof(string));
    
            var storageLocationParameter = storageLocation.HasValue ?
                new ObjectParameter("StorageLocation", storageLocation) :
                new ObjectParameter("StorageLocation", typeof(int));
    
            var isProtectedParameter = isProtected.HasValue ?
                new ObjectParameter("IsProtected", isProtected) :
                new ObjectParameter("IsProtected", typeof(bool));
    
            var isCachedParameter = isCached.HasValue ?
                new ObjectParameter("IsCached", isCached) :
                new ObjectParameter("IsCached", typeof(bool));
    
            var lastUpdatedParameter = lastUpdated.HasValue ?
                new ObjectParameter("LastUpdated", lastUpdated) :
                new ObjectParameter("LastUpdated", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            var isVersionedParameter = isVersioned.HasValue ?
                new ObjectParameter("IsVersioned", isVersioned) :
                new ObjectParameter("IsVersioned", typeof(bool));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFolder", portalIDParameter, uniqueIdParameter, versionGuidParameter, folderPathParameter, mappedPathParameter, storageLocationParameter, isProtectedParameter, isCachedParameter, lastUpdatedParameter, createdByUserIDParameter, folderMappingIDParameter, isVersionedParameter, workflowIDParameter, parentIDParameter);
        }
    
        public virtual int AddFolderMapping(Nullable<int> portalID, string mappingName, string folderProviderType, Nullable<int> createdByUserID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var mappingNameParameter = mappingName != null ?
                new ObjectParameter("MappingName", mappingName) :
                new ObjectParameter("MappingName", typeof(string));
    
            var folderProviderTypeParameter = folderProviderType != null ?
                new ObjectParameter("FolderProviderType", folderProviderType) :
                new ObjectParameter("FolderProviderType", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFolderMapping", portalIDParameter, mappingNameParameter, folderProviderTypeParameter, createdByUserIDParameter);
        }
    
        public virtual int AddFolderMappingsSetting(Nullable<int> folderMappingID, string settingName, string settingValue, Nullable<int> createdByUserID)
        {
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFolderMappingsSetting", folderMappingIDParameter, settingNameParameter, settingValueParameter, createdByUserIDParameter);
        }
    
        public virtual int AddFolderPermission(Nullable<int> folderID, Nullable<int> permissionId, Nullable<int> roleId, Nullable<bool> allowAccess, Nullable<int> userId, Nullable<int> createdByUserId)
        {
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFolderPermission", folderIDParameter, permissionIdParameter, roleIdParameter, allowAccessParameter, userIdParameter, createdByUserIdParameter);
        }
    
        public virtual int AddHeirarchicalTerm(Nullable<int> vocabularyID, Nullable<int> parentTermID, string name, string description, Nullable<int> weight, Nullable<int> createdByUserID)
        {
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            var parentTermIDParameter = parentTermID.HasValue ?
                new ObjectParameter("ParentTermID", parentTermID) :
                new ObjectParameter("ParentTermID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHeirarchicalTerm", vocabularyIDParameter, parentTermIDParameter, nameParameter, descriptionParameter, weightParameter, createdByUserIDParameter);
        }
    
        public virtual int AddHostSetting(string settingName, string settingValue, Nullable<bool> settingIsSecure, Nullable<int> createdByUserID)
        {
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var settingIsSecureParameter = settingIsSecure.HasValue ?
                new ObjectParameter("SettingIsSecure", settingIsSecure) :
                new ObjectParameter("SettingIsSecure", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHostSetting", settingNameParameter, settingValueParameter, settingIsSecureParameter, createdByUserIDParameter);
        }
    
        public virtual int AddHtmlText(Nullable<int> moduleID, string content, string summary, Nullable<int> stateID, Nullable<bool> isPublished, Nullable<int> userID, Nullable<int> history)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var historyParameter = history.HasValue ?
                new ObjectParameter("History", history) :
                new ObjectParameter("History", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHtmlText", moduleIDParameter, contentParameter, summaryParameter, stateIDParameter, isPublishedParameter, userIDParameter, historyParameter);
        }
    
        public virtual int AddHtmlTextLog(Nullable<int> itemID, Nullable<int> stateID, string comment, Nullable<bool> approved, Nullable<int> userID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHtmlTextLog", itemIDParameter, stateIDParameter, commentParameter, approvedParameter, userIDParameter);
        }
    
        public virtual int AddHtmlTextUser(Nullable<int> itemID, Nullable<int> stateID, Nullable<int> moduleID, Nullable<int> tabID, Nullable<int> userID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHtmlTextUser", itemIDParameter, stateIDParameter, moduleIDParameter, tabIDParameter, userIDParameter);
        }
    
        public virtual int AddIPFilter(string iPAddress, string subnetMask, Nullable<byte> ruleType, Nullable<int> createdByUserID)
        {
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var subnetMaskParameter = subnetMask != null ?
                new ObjectParameter("SubnetMask", subnetMask) :
                new ObjectParameter("SubnetMask", typeof(string));
    
            var ruleTypeParameter = ruleType.HasValue ?
                new ObjectParameter("RuleType", ruleType) :
                new ObjectParameter("RuleType", typeof(byte));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIPFilter", iPAddressParameter, subnetMaskParameter, ruleTypeParameter, createdByUserIDParameter);
        }
    
        public virtual int AddLanguage(string cultureCode, string cultureName, string fallbackCulture, Nullable<int> createdByUserID)
        {
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var cultureNameParameter = cultureName != null ?
                new ObjectParameter("CultureName", cultureName) :
                new ObjectParameter("CultureName", typeof(string));
    
            var fallbackCultureParameter = fallbackCulture != null ?
                new ObjectParameter("FallbackCulture", fallbackCulture) :
                new ObjectParameter("FallbackCulture", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLanguage", cultureCodeParameter, cultureNameParameter, fallbackCultureParameter, createdByUserIDParameter);
        }
    
        public virtual int AddLanguagePack(Nullable<int> packageID, Nullable<int> languageID, Nullable<int> dependentPackageID, Nullable<int> createdByUserID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var dependentPackageIDParameter = dependentPackageID.HasValue ?
                new ObjectParameter("DependentPackageID", dependentPackageID) :
                new ObjectParameter("DependentPackageID", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLanguagePack", packageIDParameter, languageIDParameter, dependentPackageIDParameter, createdByUserIDParameter);
        }
    
        public virtual int AddListEntry(string listName, string value, string text, Nullable<int> parentID, Nullable<int> level, Nullable<bool> enableSortOrder, Nullable<int> definitionID, string description, Nullable<int> portalID, Nullable<bool> systemList, Nullable<int> createdByUserID)
        {
            var listNameParameter = listName != null ?
                new ObjectParameter("ListName", listName) :
                new ObjectParameter("ListName", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var enableSortOrderParameter = enableSortOrder.HasValue ?
                new ObjectParameter("EnableSortOrder", enableSortOrder) :
                new ObjectParameter("EnableSortOrder", typeof(bool));
    
            var definitionIDParameter = definitionID.HasValue ?
                new ObjectParameter("DefinitionID", definitionID) :
                new ObjectParameter("DefinitionID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var systemListParameter = systemList.HasValue ?
                new ObjectParameter("SystemList", systemList) :
                new ObjectParameter("SystemList", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddListEntry", listNameParameter, valueParameter, textParameter, parentIDParameter, levelParameter, enableSortOrderParameter, definitionIDParameter, descriptionParameter, portalIDParameter, systemListParameter, createdByUserIDParameter);
        }
    
        public virtual int AddMetaData(Nullable<int> contentItemID, string name, string value)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMetaData", contentItemIDParameter, nameParameter, valueParameter);
        }
    
        public virtual int AddModule(Nullable<int> contentItemID, Nullable<int> portalID, Nullable<int> moduleDefId, Nullable<bool> allTabs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> inheritViewPermissions, Nullable<bool> isShareable, Nullable<bool> isShareableViewOnly, Nullable<bool> isDeleted, Nullable<int> createdByUserID)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var moduleDefIdParameter = moduleDefId.HasValue ?
                new ObjectParameter("ModuleDefId", moduleDefId) :
                new ObjectParameter("ModuleDefId", typeof(int));
    
            var allTabsParameter = allTabs.HasValue ?
                new ObjectParameter("AllTabs", allTabs) :
                new ObjectParameter("AllTabs", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inheritViewPermissionsParameter = inheritViewPermissions.HasValue ?
                new ObjectParameter("InheritViewPermissions", inheritViewPermissions) :
                new ObjectParameter("InheritViewPermissions", typeof(bool));
    
            var isShareableParameter = isShareable.HasValue ?
                new ObjectParameter("IsShareable", isShareable) :
                new ObjectParameter("IsShareable", typeof(bool));
    
            var isShareableViewOnlyParameter = isShareableViewOnly.HasValue ?
                new ObjectParameter("IsShareableViewOnly", isShareableViewOnly) :
                new ObjectParameter("IsShareableViewOnly", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddModule", contentItemIDParameter, portalIDParameter, moduleDefIdParameter, allTabsParameter, startDateParameter, endDateParameter, inheritViewPermissionsParameter, isShareableParameter, isShareableViewOnlyParameter, isDeletedParameter, createdByUserIDParameter);
        }
    
        public virtual int AddModuleControl(Nullable<int> moduleDefID, string controlKey, string controlTitle, string controlSrc, string iconFile, Nullable<int> controlType, Nullable<int> viewOrder, string helpUrl, Nullable<bool> supportsPartialRendering, Nullable<bool> supportsPopUps, Nullable<int> createdByUserID)
        {
            var moduleDefIDParameter = moduleDefID.HasValue ?
                new ObjectParameter("ModuleDefID", moduleDefID) :
                new ObjectParameter("ModuleDefID", typeof(int));
    
            var controlKeyParameter = controlKey != null ?
                new ObjectParameter("ControlKey", controlKey) :
                new ObjectParameter("ControlKey", typeof(string));
    
            var controlTitleParameter = controlTitle != null ?
                new ObjectParameter("ControlTitle", controlTitle) :
                new ObjectParameter("ControlTitle", typeof(string));
    
            var controlSrcParameter = controlSrc != null ?
                new ObjectParameter("ControlSrc", controlSrc) :
                new ObjectParameter("ControlSrc", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var controlTypeParameter = controlType.HasValue ?
                new ObjectParameter("ControlType", controlType) :
                new ObjectParameter("ControlType", typeof(int));
    
            var viewOrderParameter = viewOrder.HasValue ?
                new ObjectParameter("ViewOrder", viewOrder) :
                new ObjectParameter("ViewOrder", typeof(int));
    
            var helpUrlParameter = helpUrl != null ?
                new ObjectParameter("HelpUrl", helpUrl) :
                new ObjectParameter("HelpUrl", typeof(string));
    
            var supportsPartialRenderingParameter = supportsPartialRendering.HasValue ?
                new ObjectParameter("SupportsPartialRendering", supportsPartialRendering) :
                new ObjectParameter("SupportsPartialRendering", typeof(bool));
    
            var supportsPopUpsParameter = supportsPopUps.HasValue ?
                new ObjectParameter("SupportsPopUps", supportsPopUps) :
                new ObjectParameter("SupportsPopUps", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddModuleControl", moduleDefIDParameter, controlKeyParameter, controlTitleParameter, controlSrcParameter, iconFileParameter, controlTypeParameter, viewOrderParameter, helpUrlParameter, supportsPartialRenderingParameter, supportsPopUpsParameter, createdByUserIDParameter);
        }
    
        public virtual int AddModuleDefinition(Nullable<int> desktopModuleId, string friendlyName, string definitionName, Nullable<int> defaultCacheTime, Nullable<int> createdByUserID)
        {
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var definitionNameParameter = definitionName != null ?
                new ObjectParameter("DefinitionName", definitionName) :
                new ObjectParameter("DefinitionName", typeof(string));
    
            var defaultCacheTimeParameter = defaultCacheTime.HasValue ?
                new ObjectParameter("DefaultCacheTime", defaultCacheTime) :
                new ObjectParameter("DefaultCacheTime", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddModuleDefinition", desktopModuleIdParameter, friendlyNameParameter, definitionNameParameter, defaultCacheTimeParameter, createdByUserIDParameter);
        }
    
        public virtual int AddModulePermission(Nullable<int> moduleID, Nullable<int> portalID, Nullable<int> permissionId, Nullable<int> roleId, Nullable<bool> allowAccess, Nullable<int> userId, Nullable<int> createdByUserId)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddModulePermission", moduleIDParameter, portalIDParameter, permissionIdParameter, roleIdParameter, allowAccessParameter, userIdParameter, createdByUserIdParameter);
        }
    
        public virtual int AddModuleSetting(Nullable<int> moduleId, string settingName, string settingValue, Nullable<int> createdByUserID)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddModuleSetting", moduleIdParameter, settingNameParameter, settingValueParameter, createdByUserIDParameter);
        }
    
        public virtual int AddPackage(Nullable<int> portalID, string name, string friendlyName, string description, string packageType, string version, string license, string manifest, string owner, string organization, string url, string email, string releaseNotes, Nullable<bool> isSystemPackage, Nullable<int> createdByUserID, string folderName, string iconFile)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var packageTypeParameter = packageType != null ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var licenseParameter = license != null ?
                new ObjectParameter("License", license) :
                new ObjectParameter("License", typeof(string));
    
            var manifestParameter = manifest != null ?
                new ObjectParameter("Manifest", manifest) :
                new ObjectParameter("Manifest", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(string));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var releaseNotesParameter = releaseNotes != null ?
                new ObjectParameter("ReleaseNotes", releaseNotes) :
                new ObjectParameter("ReleaseNotes", typeof(string));
    
            var isSystemPackageParameter = isSystemPackage.HasValue ?
                new ObjectParameter("IsSystemPackage", isSystemPackage) :
                new ObjectParameter("IsSystemPackage", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var folderNameParameter = folderName != null ?
                new ObjectParameter("FolderName", folderName) :
                new ObjectParameter("FolderName", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPackage", portalIDParameter, nameParameter, friendlyNameParameter, descriptionParameter, packageTypeParameter, versionParameter, licenseParameter, manifestParameter, ownerParameter, organizationParameter, urlParameter, emailParameter, releaseNotesParameter, isSystemPackageParameter, createdByUserIDParameter, folderNameParameter, iconFileParameter);
        }
    
        public virtual int AddPasswordHistory(Nullable<int> userId, string password, string passwordSalt, Nullable<int> retained, Nullable<int> createdByUserID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var retainedParameter = retained.HasValue ?
                new ObjectParameter("Retained", retained) :
                new ObjectParameter("Retained", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPasswordHistory", userIdParameter, passwordParameter, passwordSaltParameter, retainedParameter, createdByUserIDParameter);
        }
    
        public virtual int AddPermission(Nullable<int> moduleDefID, string permissionCode, string permissionKey, string permissionName, Nullable<int> createdByUserID)
        {
            var moduleDefIDParameter = moduleDefID.HasValue ?
                new ObjectParameter("ModuleDefID", moduleDefID) :
                new ObjectParameter("ModuleDefID", typeof(int));
    
            var permissionCodeParameter = permissionCode != null ?
                new ObjectParameter("PermissionCode", permissionCode) :
                new ObjectParameter("PermissionCode", typeof(string));
    
            var permissionKeyParameter = permissionKey != null ?
                new ObjectParameter("PermissionKey", permissionKey) :
                new ObjectParameter("PermissionKey", typeof(string));
    
            var permissionNameParameter = permissionName != null ?
                new ObjectParameter("PermissionName", permissionName) :
                new ObjectParameter("PermissionName", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPermission", moduleDefIDParameter, permissionCodeParameter, permissionKeyParameter, permissionNameParameter, createdByUserIDParameter);
        }
    
        public virtual int AddPortalAlias(Nullable<int> portalID, string hTTPAlias, string cultureCode, string skin, string browserType, Nullable<bool> isPrimary, Nullable<int> createdByUserID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var hTTPAliasParameter = hTTPAlias != null ?
                new ObjectParameter("HTTPAlias", hTTPAlias) :
                new ObjectParameter("HTTPAlias", typeof(string));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var skinParameter = skin != null ?
                new ObjectParameter("Skin", skin) :
                new ObjectParameter("Skin", typeof(string));
    
            var browserTypeParameter = browserType != null ?
                new ObjectParameter("BrowserType", browserType) :
                new ObjectParameter("BrowserType", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPortalAlias", portalIDParameter, hTTPAliasParameter, cultureCodeParameter, skinParameter, browserTypeParameter, isPrimaryParameter, createdByUserIDParameter);
        }
    
        public virtual int AddPortalDesktopModule(Nullable<int> portalID, Nullable<int> desktopModuleId, Nullable<int> createdByUserID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPortalDesktopModule", portalIDParameter, desktopModuleIdParameter, createdByUserIDParameter);
        }
    
        public virtual int AddPortalGroup(string portalGroupName, string portalGroupDescription, Nullable<int> masterPortalID, string authenticationDomain, Nullable<int> createdByUserID)
        {
            var portalGroupNameParameter = portalGroupName != null ?
                new ObjectParameter("PortalGroupName", portalGroupName) :
                new ObjectParameter("PortalGroupName", typeof(string));
    
            var portalGroupDescriptionParameter = portalGroupDescription != null ?
                new ObjectParameter("PortalGroupDescription", portalGroupDescription) :
                new ObjectParameter("PortalGroupDescription", typeof(string));
    
            var masterPortalIDParameter = masterPortalID.HasValue ?
                new ObjectParameter("MasterPortalID", masterPortalID) :
                new ObjectParameter("MasterPortalID", typeof(int));
    
            var authenticationDomainParameter = authenticationDomain != null ?
                new ObjectParameter("AuthenticationDomain", authenticationDomain) :
                new ObjectParameter("AuthenticationDomain", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPortalGroup", portalGroupNameParameter, portalGroupDescriptionParameter, masterPortalIDParameter, authenticationDomainParameter, createdByUserIDParameter);
        }
    
        public virtual int AddPortalInfo(string portalName, string currency, Nullable<System.DateTime> expiryDate, Nullable<decimal> hostFee, Nullable<int> hostSpace, Nullable<int> pageQuota, Nullable<int> userQuota, Nullable<int> siteLogHistory, string homeDirectory, string cultureCode, Nullable<int> createdByUserID)
        {
            var portalNameParameter = portalName != null ?
                new ObjectParameter("PortalName", portalName) :
                new ObjectParameter("PortalName", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var hostFeeParameter = hostFee.HasValue ?
                new ObjectParameter("HostFee", hostFee) :
                new ObjectParameter("HostFee", typeof(decimal));
    
            var hostSpaceParameter = hostSpace.HasValue ?
                new ObjectParameter("HostSpace", hostSpace) :
                new ObjectParameter("HostSpace", typeof(int));
    
            var pageQuotaParameter = pageQuota.HasValue ?
                new ObjectParameter("PageQuota", pageQuota) :
                new ObjectParameter("PageQuota", typeof(int));
    
            var userQuotaParameter = userQuota.HasValue ?
                new ObjectParameter("UserQuota", userQuota) :
                new ObjectParameter("UserQuota", typeof(int));
    
            var siteLogHistoryParameter = siteLogHistory.HasValue ?
                new ObjectParameter("SiteLogHistory", siteLogHistory) :
                new ObjectParameter("SiteLogHistory", typeof(int));
    
            var homeDirectoryParameter = homeDirectory != null ?
                new ObjectParameter("HomeDirectory", homeDirectory) :
                new ObjectParameter("HomeDirectory", typeof(string));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPortalInfo", portalNameParameter, currencyParameter, expiryDateParameter, hostFeeParameter, hostSpaceParameter, pageQuotaParameter, userQuotaParameter, siteLogHistoryParameter, homeDirectoryParameter, cultureCodeParameter, createdByUserIDParameter);
        }
    
        public virtual int AddPortalLanguage(Nullable<int> portalId, Nullable<int> languageId, Nullable<bool> isPublished, Nullable<int> createdByUserID)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPortalLanguage", portalIdParameter, languageIdParameter, isPublishedParameter, createdByUserIDParameter);
        }
    
        public virtual int AddProfile(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProfile", userIDParameter, portalIDParameter);
        }
    
        public virtual int AddPropertyDefinition(Nullable<int> portalId, Nullable<int> moduleDefId, Nullable<int> dataType, string defaultValue, string propertyCategory, string propertyName, Nullable<bool> readOnly, Nullable<bool> required, string validationExpression, Nullable<int> viewOrder, Nullable<bool> visible, Nullable<int> length, Nullable<int> defaultVisibility, Nullable<int> createdByUserID)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleDefIdParameter = moduleDefId.HasValue ?
                new ObjectParameter("ModuleDefId", moduleDefId) :
                new ObjectParameter("ModuleDefId", typeof(int));
    
            var dataTypeParameter = dataType.HasValue ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(int));
    
            var defaultValueParameter = defaultValue != null ?
                new ObjectParameter("DefaultValue", defaultValue) :
                new ObjectParameter("DefaultValue", typeof(string));
    
            var propertyCategoryParameter = propertyCategory != null ?
                new ObjectParameter("PropertyCategory", propertyCategory) :
                new ObjectParameter("PropertyCategory", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var readOnlyParameter = readOnly.HasValue ?
                new ObjectParameter("ReadOnly", readOnly) :
                new ObjectParameter("ReadOnly", typeof(bool));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(bool));
    
            var validationExpressionParameter = validationExpression != null ?
                new ObjectParameter("ValidationExpression", validationExpression) :
                new ObjectParameter("ValidationExpression", typeof(string));
    
            var viewOrderParameter = viewOrder.HasValue ?
                new ObjectParameter("ViewOrder", viewOrder) :
                new ObjectParameter("ViewOrder", typeof(int));
    
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("Visible", visible) :
                new ObjectParameter("Visible", typeof(bool));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var defaultVisibilityParameter = defaultVisibility.HasValue ?
                new ObjectParameter("DefaultVisibility", defaultVisibility) :
                new ObjectParameter("DefaultVisibility", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPropertyDefinition", portalIdParameter, moduleDefIdParameter, dataTypeParameter, defaultValueParameter, propertyCategoryParameter, propertyNameParameter, readOnlyParameter, requiredParameter, validationExpressionParameter, viewOrderParameter, visibleParameter, lengthParameter, defaultVisibilityParameter, createdByUserIDParameter);
        }
    
        public virtual int AddRole(Nullable<int> portalID, Nullable<int> roleGroupId, string roleName, string description, Nullable<decimal> serviceFee, Nullable<int> billingPeriod, string billingFrequency, Nullable<decimal> trialFee, Nullable<int> trialPeriod, string trialFrequency, Nullable<bool> isPublic, Nullable<bool> autoAssignment, string rSVPCode, string iconFile, Nullable<int> createdByUserID, Nullable<int> status, Nullable<int> securityMode, Nullable<bool> isSystemRole)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var roleGroupIdParameter = roleGroupId.HasValue ?
                new ObjectParameter("RoleGroupId", roleGroupId) :
                new ObjectParameter("RoleGroupId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var serviceFeeParameter = serviceFee.HasValue ?
                new ObjectParameter("ServiceFee", serviceFee) :
                new ObjectParameter("ServiceFee", typeof(decimal));
    
            var billingPeriodParameter = billingPeriod.HasValue ?
                new ObjectParameter("BillingPeriod", billingPeriod) :
                new ObjectParameter("BillingPeriod", typeof(int));
    
            var billingFrequencyParameter = billingFrequency != null ?
                new ObjectParameter("BillingFrequency", billingFrequency) :
                new ObjectParameter("BillingFrequency", typeof(string));
    
            var trialFeeParameter = trialFee.HasValue ?
                new ObjectParameter("TrialFee", trialFee) :
                new ObjectParameter("TrialFee", typeof(decimal));
    
            var trialPeriodParameter = trialPeriod.HasValue ?
                new ObjectParameter("TrialPeriod", trialPeriod) :
                new ObjectParameter("TrialPeriod", typeof(int));
    
            var trialFrequencyParameter = trialFrequency != null ?
                new ObjectParameter("TrialFrequency", trialFrequency) :
                new ObjectParameter("TrialFrequency", typeof(string));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            var autoAssignmentParameter = autoAssignment.HasValue ?
                new ObjectParameter("AutoAssignment", autoAssignment) :
                new ObjectParameter("AutoAssignment", typeof(bool));
    
            var rSVPCodeParameter = rSVPCode != null ?
                new ObjectParameter("RSVPCode", rSVPCode) :
                new ObjectParameter("RSVPCode", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var securityModeParameter = securityMode.HasValue ?
                new ObjectParameter("SecurityMode", securityMode) :
                new ObjectParameter("SecurityMode", typeof(int));
    
            var isSystemRoleParameter = isSystemRole.HasValue ?
                new ObjectParameter("IsSystemRole", isSystemRole) :
                new ObjectParameter("IsSystemRole", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRole", portalIDParameter, roleGroupIdParameter, roleNameParameter, descriptionParameter, serviceFeeParameter, billingPeriodParameter, billingFrequencyParameter, trialFeeParameter, trialPeriodParameter, trialFrequencyParameter, isPublicParameter, autoAssignmentParameter, rSVPCodeParameter, iconFileParameter, createdByUserIDParameter, statusParameter, securityModeParameter, isSystemRoleParameter);
        }
    
        public virtual int AddRoleGroup(Nullable<int> portalID, string roleGroupName, string description, Nullable<int> createdByUserID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var roleGroupNameParameter = roleGroupName != null ?
                new ObjectParameter("RoleGroupName", roleGroupName) :
                new ObjectParameter("RoleGroupName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoleGroup", portalIDParameter, roleGroupNameParameter, descriptionParameter, createdByUserIDParameter);
        }
    
        public virtual int AddSchedule(string typeFullName, Nullable<int> timeLapse, string timeLapseMeasurement, Nullable<int> retryTimeLapse, string retryTimeLapseMeasurement, Nullable<int> retainHistoryNum, string attachToEvent, Nullable<bool> catchUpEnabled, Nullable<bool> enabled, string objectDependencies, string servers, Nullable<int> createdByUserID, string friendlyName, Nullable<System.DateTime> scheduleStartDate)
        {
            var typeFullNameParameter = typeFullName != null ?
                new ObjectParameter("TypeFullName", typeFullName) :
                new ObjectParameter("TypeFullName", typeof(string));
    
            var timeLapseParameter = timeLapse.HasValue ?
                new ObjectParameter("TimeLapse", timeLapse) :
                new ObjectParameter("TimeLapse", typeof(int));
    
            var timeLapseMeasurementParameter = timeLapseMeasurement != null ?
                new ObjectParameter("TimeLapseMeasurement", timeLapseMeasurement) :
                new ObjectParameter("TimeLapseMeasurement", typeof(string));
    
            var retryTimeLapseParameter = retryTimeLapse.HasValue ?
                new ObjectParameter("RetryTimeLapse", retryTimeLapse) :
                new ObjectParameter("RetryTimeLapse", typeof(int));
    
            var retryTimeLapseMeasurementParameter = retryTimeLapseMeasurement != null ?
                new ObjectParameter("RetryTimeLapseMeasurement", retryTimeLapseMeasurement) :
                new ObjectParameter("RetryTimeLapseMeasurement", typeof(string));
    
            var retainHistoryNumParameter = retainHistoryNum.HasValue ?
                new ObjectParameter("RetainHistoryNum", retainHistoryNum) :
                new ObjectParameter("RetainHistoryNum", typeof(int));
    
            var attachToEventParameter = attachToEvent != null ?
                new ObjectParameter("AttachToEvent", attachToEvent) :
                new ObjectParameter("AttachToEvent", typeof(string));
    
            var catchUpEnabledParameter = catchUpEnabled.HasValue ?
                new ObjectParameter("CatchUpEnabled", catchUpEnabled) :
                new ObjectParameter("CatchUpEnabled", typeof(bool));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            var objectDependenciesParameter = objectDependencies != null ?
                new ObjectParameter("ObjectDependencies", objectDependencies) :
                new ObjectParameter("ObjectDependencies", typeof(string));
    
            var serversParameter = servers != null ?
                new ObjectParameter("Servers", servers) :
                new ObjectParameter("Servers", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var scheduleStartDateParameter = scheduleStartDate.HasValue ?
                new ObjectParameter("ScheduleStartDate", scheduleStartDate) :
                new ObjectParameter("ScheduleStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSchedule", typeFullNameParameter, timeLapseParameter, timeLapseMeasurementParameter, retryTimeLapseParameter, retryTimeLapseMeasurementParameter, retainHistoryNumParameter, attachToEventParameter, catchUpEnabledParameter, enabledParameter, objectDependenciesParameter, serversParameter, createdByUserIDParameter, friendlyNameParameter, scheduleStartDateParameter);
        }
    
        public virtual int AddScheduleHistory(Nullable<int> scheduleID, Nullable<System.DateTime> startDate, string server)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddScheduleHistory", scheduleIDParameter, startDateParameter, serverParameter);
        }
    
        public virtual int AddScheduleItemSetting(Nullable<int> scheduleID, string name, string value)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddScheduleItemSetting", scheduleIDParameter, nameParameter, valueParameter);
        }
    
        public virtual int AddScopeType(string scopeType)
        {
            var scopeTypeParameter = scopeType != null ?
                new ObjectParameter("ScopeType", scopeType) :
                new ObjectParameter("ScopeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddScopeType", scopeTypeParameter);
        }
    
        public virtual int AddSearchCommonWord(string commonWord, string locale)
        {
            var commonWordParameter = commonWord != null ?
                new ObjectParameter("CommonWord", commonWord) :
                new ObjectParameter("CommonWord", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSearchCommonWord", commonWordParameter, localeParameter);
        }
    
        public virtual int AddSimpleTerm(Nullable<int> vocabularyID, string name, string description, Nullable<int> weight, Nullable<int> createdByUserID)
        {
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSimpleTerm", vocabularyIDParameter, nameParameter, descriptionParameter, weightParameter, createdByUserIDParameter);
        }
    
        public virtual int AddSiteLog(Nullable<System.DateTime> dateTime, Nullable<int> portalID, Nullable<int> userID, string referrer, string url, string userAgent, string userHostAddress, string userHostName, Nullable<int> tabId, Nullable<int> affiliateId)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var userAgentParameter = userAgent != null ?
                new ObjectParameter("UserAgent", userAgent) :
                new ObjectParameter("UserAgent", typeof(string));
    
            var userHostAddressParameter = userHostAddress != null ?
                new ObjectParameter("UserHostAddress", userHostAddress) :
                new ObjectParameter("UserHostAddress", typeof(string));
    
            var userHostNameParameter = userHostName != null ?
                new ObjectParameter("UserHostName", userHostName) :
                new ObjectParameter("UserHostName", typeof(string));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSiteLog", dateTimeParameter, portalIDParameter, userIDParameter, referrerParameter, urlParameter, userAgentParameter, userHostAddressParameter, userHostNameParameter, tabIdParameter, affiliateIdParameter);
        }
    
        public virtual int AddSkin(Nullable<int> skinPackageID, string skinSrc)
        {
            var skinPackageIDParameter = skinPackageID.HasValue ?
                new ObjectParameter("SkinPackageID", skinPackageID) :
                new ObjectParameter("SkinPackageID", typeof(int));
    
            var skinSrcParameter = skinSrc != null ?
                new ObjectParameter("SkinSrc", skinSrc) :
                new ObjectParameter("SkinSrc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSkin", skinPackageIDParameter, skinSrcParameter);
        }
    
        public virtual int AddSkinControl(Nullable<int> packageID, string controlKey, string controlSrc, Nullable<bool> supportsPartialRendering, Nullable<int> createdByUserID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var controlKeyParameter = controlKey != null ?
                new ObjectParameter("ControlKey", controlKey) :
                new ObjectParameter("ControlKey", typeof(string));
    
            var controlSrcParameter = controlSrc != null ?
                new ObjectParameter("ControlSrc", controlSrc) :
                new ObjectParameter("ControlSrc", typeof(string));
    
            var supportsPartialRenderingParameter = supportsPartialRendering.HasValue ?
                new ObjectParameter("SupportsPartialRendering", supportsPartialRendering) :
                new ObjectParameter("SupportsPartialRendering", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSkinControl", packageIDParameter, controlKeyParameter, controlSrcParameter, supportsPartialRenderingParameter, createdByUserIDParameter);
        }
    
        public virtual int AddSkinPackage(Nullable<int> packageID, Nullable<int> portalID, string skinName, string skinType, Nullable<int> createdByUserID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var skinNameParameter = skinName != null ?
                new ObjectParameter("SkinName", skinName) :
                new ObjectParameter("SkinName", typeof(string));
    
            var skinTypeParameter = skinType != null ?
                new ObjectParameter("SkinType", skinType) :
                new ObjectParameter("SkinType", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSkinPackage", packageIDParameter, portalIDParameter, skinNameParameter, skinTypeParameter, createdByUserIDParameter);
        }
    
        public virtual int AddSynonymsGroup(string synonymsTags, Nullable<int> createdByUserID, Nullable<int> portalID, string cultureCode)
        {
            var synonymsTagsParameter = synonymsTags != null ?
                new ObjectParameter("SynonymsTags", synonymsTags) :
                new ObjectParameter("SynonymsTags", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSynonymsGroup", synonymsTagsParameter, createdByUserIDParameter, portalIDParameter, cultureCodeParameter);
        }
    
        public virtual int AddSystemMessage(Nullable<int> portalID, string messageName, string messageValue)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var messageNameParameter = messageName != null ?
                new ObjectParameter("MessageName", messageName) :
                new ObjectParameter("MessageName", typeof(string));
    
            var messageValueParameter = messageValue != null ?
                new ObjectParameter("MessageValue", messageValue) :
                new ObjectParameter("MessageValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSystemMessage", portalIDParameter, messageNameParameter, messageValueParameter);
        }
    
        public virtual int AddTab(Nullable<int> contentItemID, Nullable<int> portalID, Nullable<int> tabOrder, Nullable<System.Guid> uniqueId, Nullable<System.Guid> versionGuid, Nullable<System.Guid> defaultLanguageGuid, Nullable<System.Guid> localizedVersionGuid, string tabName, Nullable<bool> isVisible, Nullable<bool> disableLink, Nullable<int> parentId, string iconFile, string iconFileLarge, string title, string description, string keyWords, string url, string skinSrc, string containerSrc, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> refreshInterval, string pageHeadText, Nullable<bool> isSecure, Nullable<bool> permanentRedirect, Nullable<double> siteMapPriority, Nullable<int> createdByUserID, string cultureCode, Nullable<bool> isSystem)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var tabOrderParameter = tabOrder.HasValue ?
                new ObjectParameter("TabOrder", tabOrder) :
                new ObjectParameter("TabOrder", typeof(int));
    
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var defaultLanguageGuidParameter = defaultLanguageGuid.HasValue ?
                new ObjectParameter("DefaultLanguageGuid", defaultLanguageGuid) :
                new ObjectParameter("DefaultLanguageGuid", typeof(System.Guid));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("IsVisible", isVisible) :
                new ObjectParameter("IsVisible", typeof(bool));
    
            var disableLinkParameter = disableLink.HasValue ?
                new ObjectParameter("DisableLink", disableLink) :
                new ObjectParameter("DisableLink", typeof(bool));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var iconFileLargeParameter = iconFileLarge != null ?
                new ObjectParameter("IconFileLarge", iconFileLarge) :
                new ObjectParameter("IconFileLarge", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var skinSrcParameter = skinSrc != null ?
                new ObjectParameter("SkinSrc", skinSrc) :
                new ObjectParameter("SkinSrc", typeof(string));
    
            var containerSrcParameter = containerSrc != null ?
                new ObjectParameter("ContainerSrc", containerSrc) :
                new ObjectParameter("ContainerSrc", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var refreshIntervalParameter = refreshInterval.HasValue ?
                new ObjectParameter("RefreshInterval", refreshInterval) :
                new ObjectParameter("RefreshInterval", typeof(int));
    
            var pageHeadTextParameter = pageHeadText != null ?
                new ObjectParameter("PageHeadText", pageHeadText) :
                new ObjectParameter("PageHeadText", typeof(string));
    
            var isSecureParameter = isSecure.HasValue ?
                new ObjectParameter("IsSecure", isSecure) :
                new ObjectParameter("IsSecure", typeof(bool));
    
            var permanentRedirectParameter = permanentRedirect.HasValue ?
                new ObjectParameter("PermanentRedirect", permanentRedirect) :
                new ObjectParameter("PermanentRedirect", typeof(bool));
    
            var siteMapPriorityParameter = siteMapPriority.HasValue ?
                new ObjectParameter("SiteMapPriority", siteMapPriority) :
                new ObjectParameter("SiteMapPriority", typeof(double));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var isSystemParameter = isSystem.HasValue ?
                new ObjectParameter("IsSystem", isSystem) :
                new ObjectParameter("IsSystem", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTab", contentItemIDParameter, portalIDParameter, tabOrderParameter, uniqueIdParameter, versionGuidParameter, defaultLanguageGuidParameter, localizedVersionGuidParameter, tabNameParameter, isVisibleParameter, disableLinkParameter, parentIdParameter, iconFileParameter, iconFileLargeParameter, titleParameter, descriptionParameter, keyWordsParameter, urlParameter, skinSrcParameter, containerSrcParameter, startDateParameter, endDateParameter, refreshIntervalParameter, pageHeadTextParameter, isSecureParameter, permanentRedirectParameter, siteMapPriorityParameter, createdByUserIDParameter, cultureCodeParameter, isSystemParameter);
        }
    
        public virtual int AddTabAfter(Nullable<int> afterTabID, Nullable<int> contentItemID, Nullable<int> portalID, Nullable<System.Guid> uniqueId, Nullable<System.Guid> versionGuid, Nullable<System.Guid> defaultLanguageGuid, Nullable<System.Guid> localizedVersionGuid, string tabName, Nullable<bool> isVisible, Nullable<bool> disableLink, Nullable<int> parentId, string iconFile, string iconFileLarge, string title, string description, string keyWords, string url, string skinSrc, string containerSrc, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> refreshInterval, string pageHeadText, Nullable<bool> isSecure, Nullable<bool> permanentRedirect, Nullable<double> siteMapPriority, Nullable<int> createdByUserID, string cultureCode, Nullable<bool> isSystem)
        {
            var afterTabIDParameter = afterTabID.HasValue ?
                new ObjectParameter("AfterTabID", afterTabID) :
                new ObjectParameter("AfterTabID", typeof(int));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var defaultLanguageGuidParameter = defaultLanguageGuid.HasValue ?
                new ObjectParameter("DefaultLanguageGuid", defaultLanguageGuid) :
                new ObjectParameter("DefaultLanguageGuid", typeof(System.Guid));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("IsVisible", isVisible) :
                new ObjectParameter("IsVisible", typeof(bool));
    
            var disableLinkParameter = disableLink.HasValue ?
                new ObjectParameter("DisableLink", disableLink) :
                new ObjectParameter("DisableLink", typeof(bool));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var iconFileLargeParameter = iconFileLarge != null ?
                new ObjectParameter("IconFileLarge", iconFileLarge) :
                new ObjectParameter("IconFileLarge", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var skinSrcParameter = skinSrc != null ?
                new ObjectParameter("SkinSrc", skinSrc) :
                new ObjectParameter("SkinSrc", typeof(string));
    
            var containerSrcParameter = containerSrc != null ?
                new ObjectParameter("ContainerSrc", containerSrc) :
                new ObjectParameter("ContainerSrc", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var refreshIntervalParameter = refreshInterval.HasValue ?
                new ObjectParameter("RefreshInterval", refreshInterval) :
                new ObjectParameter("RefreshInterval", typeof(int));
    
            var pageHeadTextParameter = pageHeadText != null ?
                new ObjectParameter("PageHeadText", pageHeadText) :
                new ObjectParameter("PageHeadText", typeof(string));
    
            var isSecureParameter = isSecure.HasValue ?
                new ObjectParameter("IsSecure", isSecure) :
                new ObjectParameter("IsSecure", typeof(bool));
    
            var permanentRedirectParameter = permanentRedirect.HasValue ?
                new ObjectParameter("PermanentRedirect", permanentRedirect) :
                new ObjectParameter("PermanentRedirect", typeof(bool));
    
            var siteMapPriorityParameter = siteMapPriority.HasValue ?
                new ObjectParameter("SiteMapPriority", siteMapPriority) :
                new ObjectParameter("SiteMapPriority", typeof(double));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var isSystemParameter = isSystem.HasValue ?
                new ObjectParameter("IsSystem", isSystem) :
                new ObjectParameter("IsSystem", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTabAfter", afterTabIDParameter, contentItemIDParameter, portalIDParameter, uniqueIdParameter, versionGuidParameter, defaultLanguageGuidParameter, localizedVersionGuidParameter, tabNameParameter, isVisibleParameter, disableLinkParameter, parentIdParameter, iconFileParameter, iconFileLargeParameter, titleParameter, descriptionParameter, keyWordsParameter, urlParameter, skinSrcParameter, containerSrcParameter, startDateParameter, endDateParameter, refreshIntervalParameter, pageHeadTextParameter, isSecureParameter, permanentRedirectParameter, siteMapPriorityParameter, createdByUserIDParameter, cultureCodeParameter, isSystemParameter);
        }
    
        public virtual int AddTabBefore(Nullable<int> beforeTabID, Nullable<int> contentItemID, Nullable<int> portalID, Nullable<System.Guid> uniqueId, Nullable<System.Guid> versionGuid, Nullable<System.Guid> defaultLanguageGuid, Nullable<System.Guid> localizedVersionGuid, string tabName, Nullable<bool> isVisible, Nullable<bool> disableLink, Nullable<int> parentId, string iconFile, string iconFileLarge, string title, string description, string keyWords, string url, string skinSrc, string containerSrc, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> refreshInterval, string pageHeadText, Nullable<bool> isSecure, Nullable<bool> permanentRedirect, Nullable<double> siteMapPriority, Nullable<int> createdByUserID, string cultureCode, Nullable<bool> isSystem)
        {
            var beforeTabIDParameter = beforeTabID.HasValue ?
                new ObjectParameter("BeforeTabID", beforeTabID) :
                new ObjectParameter("BeforeTabID", typeof(int));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var defaultLanguageGuidParameter = defaultLanguageGuid.HasValue ?
                new ObjectParameter("DefaultLanguageGuid", defaultLanguageGuid) :
                new ObjectParameter("DefaultLanguageGuid", typeof(System.Guid));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("IsVisible", isVisible) :
                new ObjectParameter("IsVisible", typeof(bool));
    
            var disableLinkParameter = disableLink.HasValue ?
                new ObjectParameter("DisableLink", disableLink) :
                new ObjectParameter("DisableLink", typeof(bool));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var iconFileLargeParameter = iconFileLarge != null ?
                new ObjectParameter("IconFileLarge", iconFileLarge) :
                new ObjectParameter("IconFileLarge", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var skinSrcParameter = skinSrc != null ?
                new ObjectParameter("SkinSrc", skinSrc) :
                new ObjectParameter("SkinSrc", typeof(string));
    
            var containerSrcParameter = containerSrc != null ?
                new ObjectParameter("ContainerSrc", containerSrc) :
                new ObjectParameter("ContainerSrc", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var refreshIntervalParameter = refreshInterval.HasValue ?
                new ObjectParameter("RefreshInterval", refreshInterval) :
                new ObjectParameter("RefreshInterval", typeof(int));
    
            var pageHeadTextParameter = pageHeadText != null ?
                new ObjectParameter("PageHeadText", pageHeadText) :
                new ObjectParameter("PageHeadText", typeof(string));
    
            var isSecureParameter = isSecure.HasValue ?
                new ObjectParameter("IsSecure", isSecure) :
                new ObjectParameter("IsSecure", typeof(bool));
    
            var permanentRedirectParameter = permanentRedirect.HasValue ?
                new ObjectParameter("PermanentRedirect", permanentRedirect) :
                new ObjectParameter("PermanentRedirect", typeof(bool));
    
            var siteMapPriorityParameter = siteMapPriority.HasValue ?
                new ObjectParameter("SiteMapPriority", siteMapPriority) :
                new ObjectParameter("SiteMapPriority", typeof(double));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var isSystemParameter = isSystem.HasValue ?
                new ObjectParameter("IsSystem", isSystem) :
                new ObjectParameter("IsSystem", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTabBefore", beforeTabIDParameter, contentItemIDParameter, portalIDParameter, uniqueIdParameter, versionGuidParameter, defaultLanguageGuidParameter, localizedVersionGuidParameter, tabNameParameter, isVisibleParameter, disableLinkParameter, parentIdParameter, iconFileParameter, iconFileLargeParameter, titleParameter, descriptionParameter, keyWordsParameter, urlParameter, skinSrcParameter, containerSrcParameter, startDateParameter, endDateParameter, refreshIntervalParameter, pageHeadTextParameter, isSecureParameter, permanentRedirectParameter, siteMapPriorityParameter, createdByUserIDParameter, cultureCodeParameter, isSystemParameter);
        }
    
        public virtual int AddTabModule(Nullable<int> tabId, Nullable<int> moduleId, string moduleTitle, string header, string footer, Nullable<int> moduleOrder, string paneName, Nullable<int> cacheTime, string cacheMethod, string alignment, string color, string border, string iconFile, Nullable<int> visibility, string containerSrc, Nullable<bool> displayTitle, Nullable<bool> displayPrint, Nullable<bool> displaySyndicate, Nullable<bool> isWebSlice, string webSliceTitle, Nullable<System.DateTime> webSliceExpiryDate, Nullable<int> webSliceTTL, Nullable<System.Guid> uniqueId, Nullable<System.Guid> versionGuid, Nullable<System.Guid> defaultLanguageGuid, Nullable<System.Guid> localizedVersionGuid, string cultureCode, Nullable<int> createdByUserID)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var moduleTitleParameter = moduleTitle != null ?
                new ObjectParameter("ModuleTitle", moduleTitle) :
                new ObjectParameter("ModuleTitle", typeof(string));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var footerParameter = footer != null ?
                new ObjectParameter("Footer", footer) :
                new ObjectParameter("Footer", typeof(string));
    
            var moduleOrderParameter = moduleOrder.HasValue ?
                new ObjectParameter("ModuleOrder", moduleOrder) :
                new ObjectParameter("ModuleOrder", typeof(int));
    
            var paneNameParameter = paneName != null ?
                new ObjectParameter("PaneName", paneName) :
                new ObjectParameter("PaneName", typeof(string));
    
            var cacheTimeParameter = cacheTime.HasValue ?
                new ObjectParameter("CacheTime", cacheTime) :
                new ObjectParameter("CacheTime", typeof(int));
    
            var cacheMethodParameter = cacheMethod != null ?
                new ObjectParameter("CacheMethod", cacheMethod) :
                new ObjectParameter("CacheMethod", typeof(string));
    
            var alignmentParameter = alignment != null ?
                new ObjectParameter("Alignment", alignment) :
                new ObjectParameter("Alignment", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var borderParameter = border != null ?
                new ObjectParameter("Border", border) :
                new ObjectParameter("Border", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var visibilityParameter = visibility.HasValue ?
                new ObjectParameter("Visibility", visibility) :
                new ObjectParameter("Visibility", typeof(int));
    
            var containerSrcParameter = containerSrc != null ?
                new ObjectParameter("ContainerSrc", containerSrc) :
                new ObjectParameter("ContainerSrc", typeof(string));
    
            var displayTitleParameter = displayTitle.HasValue ?
                new ObjectParameter("DisplayTitle", displayTitle) :
                new ObjectParameter("DisplayTitle", typeof(bool));
    
            var displayPrintParameter = displayPrint.HasValue ?
                new ObjectParameter("DisplayPrint", displayPrint) :
                new ObjectParameter("DisplayPrint", typeof(bool));
    
            var displaySyndicateParameter = displaySyndicate.HasValue ?
                new ObjectParameter("DisplaySyndicate", displaySyndicate) :
                new ObjectParameter("DisplaySyndicate", typeof(bool));
    
            var isWebSliceParameter = isWebSlice.HasValue ?
                new ObjectParameter("IsWebSlice", isWebSlice) :
                new ObjectParameter("IsWebSlice", typeof(bool));
    
            var webSliceTitleParameter = webSliceTitle != null ?
                new ObjectParameter("WebSliceTitle", webSliceTitle) :
                new ObjectParameter("WebSliceTitle", typeof(string));
    
            var webSliceExpiryDateParameter = webSliceExpiryDate.HasValue ?
                new ObjectParameter("WebSliceExpiryDate", webSliceExpiryDate) :
                new ObjectParameter("WebSliceExpiryDate", typeof(System.DateTime));
    
            var webSliceTTLParameter = webSliceTTL.HasValue ?
                new ObjectParameter("WebSliceTTL", webSliceTTL) :
                new ObjectParameter("WebSliceTTL", typeof(int));
    
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var defaultLanguageGuidParameter = defaultLanguageGuid.HasValue ?
                new ObjectParameter("DefaultLanguageGuid", defaultLanguageGuid) :
                new ObjectParameter("DefaultLanguageGuid", typeof(System.Guid));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTabModule", tabIdParameter, moduleIdParameter, moduleTitleParameter, headerParameter, footerParameter, moduleOrderParameter, paneNameParameter, cacheTimeParameter, cacheMethodParameter, alignmentParameter, colorParameter, borderParameter, iconFileParameter, visibilityParameter, containerSrcParameter, displayTitleParameter, displayPrintParameter, displaySyndicateParameter, isWebSliceParameter, webSliceTitleParameter, webSliceExpiryDateParameter, webSliceTTLParameter, uniqueIdParameter, versionGuidParameter, defaultLanguageGuidParameter, localizedVersionGuidParameter, cultureCodeParameter, createdByUserIDParameter);
        }
    
        public virtual int AddTabModuleSetting(Nullable<int> tabModuleId, string settingName, string settingValue, Nullable<int> createdByUserID)
        {
            var tabModuleIdParameter = tabModuleId.HasValue ?
                new ObjectParameter("TabModuleId", tabModuleId) :
                new ObjectParameter("TabModuleId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTabModuleSetting", tabModuleIdParameter, settingNameParameter, settingValueParameter, createdByUserIDParameter);
        }
    
        public virtual int AddTabPermission(Nullable<int> tabID, Nullable<int> permissionId, Nullable<int> roleId, Nullable<bool> allowAccess, Nullable<int> userId, Nullable<int> createdByUserId)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTabPermission", tabIDParameter, permissionIdParameter, roleIdParameter, allowAccessParameter, userIdParameter, createdByUserIdParameter);
        }
    
        public virtual int AddTabSetting(Nullable<int> tabID, string settingName, string settingValue, Nullable<int> createdByUserID)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTabSetting", tabIDParameter, settingNameParameter, settingValueParameter, createdByUserIDParameter);
        }
    
        public virtual int AddTabToEnd(Nullable<int> contentItemID, Nullable<int> portalID, Nullable<System.Guid> uniqueId, Nullable<System.Guid> versionGuid, Nullable<System.Guid> defaultLanguageGuid, Nullable<System.Guid> localizedVersionGuid, string tabName, Nullable<bool> isVisible, Nullable<bool> disableLink, Nullable<int> parentId, string iconFile, string iconFileLarge, string title, string description, string keyWords, string url, string skinSrc, string containerSrc, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> refreshInterval, string pageHeadText, Nullable<bool> isSecure, Nullable<bool> permanentRedirect, Nullable<double> siteMapPriority, Nullable<int> createdByUserID, string cultureCode, Nullable<bool> isSystem)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var uniqueIdParameter = uniqueId.HasValue ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(System.Guid));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var defaultLanguageGuidParameter = defaultLanguageGuid.HasValue ?
                new ObjectParameter("DefaultLanguageGuid", defaultLanguageGuid) :
                new ObjectParameter("DefaultLanguageGuid", typeof(System.Guid));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("IsVisible", isVisible) :
                new ObjectParameter("IsVisible", typeof(bool));
    
            var disableLinkParameter = disableLink.HasValue ?
                new ObjectParameter("DisableLink", disableLink) :
                new ObjectParameter("DisableLink", typeof(bool));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var iconFileLargeParameter = iconFileLarge != null ?
                new ObjectParameter("IconFileLarge", iconFileLarge) :
                new ObjectParameter("IconFileLarge", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var skinSrcParameter = skinSrc != null ?
                new ObjectParameter("SkinSrc", skinSrc) :
                new ObjectParameter("SkinSrc", typeof(string));
    
            var containerSrcParameter = containerSrc != null ?
                new ObjectParameter("ContainerSrc", containerSrc) :
                new ObjectParameter("ContainerSrc", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var refreshIntervalParameter = refreshInterval.HasValue ?
                new ObjectParameter("RefreshInterval", refreshInterval) :
                new ObjectParameter("RefreshInterval", typeof(int));
    
            var pageHeadTextParameter = pageHeadText != null ?
                new ObjectParameter("PageHeadText", pageHeadText) :
                new ObjectParameter("PageHeadText", typeof(string));
    
            var isSecureParameter = isSecure.HasValue ?
                new ObjectParameter("IsSecure", isSecure) :
                new ObjectParameter("IsSecure", typeof(bool));
    
            var permanentRedirectParameter = permanentRedirect.HasValue ?
                new ObjectParameter("PermanentRedirect", permanentRedirect) :
                new ObjectParameter("PermanentRedirect", typeof(bool));
    
            var siteMapPriorityParameter = siteMapPriority.HasValue ?
                new ObjectParameter("SiteMapPriority", siteMapPriority) :
                new ObjectParameter("SiteMapPriority", typeof(double));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var isSystemParameter = isSystem.HasValue ?
                new ObjectParameter("IsSystem", isSystem) :
                new ObjectParameter("IsSystem", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTabToEnd", contentItemIDParameter, portalIDParameter, uniqueIdParameter, versionGuidParameter, defaultLanguageGuidParameter, localizedVersionGuidParameter, tabNameParameter, isVisibleParameter, disableLinkParameter, parentIdParameter, iconFileParameter, iconFileLargeParameter, titleParameter, descriptionParameter, keyWordsParameter, urlParameter, skinSrcParameter, containerSrcParameter, startDateParameter, endDateParameter, refreshIntervalParameter, pageHeadTextParameter, isSecureParameter, permanentRedirectParameter, siteMapPriorityParameter, createdByUserIDParameter, cultureCodeParameter, isSystemParameter);
        }
    
        public virtual int AddTermToContent(Nullable<int> termID, Nullable<int> contentItemID)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTermToContent", termIDParameter, contentItemIDParameter);
        }
    
        public virtual int AddUrl(Nullable<int> portalID, string url)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUrl", portalIDParameter, urlParameter);
        }
    
        public virtual int AddUrlLog(Nullable<int> urlTrackingID, Nullable<int> userID)
        {
            var urlTrackingIDParameter = urlTrackingID.HasValue ?
                new ObjectParameter("UrlTrackingID", urlTrackingID) :
                new ObjectParameter("UrlTrackingID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUrlLog", urlTrackingIDParameter, userIDParameter);
        }
    
        public virtual int AddUrlTracking(Nullable<int> portalID, string url, string urlType, Nullable<bool> logActivity, Nullable<bool> trackClicks, Nullable<int> moduleId, Nullable<bool> newWindow)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var urlTypeParameter = urlType != null ?
                new ObjectParameter("UrlType", urlType) :
                new ObjectParameter("UrlType", typeof(string));
    
            var logActivityParameter = logActivity.HasValue ?
                new ObjectParameter("LogActivity", logActivity) :
                new ObjectParameter("LogActivity", typeof(bool));
    
            var trackClicksParameter = trackClicks.HasValue ?
                new ObjectParameter("TrackClicks", trackClicks) :
                new ObjectParameter("TrackClicks", typeof(bool));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var newWindowParameter = newWindow.HasValue ?
                new ObjectParameter("NewWindow", newWindow) :
                new ObjectParameter("NewWindow", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUrlTracking", portalIDParameter, urlParameter, urlTypeParameter, logActivityParameter, trackClicksParameter, moduleIdParameter, newWindowParameter);
        }
    
        public virtual int AddUser(Nullable<int> portalID, string username, string firstName, string lastName, Nullable<int> affiliateId, Nullable<bool> isSuperUser, string email, string displayName, Nullable<bool> updatePassword, Nullable<bool> authorised, Nullable<int> createdByUserID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            var isSuperUserParameter = isSuperUser.HasValue ?
                new ObjectParameter("IsSuperUser", isSuperUser) :
                new ObjectParameter("IsSuperUser", typeof(bool));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var updatePasswordParameter = updatePassword.HasValue ?
                new ObjectParameter("UpdatePassword", updatePassword) :
                new ObjectParameter("UpdatePassword", typeof(bool));
    
            var authorisedParameter = authorised.HasValue ?
                new ObjectParameter("Authorised", authorised) :
                new ObjectParameter("Authorised", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", portalIDParameter, usernameParameter, firstNameParameter, lastNameParameter, affiliateIdParameter, isSuperUserParameter, emailParameter, displayNameParameter, updatePasswordParameter, authorisedParameter, createdByUserIDParameter);
        }
    
        public virtual int AddUserAuthentication(Nullable<int> userID, string authenticationType, string authenticationToken, Nullable<int> createdByUserID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var authenticationTypeParameter = authenticationType != null ?
                new ObjectParameter("AuthenticationType", authenticationType) :
                new ObjectParameter("AuthenticationType", typeof(string));
    
            var authenticationTokenParameter = authenticationToken != null ?
                new ObjectParameter("AuthenticationToken", authenticationToken) :
                new ObjectParameter("AuthenticationToken", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserAuthentication", userIDParameter, authenticationTypeParameter, authenticationTokenParameter, createdByUserIDParameter);
        }
    
        public virtual int AddUserPortal(Nullable<int> portalID, Nullable<int> userID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserPortal", portalIDParameter, userIDParameter);
        }
    
        public virtual int AddUserRole(Nullable<int> portalID, Nullable<int> userID, Nullable<int> roleId, Nullable<int> status, Nullable<bool> isOwner, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expiryDate, Nullable<int> createdByUserID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isOwnerParameter = isOwner.HasValue ?
                new ObjectParameter("IsOwner", isOwner) :
                new ObjectParameter("IsOwner", typeof(bool));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserRole", portalIDParameter, userIDParameter, roleIdParameter, statusParameter, isOwnerParameter, effectiveDateParameter, expiryDateParameter, createdByUserIDParameter);
        }
    
        public virtual int AddVendor(Nullable<int> portalID, string vendorName, string unit, string street, string city, string region, string country, string postalCode, string telephone, string fax, string cell, string email, string website, string firstName, string lastName, string userName, string logoFile, string keyWords, Nullable<bool> authorized)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var cellParameter = cell != null ?
                new ObjectParameter("Cell", cell) :
                new ObjectParameter("Cell", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var logoFileParameter = logoFile != null ?
                new ObjectParameter("LogoFile", logoFile) :
                new ObjectParameter("LogoFile", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var authorizedParameter = authorized.HasValue ?
                new ObjectParameter("Authorized", authorized) :
                new ObjectParameter("Authorized", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVendor", portalIDParameter, vendorNameParameter, unitParameter, streetParameter, cityParameter, regionParameter, countryParameter, postalCodeParameter, telephoneParameter, faxParameter, cellParameter, emailParameter, websiteParameter, firstNameParameter, lastNameParameter, userNameParameter, logoFileParameter, keyWordsParameter, authorizedParameter);
        }
    
        public virtual int AddVendorClassification(Nullable<int> vendorId, Nullable<int> classificationId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var classificationIdParameter = classificationId.HasValue ?
                new ObjectParameter("ClassificationId", classificationId) :
                new ObjectParameter("ClassificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVendorClassification", vendorIdParameter, classificationIdParameter);
        }
    
        public virtual int AddVocabulary(Nullable<int> vocabularyTypeID, string name, string description, Nullable<int> weight, Nullable<int> scopeID, Nullable<int> scopeTypeID, Nullable<int> createdByUserID)
        {
            var vocabularyTypeIDParameter = vocabularyTypeID.HasValue ?
                new ObjectParameter("VocabularyTypeID", vocabularyTypeID) :
                new ObjectParameter("VocabularyTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var scopeIDParameter = scopeID.HasValue ?
                new ObjectParameter("ScopeID", scopeID) :
                new ObjectParameter("ScopeID", typeof(int));
    
            var scopeTypeIDParameter = scopeTypeID.HasValue ?
                new ObjectParameter("ScopeTypeID", scopeTypeID) :
                new ObjectParameter("ScopeTypeID", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVocabulary", vocabularyTypeIDParameter, nameParameter, descriptionParameter, weightParameter, scopeIDParameter, scopeTypeIDParameter, createdByUserIDParameter);
        }
    
        public virtual int aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual int aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual int BuildTabLevelAndPath(Nullable<int> tabId, Nullable<bool> includeChild)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var includeChildParameter = includeChild.HasValue ?
                new ObjectParameter("IncludeChild", includeChild) :
                new ObjectParameter("IncludeChild", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BuildTabLevelAndPath", tabIdParameter, includeChildParameter);
        }
    
        public virtual int CalculatePagingInformation(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter rowsToReturn, ObjectParameter pageLowerBound, ObjectParameter pageUpperBound)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculatePagingInformation", pageIndexParameter, pageSizeParameter, rowsToReturn, pageLowerBound, pageUpperBound);
        }
    
        public virtual int CanDeleteSkin(string skinType, string skinFolderName)
        {
            var skinTypeParameter = skinType != null ?
                new ObjectParameter("SkinType", skinType) :
                new ObjectParameter("SkinType", typeof(string));
    
            var skinFolderNameParameter = skinFolderName != null ?
                new ObjectParameter("SkinFolderName", skinFolderName) :
                new ObjectParameter("SkinFolderName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CanDeleteSkin", skinTypeParameter, skinFolderNameParameter);
        }
    
        public virtual int ChangeUsername(Nullable<int> userId, string newUsername)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var newUsernameParameter = newUsername != null ?
                new ObjectParameter("NewUsername", newUsername) :
                new ObjectParameter("NewUsername", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeUsername", userIdParameter, newUsernameParameter);
        }
    
        public virtual int ClearFileContent(Nullable<int> fileId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearFileContent", fileIdParameter);
        }
    
        [DbFunction("NotaliaOnlineEntities", "ConvertListToTable")]
        public virtual IQueryable<ConvertListToTable_Result> ConvertListToTable(string delimiter, string list)
        {
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ConvertListToTable_Result>("[NotaliaOnlineEntities].[ConvertListToTable](@Delimiter, @List)", delimiterParameter, listParameter);
        }
    
        public virtual int ConvertTabToNeutralLanguage(Nullable<int> portalId, Nullable<int> tabId, string cultureCode)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConvertTabToNeutralLanguage", portalIdParameter, tabIdParameter, cultureCodeParameter);
        }
    
        public virtual int CoreMessaging_AddNotificationTypeAction(Nullable<int> notificationTypeID, string nameResourceKey, string descriptionResourceKey, string confirmResourceKey, string aPICall, Nullable<int> createdByUserID)
        {
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            var nameResourceKeyParameter = nameResourceKey != null ?
                new ObjectParameter("NameResourceKey", nameResourceKey) :
                new ObjectParameter("NameResourceKey", typeof(string));
    
            var descriptionResourceKeyParameter = descriptionResourceKey != null ?
                new ObjectParameter("DescriptionResourceKey", descriptionResourceKey) :
                new ObjectParameter("DescriptionResourceKey", typeof(string));
    
            var confirmResourceKeyParameter = confirmResourceKey != null ?
                new ObjectParameter("ConfirmResourceKey", confirmResourceKey) :
                new ObjectParameter("ConfirmResourceKey", typeof(string));
    
            var aPICallParameter = aPICall != null ?
                new ObjectParameter("APICall", aPICall) :
                new ObjectParameter("APICall", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_AddNotificationTypeAction", notificationTypeIDParameter, nameResourceKeyParameter, descriptionResourceKeyParameter, confirmResourceKeyParameter, aPICallParameter, createdByUserIDParameter);
        }
    
        public virtual int CoreMessaging_AddSubscription(Nullable<int> userId, Nullable<int> portalId, Nullable<int> subscriptionTypeId, string objectKey, string description, Nullable<int> moduleId, Nullable<int> tabId, string objectData)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var subscriptionTypeIdParameter = subscriptionTypeId.HasValue ?
                new ObjectParameter("SubscriptionTypeId", subscriptionTypeId) :
                new ObjectParameter("SubscriptionTypeId", typeof(int));
    
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var objectDataParameter = objectData != null ?
                new ObjectParameter("ObjectData", objectData) :
                new ObjectParameter("ObjectData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_AddSubscription", userIdParameter, portalIdParameter, subscriptionTypeIdParameter, objectKeyParameter, descriptionParameter, moduleIdParameter, tabIdParameter, objectDataParameter);
        }
    
        public virtual int CoreMessaging_AddSubscriptionType(string subscriptionName, string friendlyName, Nullable<int> desktopModuleId)
        {
            var subscriptionNameParameter = subscriptionName != null ?
                new ObjectParameter("SubscriptionName", subscriptionName) :
                new ObjectParameter("SubscriptionName", typeof(string));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_AddSubscriptionType", subscriptionNameParameter, friendlyNameParameter, desktopModuleIdParameter);
        }
    
        public virtual int CoreMessaging_CheckReplyHasRecipients(Nullable<int> conversationId, Nullable<int> userId)
        {
            var conversationIdParameter = conversationId.HasValue ?
                new ObjectParameter("ConversationId", conversationId) :
                new ObjectParameter("ConversationId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CheckReplyHasRecipients", conversationIdParameter, userIdParameter);
        }
    
        public virtual int CoreMessaging_ConvertLegacyMessages(Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_ConvertLegacyMessages", pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int CoreMessaging_CountArchivedConversations(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountArchivedConversations", userIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_CountArchivedMessages(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountArchivedMessages", userIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_CountArchivedMessagesByConversation(Nullable<int> conversationID)
        {
            var conversationIDParameter = conversationID.HasValue ?
                new ObjectParameter("ConversationID", conversationID) :
                new ObjectParameter("ConversationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountArchivedMessagesByConversation", conversationIDParameter);
        }
    
        public virtual int CoreMessaging_CountLegacyMessages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountLegacyMessages");
        }
    
        public virtual int CoreMessaging_CountMessagesByConversation(Nullable<int> conversationID)
        {
            var conversationIDParameter = conversationID.HasValue ?
                new ObjectParameter("ConversationID", conversationID) :
                new ObjectParameter("ConversationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountMessagesByConversation", conversationIDParameter);
        }
    
        public virtual int CoreMessaging_CountNewThreads(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountNewThreads", userIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_CountNotifications(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountNotifications", userIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_CountSentConversations(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountSentConversations", userIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_CountSentMessages(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountSentMessages", userIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_CountTotalConversations(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CountTotalConversations", userIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_CreateMessageRecipientsForRole(Nullable<int> messageID, string roleIDs, Nullable<int> createUpdateUserID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            var roleIDsParameter = roleIDs != null ?
                new ObjectParameter("RoleIDs", roleIDs) :
                new ObjectParameter("RoleIDs", typeof(string));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CreateMessageRecipientsForRole", messageIDParameter, roleIDsParameter, createUpdateUserIDParameter);
        }
    
        public virtual int CoreMessaging_CreateMessageReply(Nullable<int> conversationID, Nullable<int> portalID, string body, Nullable<int> senderUserID, string from, Nullable<int> createUpdateUserID)
        {
            var conversationIDParameter = conversationID.HasValue ?
                new ObjectParameter("ConversationID", conversationID) :
                new ObjectParameter("ConversationID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var senderUserIDParameter = senderUserID.HasValue ?
                new ObjectParameter("SenderUserID", senderUserID) :
                new ObjectParameter("SenderUserID", typeof(int));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CreateMessageReply", conversationIDParameter, portalIDParameter, bodyParameter, senderUserIDParameter, fromParameter, createUpdateUserIDParameter);
        }
    
        public virtual int CoreMessaging_CreateNotificationType(string name, string description, Nullable<int> tTL, Nullable<int> desktopModuleId, Nullable<int> createdUpdatedUserID, Nullable<bool> isTask)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var tTLParameter = tTL.HasValue ?
                new ObjectParameter("TTL", tTL) :
                new ObjectParameter("TTL", typeof(int));
    
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            var createdUpdatedUserIDParameter = createdUpdatedUserID.HasValue ?
                new ObjectParameter("CreatedUpdatedUserID", createdUpdatedUserID) :
                new ObjectParameter("CreatedUpdatedUserID", typeof(int));
    
            var isTaskParameter = isTask.HasValue ?
                new ObjectParameter("IsTask", isTask) :
                new ObjectParameter("IsTask", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_CreateNotificationType", nameParameter, descriptionParameter, tTLParameter, desktopModuleIdParameter, createdUpdatedUserIDParameter, isTaskParameter);
        }
    
        public virtual int CoreMessaging_DeleteLegacyMessage(Nullable<int> messageID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteLegacyMessage", messageIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteMessage(Nullable<int> messageID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteMessage", messageIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteMessageAttachment(Nullable<int> messageAttachmentID)
        {
            var messageAttachmentIDParameter = messageAttachmentID.HasValue ?
                new ObjectParameter("MessageAttachmentID", messageAttachmentID) :
                new ObjectParameter("MessageAttachmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteMessageAttachment", messageAttachmentIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteMessageRecipient(Nullable<int> recipientID)
        {
            var recipientIDParameter = recipientID.HasValue ?
                new ObjectParameter("RecipientID", recipientID) :
                new ObjectParameter("RecipientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteMessageRecipient", recipientIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteMessageRecipientByMessageAndUser(Nullable<int> messageID, Nullable<int> userID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteMessageRecipientByMessageAndUser", messageIDParameter, userIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteNotification(Nullable<int> notificationID)
        {
            var notificationIDParameter = notificationID.HasValue ?
                new ObjectParameter("NotificationID", notificationID) :
                new ObjectParameter("NotificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteNotification", notificationIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteNotificationType(Nullable<int> notificationTypeID)
        {
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteNotificationType", notificationTypeIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteNotificationTypeAction(Nullable<int> notificationTypeActionID)
        {
            var notificationTypeActionIDParameter = notificationTypeActionID.HasValue ?
                new ObjectParameter("NotificationTypeActionID", notificationTypeActionID) :
                new ObjectParameter("NotificationTypeActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteNotificationTypeAction", notificationTypeActionIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteSubscription(Nullable<int> subscriptionId)
        {
            var subscriptionIdParameter = subscriptionId.HasValue ?
                new ObjectParameter("SubscriptionId", subscriptionId) :
                new ObjectParameter("SubscriptionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteSubscription", subscriptionIdParameter);
        }
    
        public virtual int CoreMessaging_DeleteSubscriptionsByObjectKey(Nullable<int> portalId, string objectKey)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteSubscriptionsByObjectKey", portalIdParameter, objectKeyParameter);
        }
    
        public virtual int CoreMessaging_DeleteSubscriptionType(Nullable<int> subscriptionTypeId)
        {
            var subscriptionTypeIdParameter = subscriptionTypeId.HasValue ?
                new ObjectParameter("SubscriptionTypeId", subscriptionTypeId) :
                new ObjectParameter("SubscriptionTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteSubscriptionType", subscriptionTypeIdParameter);
        }
    
        public virtual int CoreMessaging_DeleteUserFromConversation(Nullable<int> conversationID, Nullable<int> userID)
        {
            var conversationIDParameter = conversationID.HasValue ?
                new ObjectParameter("ConversationID", conversationID) :
                new ObjectParameter("ConversationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteUserFromConversation", conversationIDParameter, userIDParameter);
        }
    
        public virtual int CoreMessaging_DeleteUserNotifications(Nullable<int> userId, Nullable<int> portalId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_DeleteUserNotifications", userIdParameter, portalIdParameter);
        }
    
        public virtual int CoreMessaging_GetArchiveBox(Nullable<int> userID, Nullable<int> portalID, Nullable<int> afterMessageID, Nullable<int> numberOfRecords, string sortField, Nullable<bool> sortAscending)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var afterMessageIDParameter = afterMessageID.HasValue ?
                new ObjectParameter("AfterMessageID", afterMessageID) :
                new ObjectParameter("AfterMessageID", typeof(int));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("NumberOfRecords", numberOfRecords) :
                new ObjectParameter("NumberOfRecords", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortAscendingParameter = sortAscending.HasValue ?
                new ObjectParameter("SortAscending", sortAscending) :
                new ObjectParameter("SortAscending", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetArchiveBox", userIDParameter, portalIDParameter, afterMessageIDParameter, numberOfRecordsParameter, sortFieldParameter, sortAscendingParameter);
        }
    
        public virtual int CoreMessaging_GetLastSentMessage(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetLastSentMessage", userIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessage(Nullable<int> messageID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessage", messageIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessageAttachment(Nullable<int> messageAttachmentID)
        {
            var messageAttachmentIDParameter = messageAttachmentID.HasValue ?
                new ObjectParameter("MessageAttachmentID", messageAttachmentID) :
                new ObjectParameter("MessageAttachmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessageAttachment", messageAttachmentIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessageAttachmentsByMessage(Nullable<int> messageID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessageAttachmentsByMessage", messageIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessageConversations(Nullable<int> userID, Nullable<int> portalID, Nullable<int> afterMessageID, Nullable<int> numberOfRecords, string sortField, Nullable<bool> sortAscending, Nullable<bool> read, Nullable<bool> archived, Nullable<bool> sentOnly)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var afterMessageIDParameter = afterMessageID.HasValue ?
                new ObjectParameter("AfterMessageID", afterMessageID) :
                new ObjectParameter("AfterMessageID", typeof(int));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("NumberOfRecords", numberOfRecords) :
                new ObjectParameter("NumberOfRecords", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortAscendingParameter = sortAscending.HasValue ?
                new ObjectParameter("SortAscending", sortAscending) :
                new ObjectParameter("SortAscending", typeof(bool));
    
            var readParameter = read.HasValue ?
                new ObjectParameter("Read", read) :
                new ObjectParameter("Read", typeof(bool));
    
            var archivedParameter = archived.HasValue ?
                new ObjectParameter("Archived", archived) :
                new ObjectParameter("Archived", typeof(bool));
    
            var sentOnlyParameter = sentOnly.HasValue ?
                new ObjectParameter("SentOnly", sentOnly) :
                new ObjectParameter("SentOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessageConversations", userIDParameter, portalIDParameter, afterMessageIDParameter, numberOfRecordsParameter, sortFieldParameter, sortAscendingParameter, readParameter, archivedParameter, sentOnlyParameter);
        }
    
        public virtual int CoreMessaging_GetMessageRecipient(Nullable<int> recipientID)
        {
            var recipientIDParameter = recipientID.HasValue ?
                new ObjectParameter("RecipientID", recipientID) :
                new ObjectParameter("RecipientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessageRecipient", recipientIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessageRecipientsByMessage(Nullable<int> messageID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessageRecipientsByMessage", messageIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessageRecipientsByMessageAndUser(Nullable<int> messageID, Nullable<int> userID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessageRecipientsByMessageAndUser", messageIDParameter, userIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessageRecipientsByUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessageRecipientsByUser", userIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessagesBySender(Nullable<int> senderUserID, Nullable<int> portalID)
        {
            var senderUserIDParameter = senderUserID.HasValue ?
                new ObjectParameter("SenderUserID", senderUserID) :
                new ObjectParameter("SenderUserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessagesBySender", senderUserIDParameter, portalIDParameter);
        }
    
        public virtual int CoreMessaging_GetMessageThread(Nullable<int> conversationID, Nullable<int> userID, Nullable<int> afterMessageID, Nullable<int> numberOfRecords, string sortField, Nullable<bool> sortAscending)
        {
            var conversationIDParameter = conversationID.HasValue ?
                new ObjectParameter("ConversationID", conversationID) :
                new ObjectParameter("ConversationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var afterMessageIDParameter = afterMessageID.HasValue ?
                new ObjectParameter("AfterMessageID", afterMessageID) :
                new ObjectParameter("AfterMessageID", typeof(int));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("NumberOfRecords", numberOfRecords) :
                new ObjectParameter("NumberOfRecords", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortAscendingParameter = sortAscending.HasValue ?
                new ObjectParameter("SortAscending", sortAscending) :
                new ObjectParameter("SortAscending", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetMessageThread", conversationIDParameter, userIDParameter, afterMessageIDParameter, numberOfRecordsParameter, sortFieldParameter, sortAscendingParameter);
        }
    
        public virtual int CoreMessaging_GetNextMessagesForDigestDispatch(Nullable<int> frequency, Nullable<System.Guid> schedulerInstance, Nullable<int> batchSize)
        {
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var schedulerInstanceParameter = schedulerInstance.HasValue ?
                new ObjectParameter("SchedulerInstance", schedulerInstance) :
                new ObjectParameter("SchedulerInstance", typeof(System.Guid));
    
            var batchSizeParameter = batchSize.HasValue ?
                new ObjectParameter("BatchSize", batchSize) :
                new ObjectParameter("BatchSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNextMessagesForDigestDispatch", frequencyParameter, schedulerInstanceParameter, batchSizeParameter);
        }
    
        public virtual int CoreMessaging_GetNextMessagesForInstantDispatch(Nullable<System.Guid> schedulerInstance, Nullable<int> batchSize)
        {
            var schedulerInstanceParameter = schedulerInstance.HasValue ?
                new ObjectParameter("SchedulerInstance", schedulerInstance) :
                new ObjectParameter("SchedulerInstance", typeof(System.Guid));
    
            var batchSizeParameter = batchSize.HasValue ?
                new ObjectParameter("BatchSize", batchSize) :
                new ObjectParameter("BatchSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNextMessagesForInstantDispatch", schedulerInstanceParameter, batchSizeParameter);
        }
    
        public virtual int CoreMessaging_GetNotification(Nullable<int> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNotification", notificationIdParameter);
        }
    
        public virtual int CoreMessaging_GetNotificationByContext(Nullable<int> notificationTypeId, string context)
        {
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("notificationTypeId", notificationTypeId) :
                new ObjectParameter("notificationTypeId", typeof(int));
    
            var contextParameter = context != null ?
                new ObjectParameter("Context", context) :
                new ObjectParameter("Context", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNotificationByContext", notificationTypeIdParameter, contextParameter);
        }
    
        public virtual int CoreMessaging_GetNotifications(Nullable<int> userID, Nullable<int> portalID, Nullable<int> afterNotificationID, Nullable<int> numberOfRecords)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var afterNotificationIDParameter = afterNotificationID.HasValue ?
                new ObjectParameter("AfterNotificationID", afterNotificationID) :
                new ObjectParameter("AfterNotificationID", typeof(int));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("NumberOfRecords", numberOfRecords) :
                new ObjectParameter("NumberOfRecords", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNotifications", userIDParameter, portalIDParameter, afterNotificationIDParameter, numberOfRecordsParameter);
        }
    
        public virtual int CoreMessaging_GetNotificationType(Nullable<int> notificationTypeID)
        {
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNotificationType", notificationTypeIDParameter);
        }
    
        public virtual int CoreMessaging_GetNotificationTypeAction(Nullable<int> notificationTypeActionID)
        {
            var notificationTypeActionIDParameter = notificationTypeActionID.HasValue ?
                new ObjectParameter("NotificationTypeActionID", notificationTypeActionID) :
                new ObjectParameter("NotificationTypeActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNotificationTypeAction", notificationTypeActionIDParameter);
        }
    
        public virtual int CoreMessaging_GetNotificationTypeActionByName(Nullable<int> notificationTypeID, string nameResourceKey)
        {
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            var nameResourceKeyParameter = nameResourceKey != null ?
                new ObjectParameter("NameResourceKey", nameResourceKey) :
                new ObjectParameter("NameResourceKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNotificationTypeActionByName", notificationTypeIDParameter, nameResourceKeyParameter);
        }
    
        public virtual int CoreMessaging_GetNotificationTypeActions(Nullable<int> notificationTypeID)
        {
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNotificationTypeActions", notificationTypeIDParameter);
        }
    
        public virtual int CoreMessaging_GetNotificationTypeByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetNotificationTypeByName", nameParameter);
        }
    
        public virtual int CoreMessaging_GetSentBox(Nullable<int> userID, Nullable<int> portalID, Nullable<int> afterMessageId, Nullable<int> numberOfRecords, string sortField, Nullable<bool> sortAscending)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var afterMessageIdParameter = afterMessageId.HasValue ?
                new ObjectParameter("AfterMessageId", afterMessageId) :
                new ObjectParameter("AfterMessageId", typeof(int));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("NumberOfRecords", numberOfRecords) :
                new ObjectParameter("NumberOfRecords", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortAscendingParameter = sortAscending.HasValue ?
                new ObjectParameter("SortAscending", sortAscending) :
                new ObjectParameter("SortAscending", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetSentBox", userIDParameter, portalIDParameter, afterMessageIdParameter, numberOfRecordsParameter, sortFieldParameter, sortAscendingParameter);
        }
    
        public virtual int CoreMessaging_GetSubscriptionsByContent(Nullable<int> portalId, Nullable<int> subscriptionTypeID, string objectKey)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetSubscriptionsByContent", portalIdParameter, subscriptionTypeIDParameter, objectKeyParameter);
        }
    
        public virtual int CoreMessaging_GetSubscriptionsByUser(Nullable<int> portalId, Nullable<int> userId, Nullable<int> subscriptionTypeID)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetSubscriptionsByUser", portalIdParameter, userIdParameter, subscriptionTypeIDParameter);
        }
    
        public virtual int CoreMessaging_GetSubscriptionTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetSubscriptionTypes");
        }
    
        public virtual int CoreMessaging_GetToasts(Nullable<int> userId, Nullable<int> portalId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetToasts", userIdParameter, portalIdParameter);
        }
    
        public virtual int CoreMessaging_GetUserPreference(Nullable<int> portalId, Nullable<int> userId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_GetUserPreference", portalIdParameter, userIdParameter);
        }
    
        public virtual int CoreMessaging_IsSubscribed(Nullable<int> portalId, Nullable<int> userId, Nullable<int> subscriptionTypeId, string objectKey, Nullable<int> moduleId, Nullable<int> tabId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var subscriptionTypeIdParameter = subscriptionTypeId.HasValue ?
                new ObjectParameter("SubscriptionTypeId", subscriptionTypeId) :
                new ObjectParameter("SubscriptionTypeId", typeof(int));
    
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_IsSubscribed", portalIdParameter, userIdParameter, subscriptionTypeIdParameter, objectKeyParameter, moduleIdParameter, tabIdParameter);
        }
    
        public virtual int CoreMessaging_IsToastPending(Nullable<int> notificationId)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_IsToastPending", notificationIdParameter);
        }
    
        public virtual int CoreMessaging_MarkMessageAsDispatched(Nullable<int> messageId, Nullable<int> recipientId)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            var recipientIdParameter = recipientId.HasValue ?
                new ObjectParameter("RecipientId", recipientId) :
                new ObjectParameter("RecipientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_MarkMessageAsDispatched", messageIdParameter, recipientIdParameter);
        }
    
        public virtual int CoreMessaging_MarkMessageAsSent(Nullable<int> messageId, Nullable<int> recipientId)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            var recipientIdParameter = recipientId.HasValue ?
                new ObjectParameter("RecipientId", recipientId) :
                new ObjectParameter("RecipientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_MarkMessageAsSent", messageIdParameter, recipientIdParameter);
        }
    
        public virtual int CoreMessaging_MarkReadyForToast(Nullable<int> messageId, Nullable<int> userId)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_MarkReadyForToast", messageIdParameter, userIdParameter);
        }
    
        public virtual int CoreMessaging_MarkToastSent(Nullable<int> messageId, Nullable<int> userId)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_MarkToastSent", messageIdParameter, userIdParameter);
        }
    
        public virtual int CoreMessaging_SaveMessage(Nullable<int> messageID, Nullable<int> portalID, string to, string from, string subject, string body, Nullable<int> conversationID, Nullable<bool> replyAllAllowed, Nullable<int> senderUserID, Nullable<int> createUpdateUserID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var conversationIDParameter = conversationID.HasValue ?
                new ObjectParameter("ConversationID", conversationID) :
                new ObjectParameter("ConversationID", typeof(int));
    
            var replyAllAllowedParameter = replyAllAllowed.HasValue ?
                new ObjectParameter("ReplyAllAllowed", replyAllAllowed) :
                new ObjectParameter("ReplyAllAllowed", typeof(bool));
    
            var senderUserIDParameter = senderUserID.HasValue ?
                new ObjectParameter("SenderUserID", senderUserID) :
                new ObjectParameter("SenderUserID", typeof(int));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_SaveMessage", messageIDParameter, portalIDParameter, toParameter, fromParameter, subjectParameter, bodyParameter, conversationIDParameter, replyAllAllowedParameter, senderUserIDParameter, createUpdateUserIDParameter);
        }
    
        public virtual int CoreMessaging_SaveMessageAttachment(Nullable<int> messageAttachmentID, Nullable<int> messageID, Nullable<int> fileID, Nullable<int> createUpdateUserID)
        {
            var messageAttachmentIDParameter = messageAttachmentID.HasValue ?
                new ObjectParameter("MessageAttachmentID", messageAttachmentID) :
                new ObjectParameter("MessageAttachmentID", typeof(int));
    
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_SaveMessageAttachment", messageAttachmentIDParameter, messageIDParameter, fileIDParameter, createUpdateUserIDParameter);
        }
    
        public virtual int CoreMessaging_SaveMessageRecipient(Nullable<int> recipientID, Nullable<int> messageID, Nullable<int> userID, Nullable<bool> read, Nullable<bool> archived, Nullable<int> createUpdateUserID)
        {
            var recipientIDParameter = recipientID.HasValue ?
                new ObjectParameter("RecipientID", recipientID) :
                new ObjectParameter("RecipientID", typeof(int));
    
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var readParameter = read.HasValue ?
                new ObjectParameter("Read", read) :
                new ObjectParameter("Read", typeof(bool));
    
            var archivedParameter = archived.HasValue ?
                new ObjectParameter("Archived", archived) :
                new ObjectParameter("Archived", typeof(bool));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_SaveMessageRecipient", recipientIDParameter, messageIDParameter, userIDParameter, readParameter, archivedParameter, createUpdateUserIDParameter);
        }
    
        public virtual int CoreMessaging_SendNotification(Nullable<int> notificationTypeID, Nullable<int> portalID, string to, string from, string subject, string body, Nullable<int> senderUserID, Nullable<int> createUpdateUserID, Nullable<System.DateTime> expirationDate, Nullable<bool> includeDismissAction, string context)
        {
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var senderUserIDParameter = senderUserID.HasValue ?
                new ObjectParameter("SenderUserID", senderUserID) :
                new ObjectParameter("SenderUserID", typeof(int));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var includeDismissActionParameter = includeDismissAction.HasValue ?
                new ObjectParameter("IncludeDismissAction", includeDismissAction) :
                new ObjectParameter("IncludeDismissAction", typeof(bool));
    
            var contextParameter = context != null ?
                new ObjectParameter("Context", context) :
                new ObjectParameter("Context", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_SendNotification", notificationTypeIDParameter, portalIDParameter, toParameter, fromParameter, subjectParameter, bodyParameter, senderUserIDParameter, createUpdateUserIDParameter, expirationDateParameter, includeDismissActionParameter, contextParameter);
        }
    
        public virtual int CoreMessaging_SetUserPreference(Nullable<int> portalId, Nullable<int> userId, Nullable<int> messagesEmailFrequency, Nullable<int> notificationsEmailFrequency)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var messagesEmailFrequencyParameter = messagesEmailFrequency.HasValue ?
                new ObjectParameter("MessagesEmailFrequency", messagesEmailFrequency) :
                new ObjectParameter("MessagesEmailFrequency", typeof(int));
    
            var notificationsEmailFrequencyParameter = notificationsEmailFrequency.HasValue ?
                new ObjectParameter("NotificationsEmailFrequency", notificationsEmailFrequency) :
                new ObjectParameter("NotificationsEmailFrequency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_SetUserPreference", portalIdParameter, userIdParameter, messagesEmailFrequencyParameter, notificationsEmailFrequencyParameter);
        }
    
        public virtual int CoreMessaging_UpdateMessageArchivedStatus(Nullable<int> conversationID, Nullable<int> userID, Nullable<bool> archived)
        {
            var conversationIDParameter = conversationID.HasValue ?
                new ObjectParameter("ConversationID", conversationID) :
                new ObjectParameter("ConversationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var archivedParameter = archived.HasValue ?
                new ObjectParameter("Archived", archived) :
                new ObjectParameter("Archived", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_UpdateMessageArchivedStatus", conversationIDParameter, userIDParameter, archivedParameter);
        }
    
        public virtual int CoreMessaging_UpdateMessageReadStatus(Nullable<int> conversationID, Nullable<int> userID, Nullable<bool> read)
        {
            var conversationIDParameter = conversationID.HasValue ?
                new ObjectParameter("ConversationID", conversationID) :
                new ObjectParameter("ConversationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var readParameter = read.HasValue ?
                new ObjectParameter("Read", read) :
                new ObjectParameter("Read", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_UpdateMessageReadStatus", conversationIDParameter, userIDParameter, readParameter);
        }
    
        public virtual int CoreMessaging_UpdateSubscriptionDescription(string objectKey, Nullable<int> portalId, string description)
        {
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CoreMessaging_UpdateSubscriptionDescription", objectKeyParameter, portalIdParameter, descriptionParameter);
        }
    
        public virtual int CountLegacyFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountLegacyFiles");
        }
    
        public virtual int Dashboard_AddControl(Nullable<int> packageId, string dashboardControlKey, Nullable<bool> isEnabled, string dashboardControlSrc, string dashboardControlLocalResources, string controllerClass, Nullable<int> viewOrder)
        {
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var dashboardControlKeyParameter = dashboardControlKey != null ?
                new ObjectParameter("DashboardControlKey", dashboardControlKey) :
                new ObjectParameter("DashboardControlKey", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var dashboardControlSrcParameter = dashboardControlSrc != null ?
                new ObjectParameter("DashboardControlSrc", dashboardControlSrc) :
                new ObjectParameter("DashboardControlSrc", typeof(string));
    
            var dashboardControlLocalResourcesParameter = dashboardControlLocalResources != null ?
                new ObjectParameter("DashboardControlLocalResources", dashboardControlLocalResources) :
                new ObjectParameter("DashboardControlLocalResources", typeof(string));
    
            var controllerClassParameter = controllerClass != null ?
                new ObjectParameter("ControllerClass", controllerClass) :
                new ObjectParameter("ControllerClass", typeof(string));
    
            var viewOrderParameter = viewOrder.HasValue ?
                new ObjectParameter("ViewOrder", viewOrder) :
                new ObjectParameter("ViewOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dashboard_AddControl", packageIdParameter, dashboardControlKeyParameter, isEnabledParameter, dashboardControlSrcParameter, dashboardControlLocalResourcesParameter, controllerClassParameter, viewOrderParameter);
        }
    
        public virtual int Dashboard_DeleteControl(Nullable<int> dashboardControlID)
        {
            var dashboardControlIDParameter = dashboardControlID.HasValue ?
                new ObjectParameter("DashboardControlID", dashboardControlID) :
                new ObjectParameter("DashboardControlID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dashboard_DeleteControl", dashboardControlIDParameter);
        }
    
        public virtual int Dashboard_GetControls(Nullable<bool> isEnabled)
        {
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dashboard_GetControls", isEnabledParameter);
        }
    
        public virtual int Dashboard_GetDashboardControlByKey(string dashboardControlKey)
        {
            var dashboardControlKeyParameter = dashboardControlKey != null ?
                new ObjectParameter("DashboardControlKey", dashboardControlKey) :
                new ObjectParameter("DashboardControlKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dashboard_GetDashboardControlByKey", dashboardControlKeyParameter);
        }
    
        public virtual int Dashboard_GetDashboardControlByPackageId(Nullable<int> packageID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dashboard_GetDashboardControlByPackageId", packageIDParameter);
        }
    
        public virtual ObjectResult<Dashboard_GetDbBackups_Result> Dashboard_GetDbBackups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dashboard_GetDbBackups_Result>("Dashboard_GetDbBackups");
        }
    
        public virtual ObjectResult<Dashboard_GetDbFileInfo_Result> Dashboard_GetDbFileInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dashboard_GetDbFileInfo_Result>("Dashboard_GetDbFileInfo");
        }
    
        public virtual ObjectResult<Dashboard_GetDbInfo_Result> Dashboard_GetDbInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dashboard_GetDbInfo_Result>("Dashboard_GetDbInfo");
        }
    
        public virtual int Dashboard_GetInstalledModules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dashboard_GetInstalledModules");
        }
    
        public virtual int Dashboard_UpdateControl(Nullable<int> dashboardControlID, string dashboardControlKey, Nullable<bool> isEnabled, string dashboardControlSrc, string dashboardControlLocalResources, string controllerClass, Nullable<int> viewOrder)
        {
            var dashboardControlIDParameter = dashboardControlID.HasValue ?
                new ObjectParameter("DashboardControlID", dashboardControlID) :
                new ObjectParameter("DashboardControlID", typeof(int));
    
            var dashboardControlKeyParameter = dashboardControlKey != null ?
                new ObjectParameter("DashboardControlKey", dashboardControlKey) :
                new ObjectParameter("DashboardControlKey", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var dashboardControlSrcParameter = dashboardControlSrc != null ?
                new ObjectParameter("DashboardControlSrc", dashboardControlSrc) :
                new ObjectParameter("DashboardControlSrc", typeof(string));
    
            var dashboardControlLocalResourcesParameter = dashboardControlLocalResources != null ?
                new ObjectParameter("DashboardControlLocalResources", dashboardControlLocalResources) :
                new ObjectParameter("DashboardControlLocalResources", typeof(string));
    
            var controllerClassParameter = controllerClass != null ?
                new ObjectParameter("ControllerClass", controllerClass) :
                new ObjectParameter("ControllerClass", typeof(string));
    
            var viewOrderParameter = viewOrder.HasValue ?
                new ObjectParameter("ViewOrder", viewOrder) :
                new ObjectParameter("ViewOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dashboard_UpdateControl", dashboardControlIDParameter, dashboardControlKeyParameter, isEnabledParameter, dashboardControlSrcParameter, dashboardControlLocalResourcesParameter, controllerClassParameter, viewOrderParameter);
        }
    
        public virtual int DeleteAffiliate(Nullable<int> affiliateId)
        {
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAffiliate", affiliateIdParameter);
        }
    
        public virtual int DeleteAuthentication(Nullable<int> authenticationID)
        {
            var authenticationIDParameter = authenticationID.HasValue ?
                new ObjectParameter("AuthenticationID", authenticationID) :
                new ObjectParameter("AuthenticationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAuthentication", authenticationIDParameter);
        }
    
        public virtual int DeleteBanner(Nullable<int> bannerId)
        {
            var bannerIdParameter = bannerId.HasValue ?
                new ObjectParameter("BannerId", bannerId) :
                new ObjectParameter("BannerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBanner", bannerIdParameter);
        }
    
        public virtual int DeleteContentItem(Nullable<int> contentItemId)
        {
            var contentItemIdParameter = contentItemId.HasValue ?
                new ObjectParameter("ContentItemId", contentItemId) :
                new ObjectParameter("ContentItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContentItem", contentItemIdParameter);
        }
    
        public virtual int DeleteContentType(Nullable<int> contentTypeId)
        {
            var contentTypeIdParameter = contentTypeId.HasValue ?
                new ObjectParameter("ContentTypeId", contentTypeId) :
                new ObjectParameter("ContentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContentType", contentTypeIdParameter);
        }
    
        public virtual int DeleteContentWorkflowLogs(Nullable<int> contentItemID, Nullable<int> workflowID)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContentWorkflowLogs", contentItemIDParameter, workflowIDParameter);
        }
    
        public virtual int DeleteContentWorkflowState(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContentWorkflowState", stateIDParameter);
        }
    
        public virtual int DeleteContentWorkflowStatePermission(Nullable<int> workflowStatePermissionID)
        {
            var workflowStatePermissionIDParameter = workflowStatePermissionID.HasValue ?
                new ObjectParameter("WorkflowStatePermissionID", workflowStatePermissionID) :
                new ObjectParameter("WorkflowStatePermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContentWorkflowStatePermission", workflowStatePermissionIDParameter);
        }
    
        public virtual int DeleteDesktopModule(Nullable<int> desktopModuleId)
        {
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDesktopModule", desktopModuleIdParameter);
        }
    
        public virtual int DeleteDesktopModulePermission(Nullable<int> desktopModulePermissionID)
        {
            var desktopModulePermissionIDParameter = desktopModulePermissionID.HasValue ?
                new ObjectParameter("DesktopModulePermissionID", desktopModulePermissionID) :
                new ObjectParameter("DesktopModulePermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDesktopModulePermission", desktopModulePermissionIDParameter);
        }
    
        public virtual int DeleteDesktopModulePermissionsByPortalDesktopModuleID(Nullable<int> portalDesktopModuleID)
        {
            var portalDesktopModuleIDParameter = portalDesktopModuleID.HasValue ?
                new ObjectParameter("PortalDesktopModuleID", portalDesktopModuleID) :
                new ObjectParameter("PortalDesktopModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDesktopModulePermissionsByPortalDesktopModuleID", portalDesktopModuleIDParameter);
        }
    
        public virtual int DeleteDesktopModulePermissionsByUserID(Nullable<int> userId, Nullable<int> portalId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDesktopModulePermissionsByUserID", userIdParameter, portalIdParameter);
        }
    
        public virtual int DeleteEventLog(string logGUID)
        {
            var logGUIDParameter = logGUID != null ?
                new ObjectParameter("LogGUID", logGUID) :
                new ObjectParameter("LogGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEventLog", logGUIDParameter);
        }
    
        public virtual int DeleteEventLogConfig(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEventLogConfig", iDParameter);
        }
    
        public virtual int DeleteEventLogType(string logTypeKey)
        {
            var logTypeKeyParameter = logTypeKey != null ?
                new ObjectParameter("LogTypeKey", logTypeKey) :
                new ObjectParameter("LogTypeKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEventLogType", logTypeKeyParameter);
        }
    
        public virtual int DeleteExtensionUrlProvider(Nullable<int> extensionUrlProviderID)
        {
            var extensionUrlProviderIDParameter = extensionUrlProviderID.HasValue ?
                new ObjectParameter("ExtensionUrlProviderID", extensionUrlProviderID) :
                new ObjectParameter("ExtensionUrlProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExtensionUrlProvider", extensionUrlProviderIDParameter);
        }
    
        public virtual int DeleteFile(Nullable<int> portalID, string fileName, Nullable<int> folderID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFile", portalIDParameter, fileNameParameter, folderIDParameter);
        }
    
        public virtual int DeleteFiles(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFiles", portalIDParameter);
        }
    
        public virtual int DeleteFileVersion(Nullable<int> fileId, Nullable<int> version)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFileVersion", fileIdParameter, versionParameter);
        }
    
        public virtual int DeleteFolder(Nullable<int> portalID, string folderPath)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFolder", portalIDParameter, folderPathParameter);
        }
    
        public virtual int DeleteFolderMapping(Nullable<int> folderMappingID)
        {
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFolderMapping", folderMappingIDParameter);
        }
    
        public virtual int DeleteFolderPermission(Nullable<int> folderPermissionID)
        {
            var folderPermissionIDParameter = folderPermissionID.HasValue ?
                new ObjectParameter("FolderPermissionID", folderPermissionID) :
                new ObjectParameter("FolderPermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFolderPermission", folderPermissionIDParameter);
        }
    
        public virtual int DeleteFolderPermissionsByFolderPath(Nullable<int> portalId, string folderPath)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFolderPermissionsByFolderPath", portalIdParameter, folderPathParameter);
        }
    
        public virtual int DeleteFolderPermissionsByUserID(Nullable<int> portalId, Nullable<int> userId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFolderPermissionsByUserID", portalIdParameter, userIdParameter);
        }
    
        public virtual int DeleteHeirarchicalTerm(Nullable<int> termId)
        {
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("TermId", termId) :
                new ObjectParameter("TermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHeirarchicalTerm", termIdParameter);
        }
    
        public virtual int DeleteHtmlText(Nullable<int> moduleID, Nullable<int> itemID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHtmlText", moduleIDParameter, itemIDParameter);
        }
    
        public virtual int DeleteHtmlTextUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHtmlTextUsers");
        }
    
        public virtual int DeleteIPFilter(Nullable<int> iPFilterID)
        {
            var iPFilterIDParameter = iPFilterID.HasValue ?
                new ObjectParameter("IPFilterID", iPFilterID) :
                new ObjectParameter("IPFilterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIPFilter", iPFilterIDParameter);
        }
    
        public virtual int DeleteJavaScriptLibrary(Nullable<int> javaScriptLibraryID)
        {
            var javaScriptLibraryIDParameter = javaScriptLibraryID.HasValue ?
                new ObjectParameter("JavaScriptLibraryID", javaScriptLibraryID) :
                new ObjectParameter("JavaScriptLibraryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteJavaScriptLibrary", javaScriptLibraryIDParameter);
        }
    
        public virtual int DeleteLanguage(Nullable<int> languageID)
        {
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLanguage", languageIDParameter);
        }
    
        public virtual int DeleteLanguagePack(Nullable<int> languagePackID)
        {
            var languagePackIDParameter = languagePackID.HasValue ?
                new ObjectParameter("LanguagePackID", languagePackID) :
                new ObjectParameter("LanguagePackID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLanguagePack", languagePackIDParameter);
        }
    
        public virtual int DeleteList(string listName, string parentKey)
        {
            var listNameParameter = listName != null ?
                new ObjectParameter("ListName", listName) :
                new ObjectParameter("ListName", typeof(string));
    
            var parentKeyParameter = parentKey != null ?
                new ObjectParameter("ParentKey", parentKey) :
                new ObjectParameter("ParentKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteList", listNameParameter, parentKeyParameter);
        }
    
        public virtual int DeleteListEntryByID(Nullable<int> entryId, Nullable<bool> deleteChild)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            var deleteChildParameter = deleteChild.HasValue ?
                new ObjectParameter("DeleteChild", deleteChild) :
                new ObjectParameter("DeleteChild", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteListEntryByID", entryIdParameter, deleteChildParameter);
        }
    
        public virtual int DeleteMetaData(Nullable<int> contentItemId, string name, string value)
        {
            var contentItemIdParameter = contentItemId.HasValue ?
                new ObjectParameter("ContentItemId", contentItemId) :
                new ObjectParameter("ContentItemId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMetaData", contentItemIdParameter, nameParameter, valueParameter);
        }
    
        public virtual int DeleteModule(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModule", moduleIdParameter);
        }
    
        public virtual int DeleteModuleControl(Nullable<int> moduleControlId)
        {
            var moduleControlIdParameter = moduleControlId.HasValue ?
                new ObjectParameter("ModuleControlId", moduleControlId) :
                new ObjectParameter("ModuleControlId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModuleControl", moduleControlIdParameter);
        }
    
        public virtual int DeleteModuleDefinition(Nullable<int> moduleDefId)
        {
            var moduleDefIdParameter = moduleDefId.HasValue ?
                new ObjectParameter("ModuleDefId", moduleDefId) :
                new ObjectParameter("ModuleDefId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModuleDefinition", moduleDefIdParameter);
        }
    
        public virtual int DeleteModulePermission(Nullable<int> modulePermissionID)
        {
            var modulePermissionIDParameter = modulePermissionID.HasValue ?
                new ObjectParameter("ModulePermissionID", modulePermissionID) :
                new ObjectParameter("ModulePermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModulePermission", modulePermissionIDParameter);
        }
    
        public virtual int DeleteModulePermissionsByModuleID(Nullable<int> moduleID, Nullable<int> portalID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModulePermissionsByModuleID", moduleIDParameter, portalIDParameter);
        }
    
        public virtual int DeleteModulePermissionsByUserID(Nullable<int> portalID, Nullable<int> userID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModulePermissionsByUserID", portalIDParameter, userIDParameter);
        }
    
        public virtual int DeleteModuleSetting(Nullable<int> moduleId, string settingName)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModuleSetting", moduleIdParameter, settingNameParameter);
        }
    
        public virtual int DeleteModuleSettings(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModuleSettings", moduleIdParameter);
        }
    
        public virtual int DeletePackage(Nullable<int> packageID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePackage", packageIDParameter);
        }
    
        public virtual int DeletePermission(Nullable<int> permissionID)
        {
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePermission", permissionIDParameter);
        }
    
        public virtual int DeletePortalAlias(Nullable<int> portalAliasID)
        {
            var portalAliasIDParameter = portalAliasID.HasValue ?
                new ObjectParameter("PortalAliasID", portalAliasID) :
                new ObjectParameter("PortalAliasID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePortalAlias", portalAliasIDParameter);
        }
    
        public virtual int DeletePortalDesktopModules(Nullable<int> portalID, Nullable<int> desktopModuleId)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePortalDesktopModules", portalIDParameter, desktopModuleIdParameter);
        }
    
        public virtual int DeletePortalGroup(Nullable<int> portalGroupID)
        {
            var portalGroupIDParameter = portalGroupID.HasValue ?
                new ObjectParameter("PortalGroupID", portalGroupID) :
                new ObjectParameter("PortalGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePortalGroup", portalGroupIDParameter);
        }
    
        public virtual int DeletePortalInfo(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePortalInfo", portalIDParameter);
        }
    
        public virtual int DeletePortalLanguages(Nullable<int> portalId, Nullable<int> languageId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePortalLanguages", portalIdParameter, languageIdParameter);
        }
    
        public virtual int DeletePortalSetting(Nullable<int> portalID, string settingName, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePortalSetting", portalIDParameter, settingNameParameter, cultureCodeParameter);
        }
    
        public virtual int DeletePortalSettings(Nullable<int> portalID, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePortalSettings", portalIDParameter, cultureCodeParameter);
        }
    
        public virtual int DeletePropertyDefinition(Nullable<int> propertyDefinitionId)
        {
            var propertyDefinitionIdParameter = propertyDefinitionId.HasValue ?
                new ObjectParameter("PropertyDefinitionId", propertyDefinitionId) :
                new ObjectParameter("PropertyDefinitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePropertyDefinition", propertyDefinitionIdParameter);
        }
    
        public virtual int DeleteRelationship(Nullable<int> relationshipID)
        {
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRelationship", relationshipIDParameter);
        }
    
        public virtual int DeleteRelationshipType(Nullable<int> relationshipTypeID)
        {
            var relationshipTypeIDParameter = relationshipTypeID.HasValue ?
                new ObjectParameter("RelationshipTypeID", relationshipTypeID) :
                new ObjectParameter("RelationshipTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRelationshipType", relationshipTypeIDParameter);
        }
    
        public virtual int DeleteRole(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRole", roleIdParameter);
        }
    
        public virtual int DeleteRoleGroup(Nullable<int> roleGroupId)
        {
            var roleGroupIdParameter = roleGroupId.HasValue ?
                new ObjectParameter("RoleGroupId", roleGroupId) :
                new ObjectParameter("RoleGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoleGroup", roleGroupIdParameter);
        }
    
        public virtual int DeleteSchedule(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchedule", scheduleIDParameter);
        }
    
        public virtual int DeleteScopeType(Nullable<int> scopeTypeId)
        {
            var scopeTypeIdParameter = scopeTypeId.HasValue ?
                new ObjectParameter("ScopeTypeId", scopeTypeId) :
                new ObjectParameter("ScopeTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteScopeType", scopeTypeIdParameter);
        }
    
        public virtual int DeleteSearchCommonWord(Nullable<int> commonWordID)
        {
            var commonWordIDParameter = commonWordID.HasValue ?
                new ObjectParameter("CommonWordID", commonWordID) :
                new ObjectParameter("CommonWordID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSearchCommonWord", commonWordIDParameter);
        }
    
        public virtual int DeleteSearchStopWords(Nullable<int> stopWordsID)
        {
            var stopWordsIDParameter = stopWordsID.HasValue ?
                new ObjectParameter("StopWordsID", stopWordsID) :
                new ObjectParameter("StopWordsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSearchStopWords", stopWordsIDParameter);
        }
    
        public virtual int DeleteSearchWord(Nullable<int> searchWordsID)
        {
            var searchWordsIDParameter = searchWordsID.HasValue ?
                new ObjectParameter("SearchWordsID", searchWordsID) :
                new ObjectParameter("SearchWordsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSearchWord", searchWordsIDParameter);
        }
    
        public virtual int DeleteServer(Nullable<int> serverID)
        {
            var serverIDParameter = serverID.HasValue ?
                new ObjectParameter("ServerID", serverID) :
                new ObjectParameter("ServerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteServer", serverIDParameter);
        }
    
        public virtual int DeleteSimpleTerm(Nullable<int> termId)
        {
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("TermId", termId) :
                new ObjectParameter("TermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSimpleTerm", termIdParameter);
        }
    
        public virtual int DeleteSiteLog(Nullable<System.DateTime> dateTime, Nullable<int> portalID)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSiteLog", dateTimeParameter, portalIDParameter);
        }
    
        public virtual int DeleteSkin(Nullable<int> skinID)
        {
            var skinIDParameter = skinID.HasValue ?
                new ObjectParameter("SkinID", skinID) :
                new ObjectParameter("SkinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSkin", skinIDParameter);
        }
    
        public virtual int DeleteSkinControl(Nullable<int> skinControlId)
        {
            var skinControlIdParameter = skinControlId.HasValue ?
                new ObjectParameter("SkinControlId", skinControlId) :
                new ObjectParameter("SkinControlId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSkinControl", skinControlIdParameter);
        }
    
        public virtual int DeleteSkinPackage(Nullable<int> skinPackageID)
        {
            var skinPackageIDParameter = skinPackageID.HasValue ?
                new ObjectParameter("SkinPackageID", skinPackageID) :
                new ObjectParameter("SkinPackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSkinPackage", skinPackageIDParameter);
        }
    
        public virtual int DeleteSynonymsGroup(Nullable<int> synonymsGroupID)
        {
            var synonymsGroupIDParameter = synonymsGroupID.HasValue ?
                new ObjectParameter("SynonymsGroupID", synonymsGroupID) :
                new ObjectParameter("SynonymsGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSynonymsGroup", synonymsGroupIDParameter);
        }
    
        public virtual int DeleteSystemMessage(Nullable<int> portalID, string messageName)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var messageNameParameter = messageName != null ?
                new ObjectParameter("MessageName", messageName) :
                new ObjectParameter("MessageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSystemMessage", portalIDParameter, messageNameParameter);
        }
    
        public virtual int DeleteTab(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTab", tabIdParameter);
        }
    
        public virtual int DeleteTabModule(Nullable<int> tabId, Nullable<int> moduleId, Nullable<bool> softDelete)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var softDeleteParameter = softDelete.HasValue ?
                new ObjectParameter("SoftDelete", softDelete) :
                new ObjectParameter("SoftDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabModule", tabIdParameter, moduleIdParameter, softDeleteParameter);
        }
    
        public virtual int DeleteTabModuleSetting(Nullable<int> tabModuleId, string settingName)
        {
            var tabModuleIdParameter = tabModuleId.HasValue ?
                new ObjectParameter("TabModuleId", tabModuleId) :
                new ObjectParameter("TabModuleId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabModuleSetting", tabModuleIdParameter, settingNameParameter);
        }
    
        public virtual int DeleteTabModuleSettings(Nullable<int> tabModuleId)
        {
            var tabModuleIdParameter = tabModuleId.HasValue ?
                new ObjectParameter("TabModuleId", tabModuleId) :
                new ObjectParameter("TabModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabModuleSettings", tabModuleIdParameter);
        }
    
        public virtual int DeleteTabPermission(Nullable<int> tabPermissionID)
        {
            var tabPermissionIDParameter = tabPermissionID.HasValue ?
                new ObjectParameter("TabPermissionID", tabPermissionID) :
                new ObjectParameter("TabPermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabPermission", tabPermissionIDParameter);
        }
    
        public virtual int DeleteTabPermissionsByTabID(Nullable<int> tabID)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabPermissionsByTabID", tabIDParameter);
        }
    
        public virtual int DeleteTabPermissionsByUserID(Nullable<int> portalID, Nullable<int> userID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabPermissionsByUserID", portalIDParameter, userIDParameter);
        }
    
        public virtual int DeleteTabSetting(Nullable<int> tabID, string settingName)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabSetting", tabIDParameter, settingNameParameter);
        }
    
        public virtual int DeleteTabSettings(Nullable<int> tabID)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabSettings", tabIDParameter);
        }
    
        public virtual int DeleteTabUrl(Nullable<int> tabID, Nullable<int> seqNum)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabUrl", tabIDParameter, seqNumParameter);
        }
    
        public virtual int DeleteTabVersion(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabVersion", idParameter);
        }
    
        public virtual int DeleteTabVersionDetail(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTabVersionDetail", idParameter);
        }
    
        public virtual int DeleteTranslatedTabs(Nullable<int> portalID, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTranslatedTabs", portalIDParameter, cultureCodeParameter);
        }
    
        public virtual int DeleteUrl(Nullable<int> portalID, string url)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUrl", portalIDParameter, urlParameter);
        }
    
        public virtual int DeleteUrlTracking(Nullable<int> portalID, string url, Nullable<int> moduleID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUrlTracking", portalIDParameter, urlParameter, moduleIDParameter);
        }
    
        public virtual int DeleteUserPortal(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserPortal", userIDParameter, portalIDParameter);
        }
    
        public virtual int DeleteUserRelationship(Nullable<int> userRelationshipID)
        {
            var userRelationshipIDParameter = userRelationshipID.HasValue ?
                new ObjectParameter("UserRelationshipID", userRelationshipID) :
                new ObjectParameter("UserRelationshipID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserRelationship", userRelationshipIDParameter);
        }
    
        public virtual int DeleteUserRelationshipPreference(Nullable<int> preferenceID)
        {
            var preferenceIDParameter = preferenceID.HasValue ?
                new ObjectParameter("PreferenceID", preferenceID) :
                new ObjectParameter("PreferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserRelationshipPreference", preferenceIDParameter);
        }
    
        public virtual int DeleteUserRole(Nullable<int> userID, Nullable<int> roleId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserRole", userIDParameter, roleIdParameter);
        }
    
        public virtual int DeleteUsersOnline(Nullable<int> timeWindow)
        {
            var timeWindowParameter = timeWindow.HasValue ?
                new ObjectParameter("TimeWindow", timeWindow) :
                new ObjectParameter("TimeWindow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUsersOnline", timeWindowParameter);
        }
    
        public virtual int DeleteVendor(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendor", vendorIdParameter);
        }
    
        public virtual int DeleteVendorClassifications(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendorClassifications", vendorIdParameter);
        }
    
        public virtual int DeleteVocabulary(Nullable<int> vocabularyID)
        {
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVocabulary", vocabularyIDParameter);
        }
    
        public virtual int EngageF3_spSearchPublishContent(string searchValue, Nullable<int> portalId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("portalId", portalId) :
                new ObjectParameter("portalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EngageF3_spSearchPublishContent", searchValueParameter, portalIdParameter);
        }
    
        public virtual int EngageF3_spSearchTextHtmlContent(string searchValue, Nullable<int> portalId, Nullable<int> lowerTabId, Nullable<int> upperTabId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("portalId", portalId) :
                new ObjectParameter("portalId", typeof(int));
    
            var lowerTabIdParameter = lowerTabId.HasValue ?
                new ObjectParameter("lowerTabId", lowerTabId) :
                new ObjectParameter("lowerTabId", typeof(int));
    
            var upperTabIdParameter = upperTabId.HasValue ?
                new ObjectParameter("upperTabId", upperTabId) :
                new ObjectParameter("upperTabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EngageF3_spSearchTextHtmlContent", searchValueParameter, portalIdParameter, lowerTabIdParameter, upperTabIdParameter);
        }
    
        public virtual int EngageF3_spSearchUniqueTextHtmlContent(string searchValue, Nullable<int> portalId, Nullable<int> lowerTabId, Nullable<int> upperTabId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("portalId", portalId) :
                new ObjectParameter("portalId", typeof(int));
    
            var lowerTabIdParameter = lowerTabId.HasValue ?
                new ObjectParameter("lowerTabId", lowerTabId) :
                new ObjectParameter("lowerTabId", typeof(int));
    
            var upperTabIdParameter = upperTabId.HasValue ?
                new ObjectParameter("upperTabId", upperTabId) :
                new ObjectParameter("upperTabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EngageF3_spSearchUniqueTextHtmlContent", searchValueParameter, portalIdParameter, lowerTabIdParameter, upperTabIdParameter);
        }
    
        public virtual int EnsureLocalizationExists(Nullable<int> portalID, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EnsureLocalizationExists", portalIDParameter, cultureCodeParameter);
        }
    
        public virtual int EnsureNeutralLanguage(Nullable<int> portalId, string cultureCode)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EnsureNeutralLanguage", portalIdParameter, cultureCodeParameter);
        }
    
        public virtual int FindBanners(Nullable<int> portalID, Nullable<int> bannerTypeId, string groupName)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var bannerTypeIdParameter = bannerTypeId.HasValue ?
                new ObjectParameter("BannerTypeId", bannerTypeId) :
                new ObjectParameter("BannerTypeId", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FindBanners", portalIDParameter, bannerTypeIdParameter, groupNameParameter);
        }
    
        public virtual int FindDatabaseVersion(Nullable<int> major, Nullable<int> minor, Nullable<int> build)
        {
            var majorParameter = major.HasValue ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(int));
    
            var minorParameter = minor.HasValue ?
                new ObjectParameter("Minor", minor) :
                new ObjectParameter("Minor", typeof(int));
    
            var buildParameter = build.HasValue ?
                new ObjectParameter("Build", build) :
                new ObjectParameter("Build", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FindDatabaseVersion", majorParameter, minorParameter, buildParameter);
        }
    
        public virtual int GetAffiliate(Nullable<int> affiliateId)
        {
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAffiliate", affiliateIdParameter);
        }
    
        public virtual int GetAffiliates(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAffiliates", vendorIdParameter);
        }
    
        public virtual int GetAllFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllFiles");
        }
    
        public virtual int GetAllHtmlText(Nullable<int> moduleID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllHtmlText", moduleIDParameter);
        }
    
        public virtual int GetAllModules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllModules");
        }
    
        public virtual int GetAllProfiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllProfiles");
        }
    
        public virtual int GetAllRelationshipTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllRelationshipTypes");
        }
    
        public virtual int GetAllSynonymsGroups(Nullable<int> portalID, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllSynonymsGroups", portalIDParameter, cultureCodeParameter);
        }
    
        public virtual int GetAllTabs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllTabs");
        }
    
        public virtual int GetAllTabsModules(Nullable<int> portalID, Nullable<bool> allTabs)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var allTabsParameter = allTabs.HasValue ?
                new ObjectParameter("AllTabs", allTabs) :
                new ObjectParameter("AllTabs", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllTabsModules", portalIDParameter, allTabsParameter);
        }
    
        public virtual int GetAllTabsModulesByModuleID(Nullable<int> moduleID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllTabsModulesByModuleID", moduleIDParameter);
        }
    
        public virtual int GetAllUsers(Nullable<int> portalID, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<bool> includeDeleted, Nullable<bool> superUsersOnly)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("IncludeDeleted", includeDeleted) :
                new ObjectParameter("IncludeDeleted", typeof(bool));
    
            var superUsersOnlyParameter = superUsersOnly.HasValue ?
                new ObjectParameter("SuperUsersOnly", superUsersOnly) :
                new ObjectParameter("SuperUsersOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllUsers", portalIDParameter, pageIndexParameter, pageSizeParameter, includeDeletedParameter, superUsersOnlyParameter);
        }
    
        public virtual int GetAuthenticationService(Nullable<int> authenticationID)
        {
            var authenticationIDParameter = authenticationID.HasValue ?
                new ObjectParameter("AuthenticationID", authenticationID) :
                new ObjectParameter("AuthenticationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuthenticationService", authenticationIDParameter);
        }
    
        public virtual int GetAuthenticationServiceByPackageID(Nullable<int> packageID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuthenticationServiceByPackageID", packageIDParameter);
        }
    
        public virtual int GetAuthenticationServiceByType(string authenticationType)
        {
            var authenticationTypeParameter = authenticationType != null ?
                new ObjectParameter("AuthenticationType", authenticationType) :
                new ObjectParameter("AuthenticationType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuthenticationServiceByType", authenticationTypeParameter);
        }
    
        public virtual int GetAuthenticationServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuthenticationServices");
        }
    
        public virtual int GetAvailableUsersForIndex(Nullable<int> portalId, Nullable<System.DateTime> startDate, Nullable<int> startUserId, Nullable<int> numberOfUsers)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var startUserIdParameter = startUserId.HasValue ?
                new ObjectParameter("startUserId", startUserId) :
                new ObjectParameter("startUserId", typeof(int));
    
            var numberOfUsersParameter = numberOfUsers.HasValue ?
                new ObjectParameter("numberOfUsers", numberOfUsers) :
                new ObjectParameter("numberOfUsers", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAvailableUsersForIndex", portalIdParameter, startDateParameter, startUserIdParameter, numberOfUsersParameter);
        }
    
        public virtual int GetBanner(Nullable<int> bannerId)
        {
            var bannerIdParameter = bannerId.HasValue ?
                new ObjectParameter("BannerId", bannerId) :
                new ObjectParameter("BannerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBanner", bannerIdParameter);
        }
    
        public virtual int GetBannerGroups(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBannerGroups", portalIDParameter);
        }
    
        public virtual int GetBanners(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBanners", vendorIdParameter);
        }
    
        public virtual int GetContentItem(Nullable<int> contentItemId)
        {
            var contentItemIdParameter = contentItemId.HasValue ?
                new ObjectParameter("ContentItemId", contentItemId) :
                new ObjectParameter("ContentItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentItem", contentItemIdParameter);
        }
    
        public virtual int GetContentItems(Nullable<int> contentTypeId, Nullable<int> tabId, Nullable<int> moduleId)
        {
            var contentTypeIdParameter = contentTypeId.HasValue ?
                new ObjectParameter("ContentTypeId", contentTypeId) :
                new ObjectParameter("ContentTypeId", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentItems", contentTypeIdParameter, tabIdParameter, moduleIdParameter);
        }
    
        public virtual int GetContentItemsByContentType(Nullable<int> contentTypeId)
        {
            var contentTypeIdParameter = contentTypeId.HasValue ?
                new ObjectParameter("ContentTypeId", contentTypeId) :
                new ObjectParameter("ContentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentItemsByContentType", contentTypeIdParameter);
        }
    
        public virtual int GetContentItemsByModuleId(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentItemsByModuleId", moduleIdParameter);
        }
    
        public virtual int GetContentItemsByTabId(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentItemsByTabId", tabIdParameter);
        }
    
        public virtual int GetContentItemsByTerm(string term)
        {
            var termParameter = term != null ?
                new ObjectParameter("Term", term) :
                new ObjectParameter("Term", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentItemsByTerm", termParameter);
        }
    
        public virtual int GetContentItemsByVocabularyId(Nullable<int> vocabularyID)
        {
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentItemsByVocabularyId", vocabularyIDParameter);
        }
    
        public virtual int GetContentTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentTypes");
        }
    
        public virtual int GetContentWorkflow(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflow", workflowIDParameter);
        }
    
        public virtual int GetContentWorkflowLogs(Nullable<int> contentItemID, Nullable<int> workflowID)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowLogs", contentItemIDParameter, workflowIDParameter);
        }
    
        public virtual int GetContentWorkflows(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflows", portalIDParameter);
        }
    
        public virtual int GetContentWorkflowSource(Nullable<int> workflowID, string sourceName)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var sourceNameParameter = sourceName != null ?
                new ObjectParameter("SourceName", sourceName) :
                new ObjectParameter("SourceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowSource", workflowIDParameter, sourceNameParameter);
        }
    
        public virtual int GetContentWorkflowState(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowState", stateIDParameter);
        }
    
        public virtual int GetContentWorkflowStatePermission(Nullable<int> workflowStatePermissionID)
        {
            var workflowStatePermissionIDParameter = workflowStatePermissionID.HasValue ?
                new ObjectParameter("WorkflowStatePermissionID", workflowStatePermissionID) :
                new ObjectParameter("WorkflowStatePermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowStatePermission", workflowStatePermissionIDParameter);
        }
    
        public virtual int GetContentWorkflowStatePermissions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowStatePermissions");
        }
    
        public virtual int GetContentWorkflowStatePermissionsByStateID(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowStatePermissionsByStateID", stateIDParameter);
        }
    
        public virtual int GetContentWorkflowStates(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowStates", workflowIDParameter);
        }
    
        public virtual int GetContentWorkflowStateUsageCount(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowStateUsageCount", stateIdParameter);
        }
    
        public virtual int GetContentWorkflowUsage(Nullable<int> workflowId, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var workflowIdParameter = workflowId.HasValue ?
                new ObjectParameter("WorkflowId", workflowId) :
                new ObjectParameter("WorkflowId", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowUsage", workflowIdParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int GetContentWorkflowUsageCount(Nullable<int> workflowId)
        {
            var workflowIdParameter = workflowId.HasValue ?
                new ObjectParameter("WorkflowId", workflowId) :
                new ObjectParameter("WorkflowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetContentWorkflowUsageCount", workflowIdParameter);
        }
    
        public virtual int GetCustomAliasesForTabs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomAliasesForTabs");
        }
    
        public virtual int GetDatabaseInstallVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDatabaseInstallVersion");
        }
    
        public virtual ObjectResult<GetDatabaseServer_Result> GetDatabaseServer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDatabaseServer_Result>("GetDatabaseServer");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetDatabaseTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetDatabaseTime");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetDatabaseTimeUtc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetDatabaseTimeUtc");
        }
    
        public virtual int GetDatabaseVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDatabaseVersion");
        }
    
        public virtual int GetDefaultLanguageByModule(string moduleList)
        {
            var moduleListParameter = moduleList != null ?
                new ObjectParameter("ModuleList", moduleList) :
                new ObjectParameter("ModuleList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDefaultLanguageByModule", moduleListParameter);
        }
    
        public virtual int GetDeletedUsers(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDeletedUsers", portalIDParameter);
        }
    
        public virtual int GetDesktopModulePermission(Nullable<int> desktopModulePermissionID)
        {
            var desktopModulePermissionIDParameter = desktopModulePermissionID.HasValue ?
                new ObjectParameter("DesktopModulePermissionID", desktopModulePermissionID) :
                new ObjectParameter("DesktopModulePermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDesktopModulePermission", desktopModulePermissionIDParameter);
        }
    
        public virtual int GetDesktopModulePermissions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDesktopModulePermissions");
        }
    
        public virtual int GetDesktopModulePermissionsByPortalDesktopModuleID(Nullable<int> portalDesktopModuleID)
        {
            var portalDesktopModuleIDParameter = portalDesktopModuleID.HasValue ?
                new ObjectParameter("PortalDesktopModuleID", portalDesktopModuleID) :
                new ObjectParameter("PortalDesktopModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDesktopModulePermissionsByPortalDesktopModuleID", portalDesktopModuleIDParameter);
        }
    
        public virtual int GetDesktopModules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDesktopModules");
        }
    
        public virtual int GetDesktopModulesByPortal(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDesktopModulesByPortal", portalIdParameter);
        }
    
        public virtual int GetDuplicateEmailCount(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDuplicateEmailCount", portalIdParameter);
        }
    
        public virtual int GetEnabledAuthenticationServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEnabledAuthenticationServices");
        }
    
        public virtual int GetEventLog(Nullable<int> portalID, string logTypeKey, Nullable<int> pageSize, Nullable<int> pageIndex)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var logTypeKeyParameter = logTypeKey != null ?
                new ObjectParameter("LogTypeKey", logTypeKey) :
                new ObjectParameter("LogTypeKey", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventLog", portalIDParameter, logTypeKeyParameter, pageSizeParameter, pageIndexParameter);
        }
    
        public virtual int GetEventLogByLogGUID(string logGUID)
        {
            var logGUIDParameter = logGUID != null ?
                new ObjectParameter("LogGUID", logGUID) :
                new ObjectParameter("LogGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventLogByLogGUID", logGUIDParameter);
        }
    
        public virtual int GetEventLogConfig(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventLogConfig", iDParameter);
        }
    
        public virtual int GetEventLogPendingNotif(Nullable<int> logConfigID)
        {
            var logConfigIDParameter = logConfigID.HasValue ?
                new ObjectParameter("LogConfigID", logConfigID) :
                new ObjectParameter("LogConfigID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventLogPendingNotif", logConfigIDParameter);
        }
    
        public virtual int GetEventLogPendingNotifConfig()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventLogPendingNotifConfig");
        }
    
        public virtual int GetEventLogType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventLogType");
        }
    
        public virtual int GetEventMessages(string eventName)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventMessages", eventNameParameter);
        }
    
        public virtual int GetEventMessagesBySubscriber(string eventName, string subscriber)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var subscriberParameter = subscriber != null ?
                new ObjectParameter("Subscriber", subscriber) :
                new ObjectParameter("Subscriber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventMessagesBySubscriber", eventNameParameter, subscriberParameter);
        }
    
        public virtual int GetExpiredPortals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetExpiredPortals");
        }
    
        public virtual int GetExtensionUrlProviders(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetExtensionUrlProviders", portalIDParameter);
        }
    
        public virtual int GetFile(string fileName, Nullable<int> folderID, Nullable<bool> retrieveUnpublishedFiles)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var retrieveUnpublishedFilesParameter = retrieveUnpublishedFiles.HasValue ?
                new ObjectParameter("RetrieveUnpublishedFiles", retrieveUnpublishedFiles) :
                new ObjectParameter("RetrieveUnpublishedFiles", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFile", fileNameParameter, folderIDParameter, retrieveUnpublishedFilesParameter);
        }
    
        public virtual int GetFileById(Nullable<int> fileId, Nullable<bool> retrieveUnpublishedFiles)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var retrieveUnpublishedFilesParameter = retrieveUnpublishedFiles.HasValue ?
                new ObjectParameter("RetrieveUnpublishedFiles", retrieveUnpublishedFiles) :
                new ObjectParameter("RetrieveUnpublishedFiles", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileById", fileIdParameter, retrieveUnpublishedFilesParameter);
        }
    
        public virtual int GetFileByUniqueID(Nullable<System.Guid> uniqueID)
        {
            var uniqueIDParameter = uniqueID.HasValue ?
                new ObjectParameter("UniqueID", uniqueID) :
                new ObjectParameter("UniqueID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileByUniqueID", uniqueIDParameter);
        }
    
        public virtual int GetFileContent(Nullable<int> fileId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileContent", fileIdParameter);
        }
    
        public virtual int GetFiles(Nullable<int> folderID, Nullable<bool> retrieveUnpublishedFiles)
        {
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var retrieveUnpublishedFilesParameter = retrieveUnpublishedFiles.HasValue ?
                new ObjectParameter("RetrieveUnpublishedFiles", retrieveUnpublishedFiles) :
                new ObjectParameter("RetrieveUnpublishedFiles", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFiles", folderIDParameter, retrieveUnpublishedFilesParameter);
        }
    
        public virtual int GetFileVersion(Nullable<int> fileId, Nullable<int> version)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileVersion", fileIdParameter, versionParameter);
        }
    
        public virtual int GetFileVersionContent(Nullable<int> fileId, Nullable<int> version)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileVersionContent", fileIdParameter, versionParameter);
        }
    
        public virtual int GetFileVersions(Nullable<int> fileId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileVersions", fileIdParameter);
        }
    
        public virtual int GetFileVersionsInFolder(Nullable<int> folderId)
        {
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileVersionsInFolder", folderIdParameter);
        }
    
        public virtual int GetFolderByFolderID(Nullable<int> folderID)
        {
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderByFolderID", folderIDParameter);
        }
    
        public virtual int GetFolderByFolderPath(Nullable<int> portalID, string folderPath)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderByFolderPath", portalIDParameter, folderPathParameter);
        }
    
        public virtual int GetFolderByUniqueID(Nullable<System.Guid> uniqueID)
        {
            var uniqueIDParameter = uniqueID.HasValue ?
                new ObjectParameter("UniqueID", uniqueID) :
                new ObjectParameter("UniqueID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderByUniqueID", uniqueIDParameter);
        }
    
        public virtual int GetFolderMapping(Nullable<int> folderMappingID)
        {
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderMapping", folderMappingIDParameter);
        }
    
        public virtual int GetFolderMappingByMappingName(Nullable<int> portalID, string mappingName)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var mappingNameParameter = mappingName != null ?
                new ObjectParameter("MappingName", mappingName) :
                new ObjectParameter("MappingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderMappingByMappingName", portalIDParameter, mappingNameParameter);
        }
    
        public virtual int GetFolderMappings(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderMappings", portalIDParameter);
        }
    
        public virtual int GetFolderMappingsSetting(Nullable<int> folderMappingID, string settingName)
        {
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderMappingsSetting", folderMappingIDParameter, settingNameParameter);
        }
    
        public virtual int GetFolderMappingsSettings(Nullable<int> folderMappingID)
        {
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderMappingsSettings", folderMappingIDParameter);
        }
    
        public virtual int GetFolderPermission(Nullable<int> folderPermissionID)
        {
            var folderPermissionIDParameter = folderPermissionID.HasValue ?
                new ObjectParameter("FolderPermissionID", folderPermissionID) :
                new ObjectParameter("FolderPermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderPermission", folderPermissionIDParameter);
        }
    
        public virtual int GetFolderPermissionsByFolderPath(Nullable<int> portalID, string folderPath, Nullable<int> permissionID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderPermissionsByFolderPath", portalIDParameter, folderPathParameter, permissionIDParameter);
        }
    
        public virtual int GetFolderPermissionsByPortal(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolderPermissionsByPortal", portalIdParameter);
        }
    
        public virtual int GetFolders(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFolders", portalIDParameter);
        }
    
        public virtual int GetFoldersByPermissions(Nullable<int> portalID, string permissions, Nullable<int> userID, Nullable<int> folderID, string folderPath)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var permissionsParameter = permissions != null ?
                new ObjectParameter("Permissions", permissions) :
                new ObjectParameter("Permissions", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFoldersByPermissions", portalIDParameter, permissionsParameter, userIDParameter, folderIDParameter, folderPathParameter);
        }
    
        public virtual int GetHostSetting(string settingName)
        {
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHostSetting", settingNameParameter);
        }
    
        public virtual int GetHostSettings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHostSettings");
        }
    
        public virtual int GetHtmlText(Nullable<int> moduleID, Nullable<int> itemID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHtmlText", moduleIDParameter, itemIDParameter);
        }
    
        public virtual int GetHtmlTextLog(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHtmlTextLog", itemIDParameter);
        }
    
        public virtual int GetHtmlTextUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHtmlTextUser", userIDParameter);
        }
    
        public virtual int GetIPFilter(Nullable<int> inputFilter)
        {
            var inputFilterParameter = inputFilter.HasValue ?
                new ObjectParameter("InputFilter", inputFilter) :
                new ObjectParameter("InputFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIPFilter", inputFilterParameter);
        }
    
        public virtual int GetIPFilters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIPFilters");
        }
    
        public virtual int GetJavaScriptLibraries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetJavaScriptLibraries");
        }
    
        public virtual int GetLanguagePackByPackage(Nullable<int> packageID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLanguagePackByPackage", packageIDParameter);
        }
    
        public virtual int GetLanguages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLanguages");
        }
    
        public virtual int GetLanguagesByPortal(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLanguagesByPortal", portalIdParameter);
        }
    
        public virtual int GetLegacyFolderCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLegacyFolderCount");
        }
    
        public virtual int GetList(string listName, string parentKey, Nullable<int> portalID)
        {
            var listNameParameter = listName != null ?
                new ObjectParameter("ListName", listName) :
                new ObjectParameter("ListName", typeof(string));
    
            var parentKeyParameter = parentKey != null ?
                new ObjectParameter("ParentKey", parentKey) :
                new ObjectParameter("ParentKey", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetList", listNameParameter, parentKeyParameter, portalIDParameter);
        }
    
        public virtual int GetListEntries(string listName, string parentKey, Nullable<int> portalID)
        {
            var listNameParameter = listName != null ?
                new ObjectParameter("ListName", listName) :
                new ObjectParameter("ListName", typeof(string));
    
            var parentKeyParameter = parentKey != null ?
                new ObjectParameter("ParentKey", parentKey) :
                new ObjectParameter("ParentKey", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetListEntries", listNameParameter, parentKeyParameter, portalIDParameter);
        }
    
        public virtual int GetListEntry(string listName, string value, Nullable<int> entryID)
        {
            var listNameParameter = listName != null ?
                new ObjectParameter("ListName", listName) :
                new ObjectParameter("ListName", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetListEntry", listNameParameter, valueParameter, entryIDParameter);
        }
    
        public virtual int GetLists(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLists", portalIDParameter);
        }
    
        public virtual int GetMetaData(Nullable<int> contentItemId)
        {
            var contentItemIdParameter = contentItemId.HasValue ?
                new ObjectParameter("ContentItemId", contentItemId) :
                new ObjectParameter("ContentItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMetaData", contentItemIdParameter);
        }
    
        public virtual int GetModule(Nullable<int> moduleId, Nullable<int> tabId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModule", moduleIdParameter, tabIdParameter);
        }
    
        public virtual int GetModuleByDefinition(Nullable<int> portalId, string definitionName)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var definitionNameParameter = definitionName != null ?
                new ObjectParameter("DefinitionName", definitionName) :
                new ObjectParameter("DefinitionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModuleByDefinition", portalIdParameter, definitionNameParameter);
        }
    
        public virtual int GetModuleByUniqueID(Nullable<System.Guid> uniqueID)
        {
            var uniqueIDParameter = uniqueID.HasValue ?
                new ObjectParameter("UniqueID", uniqueID) :
                new ObjectParameter("UniqueID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModuleByUniqueID", uniqueIDParameter);
        }
    
        public virtual int GetModuleControls()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModuleControls");
        }
    
        public virtual int GetModuleDefinitions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModuleDefinitions");
        }
    
        public virtual int GetModulePackagesInUse(Nullable<int> portalID, Nullable<bool> forHost)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var forHostParameter = forHost.HasValue ?
                new ObjectParameter("ForHost", forHost) :
                new ObjectParameter("ForHost", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModulePackagesInUse", portalIDParameter, forHostParameter);
        }
    
        public virtual int GetModulePermission(Nullable<int> modulePermissionID)
        {
            var modulePermissionIDParameter = modulePermissionID.HasValue ?
                new ObjectParameter("ModulePermissionID", modulePermissionID) :
                new ObjectParameter("ModulePermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModulePermission", modulePermissionIDParameter);
        }
    
        public virtual int GetModulePermissionsByModuleID(Nullable<int> moduleId, Nullable<int> permissionId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModulePermissionsByModuleID", moduleIdParameter, permissionIdParameter);
        }
    
        public virtual int GetModulePermissionsByPortal(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModulePermissionsByPortal", portalIdParameter);
        }
    
        public virtual int GetModulePermissionsByTabID(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModulePermissionsByTabID", tabIdParameter);
        }
    
        public virtual int GetModules(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModules", portalIDParameter);
        }
    
        public virtual int GetModuleSetting(Nullable<int> moduleId, string settingName)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModuleSetting", moduleIdParameter, settingNameParameter);
        }
    
        public virtual int GetModuleSettings(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModuleSettings", moduleIdParameter);
        }
    
        public virtual int GetModuleSettingsByTab(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetModuleSettingsByTab", tabIdParameter);
        }
    
        public virtual int GetOnlineUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOnlineUser", userIDParameter);
        }
    
        public virtual int GetOnlineUsers(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOnlineUsers", portalIDParameter);
        }
    
        public virtual int GetPackageDependencies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPackageDependencies");
        }
    
        public virtual int GetPackages(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPackages", portalIDParameter);
        }
    
        public virtual int GetPackageTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPackageTypes");
        }
    
        public virtual int GetPasswordHistory(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPasswordHistory", userIDParameter);
        }
    
        public virtual int GetPermissions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPermissions");
        }
    
        public virtual int GetPortalAliases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalAliases");
        }
    
        public virtual int GetPortalByPortalAliasID(Nullable<int> portalAliasId)
        {
            var portalAliasIdParameter = portalAliasId.HasValue ?
                new ObjectParameter("PortalAliasId", portalAliasId) :
                new ObjectParameter("PortalAliasId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalByPortalAliasID", portalAliasIdParameter);
        }
    
        public virtual int GetPortalDefaultLanguage(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalDefaultLanguage", portalIdParameter);
        }
    
        public virtual int GetPortalDesktopModules(Nullable<int> portalId, Nullable<int> desktopModuleId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalDesktopModules", portalIdParameter, desktopModuleIdParameter);
        }
    
        public virtual int GetPortalGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalGroups");
        }
    
        public virtual int GetPortalRoles(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalRoles", portalIdParameter);
        }
    
        public virtual int GetPortals(string cultureCode)
        {
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortals", cultureCodeParameter);
        }
    
        public virtual int GetPortalsByName(string nameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var nameToMatchParameter = nameToMatch != null ?
                new ObjectParameter("NameToMatch", nameToMatch) :
                new ObjectParameter("NameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalsByName", nameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int GetPortalsByUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalsByUser", userIDParameter);
        }
    
        public virtual int GetPortalSetting(Nullable<int> portalID, string settingName, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalSetting", portalIDParameter, settingNameParameter, cultureCodeParameter);
        }
    
        public virtual int GetPortalSettings(Nullable<int> portalId, string cultureCode)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalSettings", portalIdParameter, cultureCodeParameter);
        }
    
        public virtual int GetPortalSpaceUsed(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPortalSpaceUsed", portalIdParameter);
        }
    
        public virtual int GetProfile(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProfile", userIDParameter, portalIDParameter);
        }
    
        public virtual int GetPropertyDefinition(Nullable<int> propertyDefinitionID)
        {
            var propertyDefinitionIDParameter = propertyDefinitionID.HasValue ?
                new ObjectParameter("PropertyDefinitionID", propertyDefinitionID) :
                new ObjectParameter("PropertyDefinitionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPropertyDefinition", propertyDefinitionIDParameter);
        }
    
        public virtual int GetPropertyDefinitionByName(Nullable<int> portalID, string name)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPropertyDefinitionByName", portalIDParameter, nameParameter);
        }
    
        public virtual int GetPropertyDefinitionsByCategory(Nullable<int> portalID, string category)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPropertyDefinitionsByCategory", portalIDParameter, categoryParameter);
        }
    
        public virtual int GetPropertyDefinitionsByPortal(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPropertyDefinitionsByPortal", portalIDParameter);
        }
    
        public virtual int GetRelationship(Nullable<int> relationshipID)
        {
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRelationship", relationshipIDParameter);
        }
    
        public virtual int GetRelationshipsByPortalID(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRelationshipsByPortalID", portalIDParameter);
        }
    
        public virtual int GetRelationshipsByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRelationshipsByUserID", userIDParameter);
        }
    
        public virtual int GetRelationshipType(Nullable<int> relationshipTypeID)
        {
            var relationshipTypeIDParameter = relationshipTypeID.HasValue ?
                new ObjectParameter("RelationshipTypeID", relationshipTypeID) :
                new ObjectParameter("RelationshipTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRelationshipType", relationshipTypeIDParameter);
        }
    
        public virtual int GetRoleGroup(Nullable<int> portalID, Nullable<int> roleGroupId)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var roleGroupIdParameter = roleGroupId.HasValue ?
                new ObjectParameter("RoleGroupId", roleGroupId) :
                new ObjectParameter("RoleGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRoleGroup", portalIDParameter, roleGroupIdParameter);
        }
    
        public virtual int GetRoleGroupByName(Nullable<int> portalID, string roleGroupName)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var roleGroupNameParameter = roleGroupName != null ?
                new ObjectParameter("RoleGroupName", roleGroupName) :
                new ObjectParameter("RoleGroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRoleGroupByName", portalIDParameter, roleGroupNameParameter);
        }
    
        public virtual int GetRoleGroups(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRoleGroups", portalIDParameter);
        }
    
        public virtual int GetRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRoles");
        }
    
        public virtual int GetRolesBasicSearch(Nullable<int> portalID, Nullable<int> pageIndex, Nullable<int> pageSize, string filterBy)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var filterByParameter = filterBy != null ?
                new ObjectParameter("FilterBy", filterBy) :
                new ObjectParameter("FilterBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRolesBasicSearch", portalIDParameter, pageIndexParameter, pageSizeParameter, filterByParameter);
        }
    
        public virtual int GetRoleSettings(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRoleSettings", roleIdParameter);
        }
    
        public virtual int GetSchedule(string server)
        {
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSchedule", serverParameter);
        }
    
        public virtual int GetScheduleByEvent(string eventName, string server)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScheduleByEvent", eventNameParameter, serverParameter);
        }
    
        public virtual int GetScheduleByScheduleID(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScheduleByScheduleID", scheduleIDParameter);
        }
    
        public virtual int GetScheduleByTypeFullName(string typeFullName, string server)
        {
            var typeFullNameParameter = typeFullName != null ?
                new ObjectParameter("TypeFullName", typeFullName) :
                new ObjectParameter("TypeFullName", typeof(string));
    
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScheduleByTypeFullName", typeFullNameParameter, serverParameter);
        }
    
        public virtual int GetScheduleHistory(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScheduleHistory", scheduleIDParameter);
        }
    
        public virtual int GetScheduleItemSettings(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScheduleItemSettings", scheduleIDParameter);
        }
    
        public virtual int GetScheduleNextTask(string server)
        {
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScheduleNextTask", serverParameter);
        }
    
        public virtual int GetScopeTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScopeTypes");
        }
    
        public virtual int GetSearchCommonWordByID(Nullable<int> commonWordID)
        {
            var commonWordIDParameter = commonWordID.HasValue ?
                new ObjectParameter("CommonWordID", commonWordID) :
                new ObjectParameter("CommonWordID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSearchCommonWordByID", commonWordIDParameter);
        }
    
        public virtual int GetSearchCommonWordsByLocale(string locale)
        {
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSearchCommonWordsByLocale", localeParameter);
        }
    
        public virtual int GetSearchIndexers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSearchIndexers");
        }
    
        public virtual int GetSearchModules(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSearchModules", portalIDParameter);
        }
    
        public virtual int GetSearchResultModules(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSearchResultModules", portalIDParameter);
        }
    
        public virtual int GetSearchSettings(Nullable<int> moduleID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSearchSettings", moduleIDParameter);
        }
    
        public virtual int GetSearchStopWords(Nullable<int> portalID, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSearchStopWords", portalIDParameter, cultureCodeParameter);
        }
    
        public virtual int GetServers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetServers");
        }
    
        public virtual int GetServices(Nullable<int> portalId, Nullable<int> userId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetServices", portalIdParameter, userIdParameter);
        }
    
        public virtual int GetSharedModulesByPortal(Nullable<int> portald)
        {
            var portaldParameter = portald.HasValue ?
                new ObjectParameter("Portald", portald) :
                new ObjectParameter("Portald", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSharedModulesByPortal", portaldParameter);
        }
    
        public virtual int GetSharedModulesWithPortal(Nullable<int> portald)
        {
            var portaldParameter = portald.HasValue ?
                new ObjectParameter("Portald", portald) :
                new ObjectParameter("Portald", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSharedModulesWithPortal", portaldParameter);
        }
    
        public virtual int GetSingleUserByEmail(Nullable<int> portalId, string email)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSingleUserByEmail", portalIdParameter, emailParameter);
        }
    
        public virtual int GetSiteLog1(Nullable<int> portalID, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog1", portalIDParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog12(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog12", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog2(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog2", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog3(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog3", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog4(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog4", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog5(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog5", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog6(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog6", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog7(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog7", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog8(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog8", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSiteLog9(Nullable<int> portalId, string portalAlias, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSiteLog9", portalIdParameter, portalAliasParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetSkinControl(Nullable<int> skinControlID)
        {
            var skinControlIDParameter = skinControlID.HasValue ?
                new ObjectParameter("SkinControlID", skinControlID) :
                new ObjectParameter("SkinControlID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSkinControl", skinControlIDParameter);
        }
    
        public virtual int GetSkinControlByKey(string controlKey)
        {
            var controlKeyParameter = controlKey != null ?
                new ObjectParameter("ControlKey", controlKey) :
                new ObjectParameter("ControlKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSkinControlByKey", controlKeyParameter);
        }
    
        public virtual int GetSkinControlByPackageID(Nullable<int> packageID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSkinControlByPackageID", packageIDParameter);
        }
    
        public virtual int GetSkinControls()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSkinControls");
        }
    
        public virtual int GetSkinPackage(Nullable<int> portalID, string skinName, string skinType)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var skinNameParameter = skinName != null ?
                new ObjectParameter("SkinName", skinName) :
                new ObjectParameter("SkinName", typeof(string));
    
            var skinTypeParameter = skinType != null ?
                new ObjectParameter("SkinType", skinType) :
                new ObjectParameter("SkinType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSkinPackage", portalIDParameter, skinNameParameter, skinTypeParameter);
        }
    
        public virtual int GetSkinPackageByPackageID(Nullable<int> packageID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSkinPackageByPackageID", packageIDParameter);
        }
    
        public virtual int GetSystemMessage(Nullable<int> portalID, string messageName)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var messageNameParameter = messageName != null ?
                new ObjectParameter("MessageName", messageName) :
                new ObjectParameter("MessageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSystemMessage", portalIDParameter, messageNameParameter);
        }
    
        public virtual int GetSystemMessages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSystemMessages");
        }
    
        public virtual int GetTab(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTab", tabIdParameter);
        }
    
        public virtual int GetTabAliasSkins(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabAliasSkins", portalIDParameter);
        }
    
        public virtual int GetTabByUniqueID(Nullable<System.Guid> uniqueID)
        {
            var uniqueIDParameter = uniqueID.HasValue ?
                new ObjectParameter("UniqueID", uniqueID) :
                new ObjectParameter("UniqueID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabByUniqueID", uniqueIDParameter);
        }
    
        public virtual int GetTabCustomAliases(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabCustomAliases", portalIDParameter);
        }
    
        public virtual int GetTabModule(Nullable<int> tabModuleID)
        {
            var tabModuleIDParameter = tabModuleID.HasValue ?
                new ObjectParameter("TabModuleID", tabModuleID) :
                new ObjectParameter("TabModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabModule", tabModuleIDParameter);
        }
    
        public virtual int GetTabModuleOrder(Nullable<int> tabId, string paneName)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var paneNameParameter = paneName != null ?
                new ObjectParameter("PaneName", paneName) :
                new ObjectParameter("PaneName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabModuleOrder", tabIdParameter, paneNameParameter);
        }
    
        public virtual int GetTabModules(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabModules", tabIdParameter);
        }
    
        public virtual int GetTabModuleSetting(Nullable<int> tabModuleId, string settingName)
        {
            var tabModuleIdParameter = tabModuleId.HasValue ?
                new ObjectParameter("TabModuleId", tabModuleId) :
                new ObjectParameter("TabModuleId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabModuleSetting", tabModuleIdParameter, settingNameParameter);
        }
    
        public virtual int GetTabModuleSettings(Nullable<int> tabModuleId)
        {
            var tabModuleIdParameter = tabModuleId.HasValue ?
                new ObjectParameter("TabModuleId", tabModuleId) :
                new ObjectParameter("TabModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabModuleSettings", tabModuleIdParameter);
        }
    
        public virtual int GetTabModuleSettingsByTab(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabModuleSettingsByTab", tabIdParameter);
        }
    
        public virtual int GetTabPanes(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabPanes", tabIdParameter);
        }
    
        public virtual int GetTabPaths(Nullable<int> portalID, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabPaths", portalIDParameter, cultureCodeParameter);
        }
    
        public virtual int GetTabPermission(Nullable<int> tabPermissionID)
        {
            var tabPermissionIDParameter = tabPermissionID.HasValue ?
                new ObjectParameter("TabPermissionID", tabPermissionID) :
                new ObjectParameter("TabPermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabPermission", tabPermissionIDParameter);
        }
    
        public virtual int GetTabPermissionsByPortal(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabPermissionsByPortal", portalIDParameter);
        }
    
        public virtual int GetTabPermissionsByTabID(Nullable<int> tabID, Nullable<int> permissionID)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabPermissionsByTabID", tabIDParameter, permissionIDParameter);
        }
    
        public virtual int GetTabs(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabs", portalIDParameter);
        }
    
        public virtual int GetTabsByModuleID(Nullable<int> moduleID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabsByModuleID", moduleIDParameter);
        }
    
        public virtual int GetTabsByPackageID(Nullable<int> portalId, Nullable<int> packageId, Nullable<bool> forHost)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var forHostParameter = forHost.HasValue ?
                new ObjectParameter("ForHost", forHost) :
                new ObjectParameter("ForHost", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabsByPackageID", portalIdParameter, packageIdParameter, forHostParameter);
        }
    
        public virtual int GetTabsByTabModuleID(Nullable<int> tabModuleID)
        {
            var tabModuleIDParameter = tabModuleID.HasValue ?
                new ObjectParameter("TabModuleID", tabModuleID) :
                new ObjectParameter("TabModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabsByTabModuleID", tabModuleIDParameter);
        }
    
        public virtual int GetTabSetting(Nullable<int> tabId, string settingName)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabSetting", tabIdParameter, settingNameParameter);
        }
    
        public virtual int GetTabSettings(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabSettings", portalIdParameter);
        }
    
        public virtual int GetTabUrls(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabUrls", portalIdParameter);
        }
    
        public virtual int GetTabVersionDetails(Nullable<int> tabVersionId)
        {
            var tabVersionIdParameter = tabVersionId.HasValue ?
                new ObjectParameter("TabVersionId", tabVersionId) :
                new ObjectParameter("TabVersionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabVersionDetails", tabVersionIdParameter);
        }
    
        public virtual int GetTabVersionDetailsHistory(Nullable<int> tabID, Nullable<int> version)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabVersionDetailsHistory", tabIDParameter, versionParameter);
        }
    
        public virtual int GetTabVersions(Nullable<int> tabId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTabVersions", tabIdParameter);
        }
    
        public virtual int GetTerm(Nullable<int> termId)
        {
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("TermId", termId) :
                new ObjectParameter("TermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTerm", termIdParameter);
        }
    
        public virtual int GetTermsByContent(Nullable<int> contentItemID)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTermsByContent", contentItemIDParameter);
        }
    
        public virtual int GetTermsByVocabulary(Nullable<int> vocabularyID)
        {
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTermsByVocabulary", vocabularyIDParameter);
        }
    
        public virtual int GetTermUsage(Nullable<int> termId)
        {
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("TermId", termId) :
                new ObjectParameter("TermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTermUsage", termIdParameter);
        }
    
        public virtual int GetTopHtmlText(Nullable<int> moduleID, Nullable<bool> isPublished)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTopHtmlText", moduleIDParameter, isPublishedParameter);
        }
    
        public virtual int GetUnAuthorizedUsers(Nullable<int> portalID, Nullable<bool> includeDeleted, Nullable<bool> superUsersOnly)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("IncludeDeleted", includeDeleted) :
                new ObjectParameter("IncludeDeleted", typeof(bool));
    
            var superUsersOnlyParameter = superUsersOnly.HasValue ?
                new ObjectParameter("SuperUsersOnly", superUsersOnly) :
                new ObjectParameter("SuperUsersOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnAuthorizedUsers", portalIDParameter, includeDeletedParameter, superUsersOnlyParameter);
        }
    
        public virtual int GetUnIndexedContentItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnIndexedContentItems");
        }
    
        public virtual int GetUrl(Nullable<int> portalID, string url)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUrl", portalIDParameter, urlParameter);
        }
    
        public virtual int GetUrlLog(Nullable<int> uRLTrackingID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var uRLTrackingIDParameter = uRLTrackingID.HasValue ?
                new ObjectParameter("URLTrackingID", uRLTrackingID) :
                new ObjectParameter("URLTrackingID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUrlLog", uRLTrackingIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetUrls(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUrls", portalIDParameter);
        }
    
        public virtual int GetUrlTracking(Nullable<int> portalID, string url, Nullable<int> moduleId)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUrlTracking", portalIDParameter, urlParameter, moduleIdParameter);
        }
    
        public virtual int GetUser(Nullable<int> portalID, Nullable<int> userID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUser", portalIDParameter, userIDParameter);
        }
    
        public virtual int GetUserAuthentication(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserAuthentication", userIDParameter);
        }
    
        public virtual int GetUserByAuthToken(Nullable<int> portalId, string userToken, string authType)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userTokenParameter = userToken != null ?
                new ObjectParameter("UserToken", userToken) :
                new ObjectParameter("UserToken", typeof(string));
    
            var authTypeParameter = authType != null ?
                new ObjectParameter("AuthType", authType) :
                new ObjectParameter("AuthType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserByAuthToken", portalIdParameter, userTokenParameter, authTypeParameter);
        }
    
        public virtual int GetUserByDisplayName(Nullable<int> portalID, string displayName)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserByDisplayName", portalIDParameter, displayNameParameter);
        }
    
        public virtual int GetUserByUsername(Nullable<int> portalID, string username)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserByUsername", portalIDParameter, usernameParameter);
        }
    
        public virtual int GetUserByVanityUrl(Nullable<int> portalID, string vanityUrl)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var vanityUrlParameter = vanityUrl != null ?
                new ObjectParameter("VanityUrl", vanityUrl) :
                new ObjectParameter("VanityUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserByVanityUrl", portalIDParameter, vanityUrlParameter);
        }
    
        public virtual int GetUserCountByPortal(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserCountByPortal", portalIdParameter);
        }
    
        public virtual int GetUserProfile(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserProfile", userIDParameter);
        }
    
        public virtual int GetUserRelationship(Nullable<int> userRelationshipID)
        {
            var userRelationshipIDParameter = userRelationshipID.HasValue ?
                new ObjectParameter("UserRelationshipID", userRelationshipID) :
                new ObjectParameter("UserRelationshipID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRelationship", userRelationshipIDParameter);
        }
    
        public virtual int GetUserRelationshipPreference(Nullable<int> userID, Nullable<int> relationshipID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRelationshipPreference", userIDParameter, relationshipIDParameter);
        }
    
        public virtual int GetUserRelationshipPreferenceByID(Nullable<int> preferenceID)
        {
            var preferenceIDParameter = preferenceID.HasValue ?
                new ObjectParameter("PreferenceID", preferenceID) :
                new ObjectParameter("PreferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRelationshipPreferenceByID", preferenceIDParameter);
        }
    
        public virtual int GetUserRelationships(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRelationships", userIDParameter);
        }
    
        public virtual int GetUserRelationshipsByMultipleIDs(Nullable<int> userID, Nullable<int> relatedUserID, Nullable<int> relationshipID, Nullable<int> direction)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var relatedUserIDParameter = relatedUserID.HasValue ?
                new ObjectParameter("RelatedUserID", relatedUserID) :
                new ObjectParameter("RelatedUserID", typeof(int));
    
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(int));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRelationshipsByMultipleIDs", userIDParameter, relatedUserIDParameter, relationshipIDParameter, directionParameter);
        }
    
        public virtual int GetUserRole(Nullable<int> portalID, Nullable<int> userID, Nullable<int> roleId)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRole", portalIDParameter, userIDParameter, roleIdParameter);
        }
    
        public virtual int GetUserRoles(Nullable<int> portalId, Nullable<int> userId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRoles", portalIdParameter, userIdParameter);
        }
    
        public virtual int GetUserRolesByUsername(Nullable<int> portalID, string username, string rolename)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var rolenameParameter = rolename != null ?
                new ObjectParameter("Rolename", rolename) :
                new ObjectParameter("Rolename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRolesByUsername", portalIDParameter, usernameParameter, rolenameParameter);
        }
    
        public virtual int GetUsersAdvancedSearch(Nullable<int> portalID, Nullable<int> userId, Nullable<int> filterUserId, Nullable<int> filterRoleId, Nullable<int> relationshipTypeId, Nullable<bool> isAdmin, Nullable<int> pageSize, Nullable<int> pageIndex, string sortBy, Nullable<bool> sortAscending, string propertyNames, string propertyValues)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterUserIdParameter = filterUserId.HasValue ?
                new ObjectParameter("FilterUserId", filterUserId) :
                new ObjectParameter("FilterUserId", typeof(int));
    
            var filterRoleIdParameter = filterRoleId.HasValue ?
                new ObjectParameter("FilterRoleId", filterRoleId) :
                new ObjectParameter("FilterRoleId", typeof(int));
    
            var relationshipTypeIdParameter = relationshipTypeId.HasValue ?
                new ObjectParameter("RelationshipTypeId", relationshipTypeId) :
                new ObjectParameter("RelationshipTypeId", typeof(int));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            var sortAscendingParameter = sortAscending.HasValue ?
                new ObjectParameter("SortAscending", sortAscending) :
                new ObjectParameter("SortAscending", typeof(bool));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesParameter = propertyValues != null ?
                new ObjectParameter("PropertyValues", propertyValues) :
                new ObjectParameter("PropertyValues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersAdvancedSearch", portalIDParameter, userIdParameter, filterUserIdParameter, filterRoleIdParameter, relationshipTypeIdParameter, isAdminParameter, pageSizeParameter, pageIndexParameter, sortByParameter, sortAscendingParameter, propertyNamesParameter, propertyValuesParameter);
        }
    
        public virtual int GetUsersBasicSearch(Nullable<int> portalID, Nullable<int> pageSize, Nullable<int> pageIndex, string sortBy, Nullable<bool> sortAscending, string propertyName, string propertyValue)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            var sortAscendingParameter = sortAscending.HasValue ?
                new ObjectParameter("SortAscending", sortAscending) :
                new ObjectParameter("SortAscending", typeof(bool));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyValueParameter = propertyValue != null ?
                new ObjectParameter("PropertyValue", propertyValue) :
                new ObjectParameter("PropertyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersBasicSearch", portalIDParameter, pageSizeParameter, pageIndexParameter, sortByParameter, sortAscendingParameter, propertyNameParameter, propertyValueParameter);
        }
    
        public virtual int GetUsersByDisplayName(Nullable<int> portalID, string nameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<bool> includeDeleted, Nullable<bool> superUsersOnly)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var nameToMatchParameter = nameToMatch != null ?
                new ObjectParameter("NameToMatch", nameToMatch) :
                new ObjectParameter("NameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("IncludeDeleted", includeDeleted) :
                new ObjectParameter("IncludeDeleted", typeof(bool));
    
            var superUsersOnlyParameter = superUsersOnly.HasValue ?
                new ObjectParameter("SuperUsersOnly", superUsersOnly) :
                new ObjectParameter("SuperUsersOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersByDisplayName", portalIDParameter, nameToMatchParameter, pageIndexParameter, pageSizeParameter, includeDeletedParameter, superUsersOnlyParameter);
        }
    
        public virtual int GetUsersByEmail(Nullable<int> portalID, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<bool> includeDeleted, Nullable<bool> superUsersOnly)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("IncludeDeleted", includeDeleted) :
                new ObjectParameter("IncludeDeleted", typeof(bool));
    
            var superUsersOnlyParameter = superUsersOnly.HasValue ?
                new ObjectParameter("SuperUsersOnly", superUsersOnly) :
                new ObjectParameter("SuperUsersOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersByEmail", portalIDParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter, includeDeletedParameter, superUsersOnlyParameter);
        }
    
        public virtual int GetUsersByProfileProperty(Nullable<int> portalID, string propertyName, string propertyValue, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<bool> includeDeleted, Nullable<bool> superUsersOnly)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyValueParameter = propertyValue != null ?
                new ObjectParameter("PropertyValue", propertyValue) :
                new ObjectParameter("PropertyValue", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("IncludeDeleted", includeDeleted) :
                new ObjectParameter("IncludeDeleted", typeof(bool));
    
            var superUsersOnlyParameter = superUsersOnly.HasValue ?
                new ObjectParameter("SuperUsersOnly", superUsersOnly) :
                new ObjectParameter("SuperUsersOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersByProfileProperty", portalIDParameter, propertyNameParameter, propertyValueParameter, pageIndexParameter, pageSizeParameter, includeDeletedParameter, superUsersOnlyParameter);
        }
    
        [DbFunction("NotaliaOnlineEntities", "GetUsersByPropertyName")]
        public virtual IQueryable<GetUsersByPropertyName_Result> GetUsersByPropertyName(string propertyName, string propertyValue, Nullable<int> portalID)
        {
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyValueParameter = propertyValue != null ?
                new ObjectParameter("PropertyValue", propertyValue) :
                new ObjectParameter("PropertyValue", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUsersByPropertyName_Result>("[NotaliaOnlineEntities].[GetUsersByPropertyName](@PropertyName, @PropertyValue, @PortalID)", propertyNameParameter, propertyValueParameter, portalIDParameter);
        }
    
        public virtual int GetUsersByRolename(Nullable<int> portalID, string rolename)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var rolenameParameter = rolename != null ?
                new ObjectParameter("Rolename", rolename) :
                new ObjectParameter("Rolename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersByRolename", portalIDParameter, rolenameParameter);
        }
    
        public virtual int GetUsersByUserName(Nullable<int> portalID, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<bool> includeDeleted, Nullable<bool> superUsersOnly)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("IncludeDeleted", includeDeleted) :
                new ObjectParameter("IncludeDeleted", typeof(bool));
    
            var superUsersOnlyParameter = superUsersOnly.HasValue ?
                new ObjectParameter("SuperUsersOnly", superUsersOnly) :
                new ObjectParameter("SuperUsersOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersByUserName", portalIDParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter, includeDeletedParameter, superUsersOnlyParameter);
        }
    
        public virtual int GetVendor(Nullable<int> vendorId, Nullable<int> portalId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVendor", vendorIdParameter, portalIdParameter);
        }
    
        public virtual int GetVendorClassifications(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVendorClassifications", vendorIdParameter);
        }
    
        public virtual int GetVendors(Nullable<int> portalID, Nullable<bool> unAuthorized, Nullable<int> pageSize, Nullable<int> pageIndex)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var unAuthorizedParameter = unAuthorized.HasValue ?
                new ObjectParameter("UnAuthorized", unAuthorized) :
                new ObjectParameter("UnAuthorized", typeof(bool));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVendors", portalIDParameter, unAuthorizedParameter, pageSizeParameter, pageIndexParameter);
        }
    
        public virtual int GetVendorsByEmail(string filter, Nullable<int> portalID, Nullable<int> pageSize, Nullable<int> pageIndex)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVendorsByEmail", filterParameter, portalIDParameter, pageSizeParameter, pageIndexParameter);
        }
    
        public virtual int GetVendorsByName(string filter, Nullable<int> portalID, Nullable<int> pageSize, Nullable<int> pageIndex)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVendorsByName", filterParameter, portalIDParameter, pageSizeParameter, pageIndexParameter);
        }
    
        public virtual int GetVocabularies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVocabularies");
        }
    
        public virtual int GetWorkflows(Nullable<int> portalID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWorkflows", portalIDParameter);
        }
    
        public virtual int GetWorkflowStates(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWorkflowStates", workflowIDParameter);
        }
    
        public virtual int ImportDocumentLibraryCategories(Nullable<int> vocabularyID)
        {
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportDocumentLibraryCategories", vocabularyIDParameter);
        }
    
        public virtual int ImportDocumentLibraryCategoryAssoc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportDocumentLibraryCategoryAssoc");
        }
    
        public virtual int InsertPortalLocalization(Nullable<int> portalID, string cultureCode, string portalName, string logoFile, string footerText, string description, string keyWords, string backgroundFile, Nullable<int> homeTabId, Nullable<int> loginTabId, Nullable<int> userTabId, Nullable<int> adminTabid, Nullable<int> splashTabId, Nullable<int> createdByUserID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var portalNameParameter = portalName != null ?
                new ObjectParameter("PortalName", portalName) :
                new ObjectParameter("PortalName", typeof(string));
    
            var logoFileParameter = logoFile != null ?
                new ObjectParameter("LogoFile", logoFile) :
                new ObjectParameter("LogoFile", typeof(string));
    
            var footerTextParameter = footerText != null ?
                new ObjectParameter("FooterText", footerText) :
                new ObjectParameter("FooterText", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var backgroundFileParameter = backgroundFile != null ?
                new ObjectParameter("BackgroundFile", backgroundFile) :
                new ObjectParameter("BackgroundFile", typeof(string));
    
            var homeTabIdParameter = homeTabId.HasValue ?
                new ObjectParameter("HomeTabId", homeTabId) :
                new ObjectParameter("HomeTabId", typeof(int));
    
            var loginTabIdParameter = loginTabId.HasValue ?
                new ObjectParameter("LoginTabId", loginTabId) :
                new ObjectParameter("LoginTabId", typeof(int));
    
            var userTabIdParameter = userTabId.HasValue ?
                new ObjectParameter("UserTabId", userTabId) :
                new ObjectParameter("UserTabId", typeof(int));
    
            var adminTabidParameter = adminTabid.HasValue ?
                new ObjectParameter("AdminTabid", adminTabid) :
                new ObjectParameter("AdminTabid", typeof(int));
    
            var splashTabIdParameter = splashTabId.HasValue ?
                new ObjectParameter("SplashTabId", splashTabId) :
                new ObjectParameter("SplashTabId", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPortalLocalization", portalIDParameter, cultureCodeParameter, portalNameParameter, logoFileParameter, footerTextParameter, descriptionParameter, keyWordsParameter, backgroundFileParameter, homeTabIdParameter, loginTabIdParameter, userTabIdParameter, adminTabidParameter, splashTabIdParameter, createdByUserIDParameter);
        }
    
        public virtual int InsertSearchStopWords(string stopWords, Nullable<int> createdByUserID, Nullable<int> portalID, string cultureCode)
        {
            var stopWordsParameter = stopWords != null ?
                new ObjectParameter("StopWords", stopWords) :
                new ObjectParameter("StopWords", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSearchStopWords", stopWordsParameter, createdByUserIDParameter, portalIDParameter, cultureCodeParameter);
        }
    
        public virtual int IsUserInRole(Nullable<int> userID, Nullable<int> roleId, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsUserInRole", userIDParameter, roleIdParameter, portalIDParameter);
        }
    
        public virtual int Journal_Comment_Delete(Nullable<int> journalId, Nullable<int> commentId)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var commentIdParameter = commentId.HasValue ?
                new ObjectParameter("CommentId", commentId) :
                new ObjectParameter("CommentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Comment_Delete", journalIdParameter, commentIdParameter);
        }
    
        public virtual int Journal_Comment_Get(Nullable<int> commentId)
        {
            var commentIdParameter = commentId.HasValue ?
                new ObjectParameter("CommentId", commentId) :
                new ObjectParameter("CommentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Comment_Get", commentIdParameter);
        }
    
        public virtual int Journal_Comment_Like(Nullable<int> journalId, Nullable<int> commentId, Nullable<int> userId, string userName)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var commentIdParameter = commentId.HasValue ?
                new ObjectParameter("CommentId", commentId) :
                new ObjectParameter("CommentId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Comment_Like", journalIdParameter, commentIdParameter, userIdParameter, userNameParameter);
        }
    
        public virtual int Journal_Comment_List(Nullable<int> journalId)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Comment_List", journalIdParameter);
        }
    
        public virtual int Journal_Comment_ListByJournalIds(string jounalIds)
        {
            var jounalIdsParameter = jounalIds != null ?
                new ObjectParameter("JounalIds", jounalIds) :
                new ObjectParameter("JounalIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Comment_ListByJournalIds", jounalIdsParameter);
        }
    
        public virtual int Journal_Comment_Save(Nullable<int> journalId, Nullable<int> commentId, Nullable<int> userId, string comment, string commentXML, Nullable<System.DateTime> dateUpdated)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var commentIdParameter = commentId.HasValue ?
                new ObjectParameter("CommentId", commentId) :
                new ObjectParameter("CommentId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var commentXMLParameter = commentXML != null ?
                new ObjectParameter("CommentXML", commentXML) :
                new ObjectParameter("CommentXML", typeof(string));
    
            var dateUpdatedParameter = dateUpdated.HasValue ?
                new ObjectParameter("DateUpdated", dateUpdated) :
                new ObjectParameter("DateUpdated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Comment_Save", journalIdParameter, commentIdParameter, userIdParameter, commentParameter, commentXMLParameter, dateUpdatedParameter);
        }
    
        public virtual int Journal_Comments_ToggleDisable(Nullable<int> portalId, Nullable<int> journalId, Nullable<bool> disabled)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Comments_ToggleDisable", portalIdParameter, journalIdParameter, disabledParameter);
        }
    
        public virtual int Journal_Comments_ToggleHidden(Nullable<int> portalId, Nullable<int> journalId, Nullable<bool> hidden)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var hiddenParameter = hidden.HasValue ?
                new ObjectParameter("Hidden", hidden) :
                new ObjectParameter("Hidden", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Comments_ToggleHidden", portalIdParameter, journalIdParameter, hiddenParameter);
        }
    
        public virtual int Journal_Delete(Nullable<int> journalId, Nullable<int> softDelete)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var softDeleteParameter = softDelete.HasValue ?
                new ObjectParameter("SoftDelete", softDelete) :
                new ObjectParameter("SoftDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Delete", journalIdParameter, softDeleteParameter);
        }
    
        public virtual int Journal_DeleteByGroupId(Nullable<int> portalId, Nullable<int> groupId, Nullable<int> softDelete)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var softDeleteParameter = softDelete.HasValue ?
                new ObjectParameter("SoftDelete", softDelete) :
                new ObjectParameter("SoftDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_DeleteByGroupId", portalIdParameter, groupIdParameter, softDeleteParameter);
        }
    
        public virtual int Journal_DeleteByKey(Nullable<int> portalId, string objectKey, Nullable<int> softDelete)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            var softDeleteParameter = softDelete.HasValue ?
                new ObjectParameter("SoftDelete", softDelete) :
                new ObjectParameter("SoftDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_DeleteByKey", portalIdParameter, objectKeyParameter, softDeleteParameter);
        }
    
        public virtual int Journal_Get(Nullable<int> portalId, Nullable<int> currentUserId, Nullable<int> journalId, Nullable<int> includeAllItems, Nullable<int> isDeleted, Nullable<bool> securityCheck)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var includeAllItemsParameter = includeAllItems.HasValue ?
                new ObjectParameter("IncludeAllItems", includeAllItems) :
                new ObjectParameter("IncludeAllItems", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var securityCheckParameter = securityCheck.HasValue ?
                new ObjectParameter("SecurityCheck", securityCheck) :
                new ObjectParameter("SecurityCheck", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Get", portalIdParameter, currentUserIdParameter, journalIdParameter, includeAllItemsParameter, isDeletedParameter, securityCheckParameter);
        }
    
        public virtual int Journal_GetByKey(Nullable<int> portalId, string objectKey, Nullable<int> includeAllItems, Nullable<int> isDeleted)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            var includeAllItemsParameter = includeAllItems.HasValue ?
                new ObjectParameter("IncludeAllItems", includeAllItems) :
                new ObjectParameter("IncludeAllItems", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_GetByKey", portalIdParameter, objectKeyParameter, includeAllItemsParameter, isDeletedParameter);
        }
    
        public virtual int Journal_GetSearchItems(Nullable<int> portalId, Nullable<int> moduleId, Nullable<System.DateTime> startDate, Nullable<int> startJournalId, Nullable<int> numbersOfResult)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var startJournalIdParameter = startJournalId.HasValue ?
                new ObjectParameter("StartJournalId", startJournalId) :
                new ObjectParameter("StartJournalId", typeof(int));
    
            var numbersOfResultParameter = numbersOfResult.HasValue ?
                new ObjectParameter("NumbersOfResult", numbersOfResult) :
                new ObjectParameter("NumbersOfResult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_GetSearchItems", portalIdParameter, moduleIdParameter, startDateParameter, startJournalIdParameter, numbersOfResultParameter);
        }
    
        public virtual int Journal_GetStatsForGroup(Nullable<int> portalId, Nullable<int> groupId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_GetStatsForGroup", portalIdParameter, groupIdParameter);
        }
    
        public virtual int Journal_Like(Nullable<int> journalId, Nullable<int> userId, string userName)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Like", journalIdParameter, userIdParameter, userNameParameter);
        }
    
        public virtual int Journal_LikeList(Nullable<int> portalId, Nullable<int> journalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_LikeList", portalIdParameter, journalIdParameter);
        }
    
        public virtual int Journal_ListForGroup(Nullable<int> portalId, Nullable<int> moduleId, Nullable<int> currentUserId, Nullable<int> groupId, Nullable<int> rowIndex, Nullable<int> maxRows, Nullable<int> includeAllItems, Nullable<int> isDeleted)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var rowIndexParameter = rowIndex.HasValue ?
                new ObjectParameter("RowIndex", rowIndex) :
                new ObjectParameter("RowIndex", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            var includeAllItemsParameter = includeAllItems.HasValue ?
                new ObjectParameter("IncludeAllItems", includeAllItems) :
                new ObjectParameter("IncludeAllItems", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_ListForGroup", portalIdParameter, moduleIdParameter, currentUserIdParameter, groupIdParameter, rowIndexParameter, maxRowsParameter, includeAllItemsParameter, isDeletedParameter);
        }
    
        public virtual int Journal_ListForProfile(Nullable<int> portalId, Nullable<int> moduleId, Nullable<int> currentUserId, Nullable<int> profileId, Nullable<int> rowIndex, Nullable<int> maxRows, Nullable<int> includeAllItems, Nullable<int> isDeleted)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var rowIndexParameter = rowIndex.HasValue ?
                new ObjectParameter("RowIndex", rowIndex) :
                new ObjectParameter("RowIndex", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            var includeAllItemsParameter = includeAllItems.HasValue ?
                new ObjectParameter("IncludeAllItems", includeAllItems) :
                new ObjectParameter("IncludeAllItems", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_ListForProfile", portalIdParameter, moduleIdParameter, currentUserIdParameter, profileIdParameter, rowIndexParameter, maxRowsParameter, includeAllItemsParameter, isDeletedParameter);
        }
    
        public virtual int Journal_ListForSummary(Nullable<int> portalId, Nullable<int> moduleId, Nullable<int> currentUserId, Nullable<int> rowIndex, Nullable<int> maxRows, Nullable<int> includeAllItems, Nullable<int> isDeleted)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var rowIndexParameter = rowIndex.HasValue ?
                new ObjectParameter("RowIndex", rowIndex) :
                new ObjectParameter("RowIndex", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            var includeAllItemsParameter = includeAllItems.HasValue ?
                new ObjectParameter("IncludeAllItems", includeAllItems) :
                new ObjectParameter("IncludeAllItems", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_ListForSummary", portalIdParameter, moduleIdParameter, currentUserIdParameter, rowIndexParameter, maxRowsParameter, includeAllItemsParameter, isDeletedParameter);
        }
    
        public virtual int Journal_Save(Nullable<int> portalId, Nullable<int> journalId, Nullable<int> journalTypeId, Nullable<int> userId, Nullable<int> profileId, Nullable<int> groupId, string title, string summary, string itemData, string journalXML, string objectKey, Nullable<System.Guid> accessKey, string securitySet, Nullable<bool> commentsDisabled, Nullable<bool> commentsHidden)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var journalTypeIdParameter = journalTypeId.HasValue ?
                new ObjectParameter("JournalTypeId", journalTypeId) :
                new ObjectParameter("JournalTypeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var itemDataParameter = itemData != null ?
                new ObjectParameter("ItemData", itemData) :
                new ObjectParameter("ItemData", typeof(string));
    
            var journalXMLParameter = journalXML != null ?
                new ObjectParameter("JournalXML", journalXML) :
                new ObjectParameter("JournalXML", typeof(string));
    
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            var accessKeyParameter = accessKey.HasValue ?
                new ObjectParameter("AccessKey", accessKey) :
                new ObjectParameter("AccessKey", typeof(System.Guid));
    
            var securitySetParameter = securitySet != null ?
                new ObjectParameter("SecuritySet", securitySet) :
                new ObjectParameter("SecuritySet", typeof(string));
    
            var commentsDisabledParameter = commentsDisabled.HasValue ?
                new ObjectParameter("CommentsDisabled", commentsDisabled) :
                new ObjectParameter("CommentsDisabled", typeof(bool));
    
            var commentsHiddenParameter = commentsHidden.HasValue ?
                new ObjectParameter("CommentsHidden", commentsHidden) :
                new ObjectParameter("CommentsHidden", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Save", portalIdParameter, journalIdParameter, journalTypeIdParameter, userIdParameter, profileIdParameter, groupIdParameter, titleParameter, summaryParameter, itemDataParameter, journalXMLParameter, objectKeyParameter, accessKeyParameter, securitySetParameter, commentsDisabledParameter, commentsHiddenParameter);
        }
    
        [DbFunction("NotaliaOnlineEntities", "Journal_Split")]
        public virtual IQueryable<Journal_Split_Result> Journal_Split(string text, string delimiter)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Journal_Split_Result>("[NotaliaOnlineEntities].[Journal_Split](@text, @delimiter)", textParameter, delimiterParameter);
        }
    
        [DbFunction("NotaliaOnlineEntities", "Journal_SplitText")]
        public virtual IQueryable<Journal_SplitText_Result> Journal_SplitText(string text, string delimiter)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Journal_SplitText_Result>("[NotaliaOnlineEntities].[Journal_SplitText](@text, @delimiter)", textParameter, delimiterParameter);
        }
    
        public virtual int Journal_TypeFilters_Delete(Nullable<int> portalId, Nullable<int> moduleId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_TypeFilters_Delete", portalIdParameter, moduleIdParameter);
        }
    
        public virtual int Journal_TypeFilters_List(Nullable<int> portalId, Nullable<int> moduleId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_TypeFilters_List", portalIdParameter, moduleIdParameter);
        }
    
        public virtual int Journal_TypeFilters_Save(Nullable<int> portalId, Nullable<int> moduleId, Nullable<int> journalTypeId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var journalTypeIdParameter = journalTypeId.HasValue ?
                new ObjectParameter("JournalTypeId", journalTypeId) :
                new ObjectParameter("JournalTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_TypeFilters_Save", portalIdParameter, moduleIdParameter, journalTypeIdParameter);
        }
    
        public virtual int Journal_Types_Delete(Nullable<int> journalTypeId, Nullable<int> portalId)
        {
            var journalTypeIdParameter = journalTypeId.HasValue ?
                new ObjectParameter("JournalTypeId", journalTypeId) :
                new ObjectParameter("JournalTypeId", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Types_Delete", journalTypeIdParameter, portalIdParameter);
        }
    
        public virtual int Journal_Types_Get(string journalType)
        {
            var journalTypeParameter = journalType != null ?
                new ObjectParameter("JournalType", journalType) :
                new ObjectParameter("JournalType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Types_Get", journalTypeParameter);
        }
    
        public virtual int Journal_Types_GetById(Nullable<int> journalTypeId)
        {
            var journalTypeIdParameter = journalTypeId.HasValue ?
                new ObjectParameter("JournalTypeId", journalTypeId) :
                new ObjectParameter("JournalTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Types_GetById", journalTypeIdParameter);
        }
    
        public virtual int Journal_Types_List(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Types_List", portalIdParameter);
        }
    
        public virtual int Journal_Types_Save(Nullable<int> journalTypeId, string journalType, string icon, Nullable<int> portalId, Nullable<bool> isEnabled, Nullable<bool> appliesToProfile, Nullable<bool> appliesToGroup, Nullable<bool> appliesToStream, string options, Nullable<bool> supportsNotify)
        {
            var journalTypeIdParameter = journalTypeId.HasValue ?
                new ObjectParameter("JournalTypeId", journalTypeId) :
                new ObjectParameter("JournalTypeId", typeof(int));
    
            var journalTypeParameter = journalType != null ?
                new ObjectParameter("JournalType", journalType) :
                new ObjectParameter("JournalType", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("icon", icon) :
                new ObjectParameter("icon", typeof(string));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var appliesToProfileParameter = appliesToProfile.HasValue ?
                new ObjectParameter("AppliesToProfile", appliesToProfile) :
                new ObjectParameter("AppliesToProfile", typeof(bool));
    
            var appliesToGroupParameter = appliesToGroup.HasValue ?
                new ObjectParameter("AppliesToGroup", appliesToGroup) :
                new ObjectParameter("AppliesToGroup", typeof(bool));
    
            var appliesToStreamParameter = appliesToStream.HasValue ?
                new ObjectParameter("AppliesToStream", appliesToStream) :
                new ObjectParameter("AppliesToStream", typeof(bool));
    
            var optionsParameter = options != null ?
                new ObjectParameter("options", options) :
                new ObjectParameter("options", typeof(string));
    
            var supportsNotifyParameter = supportsNotify.HasValue ?
                new ObjectParameter("SupportsNotify", supportsNotify) :
                new ObjectParameter("SupportsNotify", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Types_Save", journalTypeIdParameter, journalTypeParameter, iconParameter, portalIdParameter, isEnabledParameter, appliesToProfileParameter, appliesToGroupParameter, appliesToStreamParameter, optionsParameter, supportsNotifyParameter);
        }
    
        public virtual int Journal_Update(Nullable<int> portalId, Nullable<int> journalId, Nullable<int> journalTypeId, Nullable<int> userId, Nullable<int> profileId, Nullable<int> groupId, string title, string summary, string itemData, string journalXML, string objectKey, Nullable<System.Guid> accessKey, string securitySet, Nullable<bool> commentsDisabled, Nullable<bool> commentsHidden)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var journalTypeIdParameter = journalTypeId.HasValue ?
                new ObjectParameter("JournalTypeId", journalTypeId) :
                new ObjectParameter("JournalTypeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var itemDataParameter = itemData != null ?
                new ObjectParameter("ItemData", itemData) :
                new ObjectParameter("ItemData", typeof(string));
    
            var journalXMLParameter = journalXML != null ?
                new ObjectParameter("JournalXML", journalXML) :
                new ObjectParameter("JournalXML", typeof(string));
    
            var objectKeyParameter = objectKey != null ?
                new ObjectParameter("ObjectKey", objectKey) :
                new ObjectParameter("ObjectKey", typeof(string));
    
            var accessKeyParameter = accessKey.HasValue ?
                new ObjectParameter("AccessKey", accessKey) :
                new ObjectParameter("AccessKey", typeof(System.Guid));
    
            var securitySetParameter = securitySet != null ?
                new ObjectParameter("SecuritySet", securitySet) :
                new ObjectParameter("SecuritySet", typeof(string));
    
            var commentsDisabledParameter = commentsDisabled.HasValue ?
                new ObjectParameter("CommentsDisabled", commentsDisabled) :
                new ObjectParameter("CommentsDisabled", typeof(bool));
    
            var commentsHiddenParameter = commentsHidden.HasValue ?
                new ObjectParameter("CommentsHidden", commentsHidden) :
                new ObjectParameter("CommentsHidden", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_Update", portalIdParameter, journalIdParameter, journalTypeIdParameter, userIdParameter, profileIdParameter, groupIdParameter, titleParameter, summaryParameter, itemDataParameter, journalXMLParameter, objectKeyParameter, accessKeyParameter, securitySetParameter, commentsDisabledParameter, commentsHiddenParameter);
        }
    
        public virtual int Journal_UpdateContentItemId(Nullable<int> journalId, Nullable<int> contentItemId)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(int));
    
            var contentItemIdParameter = contentItemId.HasValue ?
                new ObjectParameter("ContentItemId", contentItemId) :
                new ObjectParameter("ContentItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Journal_UpdateContentItemId", journalIdParameter, contentItemIdParameter);
        }
    
        [DbFunction("NotaliaOnlineEntities", "Journal_User_Permissions")]
        public virtual IQueryable<string> Journal_User_Permissions(Nullable<int> portalId, Nullable<int> userId, Nullable<int> registeredRoleId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var registeredRoleIdParameter = registeredRoleId.HasValue ?
                new ObjectParameter("RegisteredRoleId", registeredRoleId) :
                new ObjectParameter("RegisteredRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[NotaliaOnlineEntities].[Journal_User_Permissions](@PortalId, @UserId, @RegisteredRoleId)", portalIdParameter, userIdParameter, registeredRoleIdParameter);
        }
    
        public virtual int LocalizeTab(Nullable<int> tabId, string cultureCode, Nullable<int> lastModifiedByUserID)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LocalizeTab", tabIdParameter, cultureCodeParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int Messaging_GetInbox(Nullable<int> portalID, Nullable<int> userID, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messaging_GetInbox", portalIDParameter, userIDParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int Messaging_GetInboxCount(Nullable<int> portalID, Nullable<int> userID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messaging_GetInboxCount", portalIDParameter, userIDParameter);
        }
    
        public virtual int Messaging_GetMessage(Nullable<long> messageID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messaging_GetMessage", messageIDParameter);
        }
    
        public virtual int Messaging_GetNewMessageCount(Nullable<int> portalID, Nullable<int> userID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messaging_GetNewMessageCount", portalIDParameter, userIDParameter);
        }
    
        public virtual int Messaging_GetNextMessageForDispatch(Nullable<System.Guid> schedulerInstance)
        {
            var schedulerInstanceParameter = schedulerInstance.HasValue ?
                new ObjectParameter("SchedulerInstance", schedulerInstance) :
                new ObjectParameter("SchedulerInstance", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messaging_GetNextMessageForDispatch", schedulerInstanceParameter);
        }
    
        public virtual int Messaging_MarkMessageAsDispatched(Nullable<int> messageId)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messaging_MarkMessageAsDispatched", messageIdParameter);
        }
    
        public virtual int Messaging_Save_Message(Nullable<int> portalID, Nullable<int> fromUserID, Nullable<int> toUserID, Nullable<int> toRoleID, Nullable<int> status, string subject, string body, Nullable<System.DateTime> date, Nullable<System.Guid> conversation, Nullable<long> replyTo, Nullable<bool> allowReply, Nullable<bool> skipPortal)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var fromUserIDParameter = fromUserID.HasValue ?
                new ObjectParameter("FromUserID", fromUserID) :
                new ObjectParameter("FromUserID", typeof(int));
    
            var toUserIDParameter = toUserID.HasValue ?
                new ObjectParameter("ToUserID", toUserID) :
                new ObjectParameter("ToUserID", typeof(int));
    
            var toRoleIDParameter = toRoleID.HasValue ?
                new ObjectParameter("ToRoleID", toRoleID) :
                new ObjectParameter("ToRoleID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var conversationParameter = conversation.HasValue ?
                new ObjectParameter("Conversation", conversation) :
                new ObjectParameter("Conversation", typeof(System.Guid));
    
            var replyToParameter = replyTo.HasValue ?
                new ObjectParameter("ReplyTo", replyTo) :
                new ObjectParameter("ReplyTo", typeof(long));
    
            var allowReplyParameter = allowReply.HasValue ?
                new ObjectParameter("AllowReply", allowReply) :
                new ObjectParameter("AllowReply", typeof(bool));
    
            var skipPortalParameter = skipPortal.HasValue ?
                new ObjectParameter("SkipPortal", skipPortal) :
                new ObjectParameter("SkipPortal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messaging_Save_Message", portalIDParameter, fromUserIDParameter, toUserIDParameter, toRoleIDParameter, statusParameter, subjectParameter, bodyParameter, dateParameter, conversationParameter, replyToParameter, allowReplyParameter, skipPortalParameter);
        }
    
        public virtual int Messaging_UpdateMessage(Nullable<long> messageID, Nullable<int> toUserID, Nullable<int> toRoleID, Nullable<int> status, string subject, string body, Nullable<System.DateTime> date, Nullable<long> replyTo, Nullable<bool> allowReply, Nullable<bool> skipPortal)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(long));
    
            var toUserIDParameter = toUserID.HasValue ?
                new ObjectParameter("ToUserID", toUserID) :
                new ObjectParameter("ToUserID", typeof(int));
    
            var toRoleIDParameter = toRoleID.HasValue ?
                new ObjectParameter("ToRoleID", toRoleID) :
                new ObjectParameter("ToRoleID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var replyToParameter = replyTo.HasValue ?
                new ObjectParameter("ReplyTo", replyTo) :
                new ObjectParameter("ReplyTo", typeof(long));
    
            var allowReplyParameter = allowReply.HasValue ?
                new ObjectParameter("AllowReply", allowReply) :
                new ObjectParameter("AllowReply", typeof(bool));
    
            var skipPortalParameter = skipPortal.HasValue ?
                new ObjectParameter("SkipPortal", skipPortal) :
                new ObjectParameter("SkipPortal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Messaging_UpdateMessage", messageIDParameter, toUserIDParameter, toRoleIDParameter, statusParameter, subjectParameter, bodyParameter, dateParameter, replyToParameter, allowReplyParameter, skipPortalParameter);
        }
    
        public virtual int Mobile_DeletePreviewProfile(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_DeletePreviewProfile", idParameter);
        }
    
        public virtual int Mobile_DeleteRedirection(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_DeleteRedirection", idParameter);
        }
    
        public virtual int Mobile_DeleteRedirectionRule(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_DeleteRedirectionRule", idParameter);
        }
    
        public virtual int Mobile_GetAllRedirections()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_GetAllRedirections");
        }
    
        public virtual int Mobile_GetPreviewProfiles(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_GetPreviewProfiles", portalIdParameter);
        }
    
        public virtual int Mobile_GetRedirectionRules(Nullable<int> redirectionId)
        {
            var redirectionIdParameter = redirectionId.HasValue ?
                new ObjectParameter("RedirectionId", redirectionId) :
                new ObjectParameter("RedirectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_GetRedirectionRules", redirectionIdParameter);
        }
    
        public virtual int Mobile_GetRedirections(Nullable<int> portalId)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_GetRedirections", portalIdParameter);
        }
    
        public virtual int Mobile_SavePreviewProfile(Nullable<int> id, Nullable<int> portalId, string name, Nullable<int> width, Nullable<int> height, string userAgent, Nullable<int> sortOrder, Nullable<int> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var userAgentParameter = userAgent != null ?
                new ObjectParameter("UserAgent", userAgent) :
                new ObjectParameter("UserAgent", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_SavePreviewProfile", idParameter, portalIdParameter, nameParameter, widthParameter, heightParameter, userAgentParameter, sortOrderParameter, userIdParameter);
        }
    
        public virtual int Mobile_SaveRedirection(Nullable<int> id, Nullable<int> portalId, string name, Nullable<int> type, Nullable<int> sortOrder, Nullable<int> sourceTabId, Nullable<bool> includeChildTabs, Nullable<int> targetType, string targetValue, Nullable<bool> enabled, Nullable<int> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var sourceTabIdParameter = sourceTabId.HasValue ?
                new ObjectParameter("SourceTabId", sourceTabId) :
                new ObjectParameter("SourceTabId", typeof(int));
    
            var includeChildTabsParameter = includeChildTabs.HasValue ?
                new ObjectParameter("IncludeChildTabs", includeChildTabs) :
                new ObjectParameter("IncludeChildTabs", typeof(bool));
    
            var targetTypeParameter = targetType.HasValue ?
                new ObjectParameter("TargetType", targetType) :
                new ObjectParameter("TargetType", typeof(int));
    
            var targetValueParameter = targetValue != null ?
                new ObjectParameter("TargetValue", targetValue) :
                new ObjectParameter("TargetValue", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_SaveRedirection", idParameter, portalIdParameter, nameParameter, typeParameter, sortOrderParameter, sourceTabIdParameter, includeChildTabsParameter, targetTypeParameter, targetValueParameter, enabledParameter, userIdParameter);
        }
    
        public virtual int Mobile_SaveRedirectionRule(Nullable<int> id, Nullable<int> redirectionId, string capbility, string expression)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var redirectionIdParameter = redirectionId.HasValue ?
                new ObjectParameter("RedirectionId", redirectionId) :
                new ObjectParameter("RedirectionId", typeof(int));
    
            var capbilityParameter = capbility != null ?
                new ObjectParameter("Capbility", capbility) :
                new ObjectParameter("Capbility", typeof(string));
    
            var expressionParameter = expression != null ?
                new ObjectParameter("Expression", expression) :
                new ObjectParameter("Expression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mobile_SaveRedirectionRule", idParameter, redirectionIdParameter, capbilityParameter, expressionParameter);
        }
    
        public virtual int MoveTabAfter(Nullable<int> tabId, Nullable<int> afterTabId, Nullable<int> lastModifiedByUserID)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var afterTabIdParameter = afterTabId.HasValue ?
                new ObjectParameter("AfterTabId", afterTabId) :
                new ObjectParameter("AfterTabId", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveTabAfter", tabIdParameter, afterTabIdParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int MoveTabBefore(Nullable<int> tabId, Nullable<int> beforeTabId, Nullable<int> lastModifiedByUserID)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var beforeTabIdParameter = beforeTabId.HasValue ?
                new ObjectParameter("BeforeTabId", beforeTabId) :
                new ObjectParameter("BeforeTabId", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveTabBefore", tabIdParameter, beforeTabIdParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int MoveTabModule(Nullable<int> fromTabId, Nullable<int> moduleId, Nullable<int> toTabId, string paneName, Nullable<int> lastModifiedByUserID)
        {
            var fromTabIdParameter = fromTabId.HasValue ?
                new ObjectParameter("FromTabId", fromTabId) :
                new ObjectParameter("FromTabId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var toTabIdParameter = toTabId.HasValue ?
                new ObjectParameter("ToTabId", toTabId) :
                new ObjectParameter("ToTabId", typeof(int));
    
            var paneNameParameter = paneName != null ?
                new ObjectParameter("PaneName", paneName) :
                new ObjectParameter("PaneName", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveTabModule", fromTabIdParameter, moduleIdParameter, toTabIdParameter, paneNameParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int MoveTabToParent(Nullable<int> tabId, Nullable<int> newParentId, Nullable<int> lastModifiedByUserID)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var newParentIdParameter = newParentId.HasValue ?
                new ObjectParameter("NewParentId", newParentId) :
                new ObjectParameter("NewParentId", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveTabToParent", tabIdParameter, newParentIdParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int Notalia_Download_DeleteDownloadEntry(Nullable<int> moduleID, Nullable<int> downloadId)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var downloadIdParameter = downloadId.HasValue ?
                new ObjectParameter("DownloadId", downloadId) :
                new ObjectParameter("DownloadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notalia_Download_DeleteDownloadEntry", moduleIDParameter, downloadIdParameter);
        }
    
        public virtual int Notalia_Download_GetAllEntries(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notalia_Download_GetAllEntries", moduleIdParameter);
        }
    
        public virtual int Notalia_Download_InsertDownloadEntry(Nullable<int> moduleId, string personName, string personPhone, string personEmail, Nullable<System.DateTime> requestedDate)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var personPhoneParameter = personPhone != null ?
                new ObjectParameter("PersonPhone", personPhone) :
                new ObjectParameter("PersonPhone", typeof(string));
    
            var personEmailParameter = personEmail != null ?
                new ObjectParameter("PersonEmail", personEmail) :
                new ObjectParameter("PersonEmail", typeof(string));
    
            var requestedDateParameter = requestedDate.HasValue ?
                new ObjectParameter("RequestedDate", requestedDate) :
                new ObjectParameter("RequestedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notalia_Download_InsertDownloadEntry", moduleIdParameter, personNameParameter, personPhoneParameter, personEmailParameter, requestedDateParameter);
        }
    
        public virtual int Notalia_Slideshow_DeleteSlideEntry(Nullable<int> moduleID, Nullable<int> sliderId)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var sliderIdParameter = sliderId.HasValue ?
                new ObjectParameter("SliderId", sliderId) :
                new ObjectParameter("SliderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notalia_Slideshow_DeleteSlideEntry", moduleIDParameter, sliderIdParameter);
        }
    
        public virtual int Notalia_Slideshow_EditSlideEntry(Nullable<int> moduleId, Nullable<int> sliderId, string sliderImage, string sliderDescription, string alternateText, string link, Nullable<int> sortOrder)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var sliderIdParameter = sliderId.HasValue ?
                new ObjectParameter("SliderId", sliderId) :
                new ObjectParameter("SliderId", typeof(int));
    
            var sliderImageParameter = sliderImage != null ?
                new ObjectParameter("SliderImage", sliderImage) :
                new ObjectParameter("SliderImage", typeof(string));
    
            var sliderDescriptionParameter = sliderDescription != null ?
                new ObjectParameter("SliderDescription", sliderDescription) :
                new ObjectParameter("SliderDescription", typeof(string));
    
            var alternateTextParameter = alternateText != null ?
                new ObjectParameter("AlternateText", alternateText) :
                new ObjectParameter("AlternateText", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notalia_Slideshow_EditSlideEntry", moduleIdParameter, sliderIdParameter, sliderImageParameter, sliderDescriptionParameter, alternateTextParameter, linkParameter, sortOrderParameter);
        }
    
        public virtual int Notalia_Slideshow_GetAllEntries(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notalia_Slideshow_GetAllEntries", moduleIdParameter);
        }
    
        public virtual int Notalia_Slideshow_GetSlide(Nullable<int> moduleId, Nullable<int> sliderId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var sliderIdParameter = sliderId.HasValue ?
                new ObjectParameter("SliderId", sliderId) :
                new ObjectParameter("SliderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notalia_Slideshow_GetSlide", moduleIdParameter, sliderIdParameter);
        }
    
        public virtual int Notalia_Slideshow_InsertSlideEntry(Nullable<int> moduleId, string sliderImage, string sliderDescription, string alternateText, string link, Nullable<int> sortOrder)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var sliderImageParameter = sliderImage != null ?
                new ObjectParameter("SliderImage", sliderImage) :
                new ObjectParameter("SliderImage", typeof(string));
    
            var sliderDescriptionParameter = sliderDescription != null ?
                new ObjectParameter("SliderDescription", sliderDescription) :
                new ObjectParameter("SliderDescription", typeof(string));
    
            var alternateTextParameter = alternateText != null ?
                new ObjectParameter("AlternateText", alternateText) :
                new ObjectParameter("AlternateText", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Notalia_Slideshow_InsertSlideEntry", moduleIdParameter, sliderImageParameter, sliderDescriptionParameter, alternateTextParameter, linkParameter, sortOrderParameter);
        }
    
        public virtual int PublishTab(Nullable<int> tabID)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PublishTab", tabIDParameter);
        }
    
        public virtual int PurgeEventLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurgeEventLog");
        }
    
        public virtual int PurgeScheduleHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurgeScheduleHistory");
        }
    
        public virtual int RegisterAssembly(Nullable<int> packageID, string assemblyName, string version)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var assemblyNameParameter = assemblyName != null ?
                new ObjectParameter("AssemblyName", assemblyName) :
                new ObjectParameter("AssemblyName", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterAssembly", packageIDParameter, assemblyNameParameter, versionParameter);
        }
    
        public virtual int RemovePortalLocalization(Nullable<int> portalId, string cultureCode)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemovePortalLocalization", portalIdParameter, cultureCodeParameter);
        }
    
        public virtual int RemoveTermsFromContent(Nullable<int> contentItemID)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveTermsFromContent", contentItemIDParameter);
        }
    
        public virtual int RemoveUser(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveUser", userIDParameter, portalIDParameter);
        }
    
        public virtual int ResetFilePublishedVersion(Nullable<int> fileId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetFilePublishedVersion", fileIdParameter);
        }
    
        public virtual int RestoreTabModule(Nullable<int> tabId, Nullable<int> moduleId)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreTabModule", tabIdParameter, moduleIdParameter);
        }
    
        public virtual int RestoreUser(Nullable<int> userID, Nullable<int> portalID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreUser", userIDParameter, portalIDParameter);
        }
    
        public virtual int SaveCoreAuditTypes(string logTypeKey, string logTypeFriendlyName, string logTypeOwner, string logTypeCSSClass, Nullable<bool> loggingIsActive, Nullable<int> keepMostRecent, Nullable<bool> emailNotificationIsActive)
        {
            var logTypeKeyParameter = logTypeKey != null ?
                new ObjectParameter("LogTypeKey", logTypeKey) :
                new ObjectParameter("LogTypeKey", typeof(string));
    
            var logTypeFriendlyNameParameter = logTypeFriendlyName != null ?
                new ObjectParameter("LogTypeFriendlyName", logTypeFriendlyName) :
                new ObjectParameter("LogTypeFriendlyName", typeof(string));
    
            var logTypeOwnerParameter = logTypeOwner != null ?
                new ObjectParameter("LogTypeOwner", logTypeOwner) :
                new ObjectParameter("LogTypeOwner", typeof(string));
    
            var logTypeCSSClassParameter = logTypeCSSClass != null ?
                new ObjectParameter("LogTypeCSSClass", logTypeCSSClass) :
                new ObjectParameter("LogTypeCSSClass", typeof(string));
    
            var loggingIsActiveParameter = loggingIsActive.HasValue ?
                new ObjectParameter("LoggingIsActive", loggingIsActive) :
                new ObjectParameter("LoggingIsActive", typeof(bool));
    
            var keepMostRecentParameter = keepMostRecent.HasValue ?
                new ObjectParameter("KeepMostRecent", keepMostRecent) :
                new ObjectParameter("KeepMostRecent", typeof(int));
    
            var emailNotificationIsActiveParameter = emailNotificationIsActive.HasValue ?
                new ObjectParameter("EmailNotificationIsActive", emailNotificationIsActive) :
                new ObjectParameter("EmailNotificationIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveCoreAuditTypes", logTypeKeyParameter, logTypeFriendlyNameParameter, logTypeOwnerParameter, logTypeCSSClassParameter, loggingIsActiveParameter, keepMostRecentParameter, emailNotificationIsActiveParameter);
        }
    
        public virtual int SaveExtensionUrlProviderSetting(Nullable<int> extensionUrlProviderID, Nullable<int> portalId, string settingName, string settingValue)
        {
            var extensionUrlProviderIDParameter = extensionUrlProviderID.HasValue ?
                new ObjectParameter("ExtensionUrlProviderID", extensionUrlProviderID) :
                new ObjectParameter("ExtensionUrlProviderID", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveExtensionUrlProviderSetting", extensionUrlProviderIDParameter, portalIdParameter, settingNameParameter, settingValueParameter);
        }
    
        public virtual int SaveJavaScriptLibrary(Nullable<int> javaScriptLibraryID, Nullable<int> packageID, string libraryName, string version, string fileName, string objectName, Nullable<int> preferredScriptLocation, string cDNPath)
        {
            var javaScriptLibraryIDParameter = javaScriptLibraryID.HasValue ?
                new ObjectParameter("JavaScriptLibraryID", javaScriptLibraryID) :
                new ObjectParameter("JavaScriptLibraryID", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var libraryNameParameter = libraryName != null ?
                new ObjectParameter("LibraryName", libraryName) :
                new ObjectParameter("LibraryName", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var objectNameParameter = objectName != null ?
                new ObjectParameter("ObjectName", objectName) :
                new ObjectParameter("ObjectName", typeof(string));
    
            var preferredScriptLocationParameter = preferredScriptLocation.HasValue ?
                new ObjectParameter("PreferredScriptLocation", preferredScriptLocation) :
                new ObjectParameter("PreferredScriptLocation", typeof(int));
    
            var cDNPathParameter = cDNPath != null ?
                new ObjectParameter("CDNPath", cDNPath) :
                new ObjectParameter("CDNPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveJavaScriptLibrary", javaScriptLibraryIDParameter, packageIDParameter, libraryNameParameter, versionParameter, fileNameParameter, objectNameParameter, preferredScriptLocationParameter, cDNPathParameter);
        }
    
        public virtual int SavePackageDependency(Nullable<int> packageDependencyID, Nullable<int> packageID, string packageName, string version)
        {
            var packageDependencyIDParameter = packageDependencyID.HasValue ?
                new ObjectParameter("PackageDependencyID", packageDependencyID) :
                new ObjectParameter("PackageDependencyID", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SavePackageDependency", packageDependencyIDParameter, packageIDParameter, packageNameParameter, versionParameter);
        }
    
        public virtual int SaveRelationship(Nullable<int> relationshipID, Nullable<int> relationshipTypeID, string name, string description, Nullable<int> userID, Nullable<int> portalID, Nullable<int> defaultResponse, Nullable<int> createUpdateUserID)
        {
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(int));
    
            var relationshipTypeIDParameter = relationshipTypeID.HasValue ?
                new ObjectParameter("RelationshipTypeID", relationshipTypeID) :
                new ObjectParameter("RelationshipTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var defaultResponseParameter = defaultResponse.HasValue ?
                new ObjectParameter("DefaultResponse", defaultResponse) :
                new ObjectParameter("DefaultResponse", typeof(int));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveRelationship", relationshipIDParameter, relationshipTypeIDParameter, nameParameter, descriptionParameter, userIDParameter, portalIDParameter, defaultResponseParameter, createUpdateUserIDParameter);
        }
    
        public virtual int SaveRelationshipType(Nullable<int> relationshipTypeID, Nullable<int> direction, string name, string description, Nullable<int> userID)
        {
            var relationshipTypeIDParameter = relationshipTypeID.HasValue ?
                new ObjectParameter("RelationshipTypeID", relationshipTypeID) :
                new ObjectParameter("RelationshipTypeID", typeof(int));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveRelationshipType", relationshipTypeIDParameter, directionParameter, nameParameter, descriptionParameter, userIDParameter);
        }
    
        public virtual int SaveTabUrl(Nullable<int> tabID, Nullable<int> seqNum, Nullable<int> portalAliasID, Nullable<int> portalAliasUsage, string url, string queryString, string cultureCode, string httpStatus, Nullable<bool> isSystem, Nullable<int> modifiedByUserID)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var portalAliasIDParameter = portalAliasID.HasValue ?
                new ObjectParameter("PortalAliasID", portalAliasID) :
                new ObjectParameter("PortalAliasID", typeof(int));
    
            var portalAliasUsageParameter = portalAliasUsage.HasValue ?
                new ObjectParameter("PortalAliasUsage", portalAliasUsage) :
                new ObjectParameter("PortalAliasUsage", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var queryStringParameter = queryString != null ?
                new ObjectParameter("QueryString", queryString) :
                new ObjectParameter("QueryString", typeof(string));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var httpStatusParameter = httpStatus != null ?
                new ObjectParameter("HttpStatus", httpStatus) :
                new ObjectParameter("HttpStatus", typeof(string));
    
            var isSystemParameter = isSystem.HasValue ?
                new ObjectParameter("IsSystem", isSystem) :
                new ObjectParameter("IsSystem", typeof(bool));
    
            var modifiedByUserIDParameter = modifiedByUserID.HasValue ?
                new ObjectParameter("ModifiedByUserID", modifiedByUserID) :
                new ObjectParameter("ModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveTabUrl", tabIDParameter, seqNumParameter, portalAliasIDParameter, portalAliasUsageParameter, urlParameter, queryStringParameter, cultureCodeParameter, httpStatusParameter, isSystemParameter, modifiedByUserIDParameter);
        }
    
        public virtual int SaveTabVersion(Nullable<int> id, Nullable<int> tabId, Nullable<System.DateTime> timeStamp, Nullable<int> version, Nullable<bool> isPublished, Nullable<int> createdByUserID, Nullable<int> lastModifiedByUserID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("TimeStamp", timeStamp) :
                new ObjectParameter("TimeStamp", typeof(System.DateTime));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveTabVersion", idParameter, tabIdParameter, timeStampParameter, versionParameter, isPublishedParameter, createdByUserIDParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int SaveTabVersionDetail(Nullable<int> id, Nullable<int> tabVersionId, Nullable<int> moduleId, Nullable<int> moduleVersion, string paneName, Nullable<int> moduleOrder, Nullable<int> action, Nullable<int> createdByUserID, Nullable<int> lastModifiedByUserID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var tabVersionIdParameter = tabVersionId.HasValue ?
                new ObjectParameter("TabVersionId", tabVersionId) :
                new ObjectParameter("TabVersionId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var moduleVersionParameter = moduleVersion.HasValue ?
                new ObjectParameter("ModuleVersion", moduleVersion) :
                new ObjectParameter("ModuleVersion", typeof(int));
    
            var paneNameParameter = paneName != null ?
                new ObjectParameter("PaneName", paneName) :
                new ObjectParameter("PaneName", typeof(string));
    
            var moduleOrderParameter = moduleOrder.HasValue ?
                new ObjectParameter("ModuleOrder", moduleOrder) :
                new ObjectParameter("ModuleOrder", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveTabVersionDetail", idParameter, tabVersionIdParameter, moduleIdParameter, moduleVersionParameter, paneNameParameter, moduleOrderParameter, actionParameter, createdByUserIDParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int SaveUserRelationship(Nullable<int> userRelationshipID, Nullable<int> userID, Nullable<int> relatedUserID, Nullable<int> relationshipID, Nullable<int> status, Nullable<int> createUpdateUserID)
        {
            var userRelationshipIDParameter = userRelationshipID.HasValue ?
                new ObjectParameter("UserRelationshipID", userRelationshipID) :
                new ObjectParameter("UserRelationshipID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var relatedUserIDParameter = relatedUserID.HasValue ?
                new ObjectParameter("RelatedUserID", relatedUserID) :
                new ObjectParameter("RelatedUserID", typeof(int));
    
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUserRelationship", userRelationshipIDParameter, userIDParameter, relatedUserIDParameter, relationshipIDParameter, statusParameter, createUpdateUserIDParameter);
        }
    
        public virtual int SaveUserRelationshipPreference(Nullable<int> preferenceID, Nullable<int> userID, Nullable<int> relationshipID, Nullable<int> defaultResponse, Nullable<int> createUpdateUserID)
        {
            var preferenceIDParameter = preferenceID.HasValue ?
                new ObjectParameter("PreferenceID", preferenceID) :
                new ObjectParameter("PreferenceID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(int));
    
            var defaultResponseParameter = defaultResponse.HasValue ?
                new ObjectParameter("DefaultResponse", defaultResponse) :
                new ObjectParameter("DefaultResponse", typeof(int));
    
            var createUpdateUserIDParameter = createUpdateUserID.HasValue ?
                new ObjectParameter("CreateUpdateUserID", createUpdateUserID) :
                new ObjectParameter("CreateUpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUserRelationshipPreference", preferenceIDParameter, userIDParameter, relationshipIDParameter, defaultResponseParameter, createUpdateUserIDParameter);
        }
    
        public virtual int SearchAllTables(string searchStr)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchAllTables", searchStrParameter);
        }
    
        public virtual int SearchDeletedItems_Add(string document)
        {
            var documentParameter = document != null ?
                new ObjectParameter("document", document) :
                new ObjectParameter("document", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchDeletedItems_Add", documentParameter);
        }
    
        public virtual int SearchDeletedItems_DeleteProcessed(Nullable<System.DateTime> cutoffTime)
        {
            var cutoffTimeParameter = cutoffTime.HasValue ?
                new ObjectParameter("CutoffTime", cutoffTime) :
                new ObjectParameter("CutoffTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchDeletedItems_DeleteProcessed", cutoffTimeParameter);
        }
    
        public virtual int SearchDeletedItems_Select(Nullable<System.DateTime> cutoffTime)
        {
            var cutoffTimeParameter = cutoffTime.HasValue ?
                new ObjectParameter("CutoffTime", cutoffTime) :
                new ObjectParameter("CutoffTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchDeletedItems_Select", cutoffTimeParameter);
        }
    
        public virtual int SearchProfilePropertyValues(Nullable<int> portalId, string propertyName, string searchString)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchProfilePropertyValues", portalIdParameter, propertyNameParameter, searchStringParameter);
        }
    
        public virtual int SearchTypes_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchTypes_GetAll");
        }
    
        public virtual int SetEventMessageComplete(Nullable<int> eventMessageID)
        {
            var eventMessageIDParameter = eventMessageID.HasValue ?
                new ObjectParameter("EventMessageID", eventMessageID) :
                new ObjectParameter("EventMessageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetEventMessageComplete", eventMessageIDParameter);
        }
    
        public virtual int SetPublishedVersion(Nullable<int> fileId, Nullable<int> newPublishedVersion)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var newPublishedVersionParameter = newPublishedVersion.HasValue ?
                new ObjectParameter("NewPublishedVersion", newPublishedVersion) :
                new ObjectParameter("NewPublishedVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetPublishedVersion", fileIdParameter, newPublishedVersionParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        [DbFunction("NotaliaOnlineEntities", "SplitDelimitedIDs")]
        public virtual IQueryable<Nullable<int>> SplitDelimitedIDs(string recordIDList, string delimiter)
        {
            var recordIDListParameter = recordIDList != null ?
                new ObjectParameter("RecordIDList", recordIDList) :
                new ObjectParameter("RecordIDList", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[NotaliaOnlineEntities].[SplitDelimitedIDs](@RecordIDList, @Delimiter)", recordIDListParameter, delimiterParameter);
        }
    
        public virtual int UnRegisterAssembly(Nullable<int> packageID, string assemblyName)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var assemblyNameParameter = assemblyName != null ?
                new ObjectParameter("AssemblyName", assemblyName) :
                new ObjectParameter("AssemblyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnRegisterAssembly", packageIDParameter, assemblyNameParameter);
        }
    
        public virtual int UpdateAffiliate(Nullable<int> affiliateId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<double> cPC, Nullable<double> cPA)
        {
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var cPCParameter = cPC.HasValue ?
                new ObjectParameter("CPC", cPC) :
                new ObjectParameter("CPC", typeof(double));
    
            var cPAParameter = cPA.HasValue ?
                new ObjectParameter("CPA", cPA) :
                new ObjectParameter("CPA", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAffiliate", affiliateIdParameter, startDateParameter, endDateParameter, cPCParameter, cPAParameter);
        }
    
        public virtual int UpdateAffiliateStats(Nullable<int> affiliateId, Nullable<int> clicks, Nullable<int> acquisitions)
        {
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            var clicksParameter = clicks.HasValue ?
                new ObjectParameter("Clicks", clicks) :
                new ObjectParameter("Clicks", typeof(int));
    
            var acquisitionsParameter = acquisitions.HasValue ?
                new ObjectParameter("Acquisitions", acquisitions) :
                new ObjectParameter("Acquisitions", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAffiliateStats", affiliateIdParameter, clicksParameter, acquisitionsParameter);
        }
    
        public virtual int UpdateAnonymousUser(string userID, Nullable<int> portalID, Nullable<int> tabID, Nullable<System.DateTime> lastActiveDate)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var lastActiveDateParameter = lastActiveDate.HasValue ?
                new ObjectParameter("LastActiveDate", lastActiveDate) :
                new ObjectParameter("LastActiveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAnonymousUser", userIDParameter, portalIDParameter, tabIDParameter, lastActiveDateParameter);
        }
    
        public virtual int UpdateAuthentication(Nullable<int> authenticationID, Nullable<int> packageID, string authenticationType, Nullable<bool> isEnabled, string settingsControlSrc, string loginControlSrc, string logoffControlSrc, Nullable<int> lastModifiedByUserID)
        {
            var authenticationIDParameter = authenticationID.HasValue ?
                new ObjectParameter("AuthenticationID", authenticationID) :
                new ObjectParameter("AuthenticationID", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var authenticationTypeParameter = authenticationType != null ?
                new ObjectParameter("AuthenticationType", authenticationType) :
                new ObjectParameter("AuthenticationType", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var settingsControlSrcParameter = settingsControlSrc != null ?
                new ObjectParameter("SettingsControlSrc", settingsControlSrc) :
                new ObjectParameter("SettingsControlSrc", typeof(string));
    
            var loginControlSrcParameter = loginControlSrc != null ?
                new ObjectParameter("LoginControlSrc", loginControlSrc) :
                new ObjectParameter("LoginControlSrc", typeof(string));
    
            var logoffControlSrcParameter = logoffControlSrc != null ?
                new ObjectParameter("LogoffControlSrc", logoffControlSrc) :
                new ObjectParameter("LogoffControlSrc", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAuthentication", authenticationIDParameter, packageIDParameter, authenticationTypeParameter, isEnabledParameter, settingsControlSrcParameter, loginControlSrcParameter, logoffControlSrcParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateBanner(Nullable<int> bannerId, string bannerName, string imageFile, string uRL, Nullable<int> impressions, Nullable<double> cPM, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userName, Nullable<int> bannerTypeId, string description, string groupName, Nullable<bool> criteria, Nullable<int> width, Nullable<int> height)
        {
            var bannerIdParameter = bannerId.HasValue ?
                new ObjectParameter("BannerId", bannerId) :
                new ObjectParameter("BannerId", typeof(int));
    
            var bannerNameParameter = bannerName != null ?
                new ObjectParameter("BannerName", bannerName) :
                new ObjectParameter("BannerName", typeof(string));
    
            var imageFileParameter = imageFile != null ?
                new ObjectParameter("ImageFile", imageFile) :
                new ObjectParameter("ImageFile", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var impressionsParameter = impressions.HasValue ?
                new ObjectParameter("Impressions", impressions) :
                new ObjectParameter("Impressions", typeof(int));
    
            var cPMParameter = cPM.HasValue ?
                new ObjectParameter("CPM", cPM) :
                new ObjectParameter("CPM", typeof(double));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var bannerTypeIdParameter = bannerTypeId.HasValue ?
                new ObjectParameter("BannerTypeId", bannerTypeId) :
                new ObjectParameter("BannerTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var criteriaParameter = criteria.HasValue ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(bool));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBanner", bannerIdParameter, bannerNameParameter, imageFileParameter, uRLParameter, impressionsParameter, cPMParameter, startDateParameter, endDateParameter, userNameParameter, bannerTypeIdParameter, descriptionParameter, groupNameParameter, criteriaParameter, widthParameter, heightParameter);
        }
    
        public virtual int UpdateBannerClickThrough(Nullable<int> bannerId, Nullable<int> vendorId)
        {
            var bannerIdParameter = bannerId.HasValue ?
                new ObjectParameter("BannerId", bannerId) :
                new ObjectParameter("BannerId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBannerClickThrough", bannerIdParameter, vendorIdParameter);
        }
    
        public virtual int UpdateBannerViews(Nullable<int> bannerId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var bannerIdParameter = bannerId.HasValue ?
                new ObjectParameter("BannerId", bannerId) :
                new ObjectParameter("BannerId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBannerViews", bannerIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int UpdateContentItem(Nullable<int> contentItemID, string content, Nullable<int> contentTypeID, Nullable<int> tabID, Nullable<int> moduleID, string contentKey, Nullable<bool> indexed, Nullable<int> lastModifiedByUserID, Nullable<int> stateID)
        {
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var contentTypeIDParameter = contentTypeID.HasValue ?
                new ObjectParameter("ContentTypeID", contentTypeID) :
                new ObjectParameter("ContentTypeID", typeof(int));
    
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var contentKeyParameter = contentKey != null ?
                new ObjectParameter("ContentKey", contentKey) :
                new ObjectParameter("ContentKey", typeof(string));
    
            var indexedParameter = indexed.HasValue ?
                new ObjectParameter("Indexed", indexed) :
                new ObjectParameter("Indexed", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContentItem", contentItemIDParameter, contentParameter, contentTypeIDParameter, tabIDParameter, moduleIDParameter, contentKeyParameter, indexedParameter, lastModifiedByUserIDParameter, stateIDParameter);
        }
    
        public virtual int UpdateContentType(Nullable<int> contentTypeId, string contentType)
        {
            var contentTypeIdParameter = contentTypeId.HasValue ?
                new ObjectParameter("ContentTypeId", contentTypeId) :
                new ObjectParameter("ContentTypeId", typeof(int));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContentType", contentTypeIdParameter, contentTypeParameter);
        }
    
        public virtual int UpdateContentWorkflow(Nullable<int> workflowID, string workflowName, string description, Nullable<bool> isDeleted, Nullable<bool> startAfterCreating, Nullable<bool> startAfterEditing, Nullable<bool> dispositionEnabled)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var workflowNameParameter = workflowName != null ?
                new ObjectParameter("WorkflowName", workflowName) :
                new ObjectParameter("WorkflowName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var startAfterCreatingParameter = startAfterCreating.HasValue ?
                new ObjectParameter("StartAfterCreating", startAfterCreating) :
                new ObjectParameter("StartAfterCreating", typeof(bool));
    
            var startAfterEditingParameter = startAfterEditing.HasValue ?
                new ObjectParameter("StartAfterEditing", startAfterEditing) :
                new ObjectParameter("StartAfterEditing", typeof(bool));
    
            var dispositionEnabledParameter = dispositionEnabled.HasValue ?
                new ObjectParameter("DispositionEnabled", dispositionEnabled) :
                new ObjectParameter("DispositionEnabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContentWorkflow", workflowIDParameter, workflowNameParameter, descriptionParameter, isDeletedParameter, startAfterCreatingParameter, startAfterEditingParameter, dispositionEnabledParameter);
        }
    
        public virtual int UpdateContentWorkflowState(Nullable<int> stateID, string stateName, Nullable<int> order, Nullable<bool> isActive, Nullable<bool> sendEmail, Nullable<bool> sendMessage, Nullable<bool> isDisposalState, string onCompleteMessageSubject, string onCompleteMessageBody, string onDiscardMessageSubject, string onDiscardMessageBody)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var sendEmailParameter = sendEmail.HasValue ?
                new ObjectParameter("SendEmail", sendEmail) :
                new ObjectParameter("SendEmail", typeof(bool));
    
            var sendMessageParameter = sendMessage.HasValue ?
                new ObjectParameter("SendMessage", sendMessage) :
                new ObjectParameter("SendMessage", typeof(bool));
    
            var isDisposalStateParameter = isDisposalState.HasValue ?
                new ObjectParameter("IsDisposalState", isDisposalState) :
                new ObjectParameter("IsDisposalState", typeof(bool));
    
            var onCompleteMessageSubjectParameter = onCompleteMessageSubject != null ?
                new ObjectParameter("OnCompleteMessageSubject", onCompleteMessageSubject) :
                new ObjectParameter("OnCompleteMessageSubject", typeof(string));
    
            var onCompleteMessageBodyParameter = onCompleteMessageBody != null ?
                new ObjectParameter("OnCompleteMessageBody", onCompleteMessageBody) :
                new ObjectParameter("OnCompleteMessageBody", typeof(string));
    
            var onDiscardMessageSubjectParameter = onDiscardMessageSubject != null ?
                new ObjectParameter("OnDiscardMessageSubject", onDiscardMessageSubject) :
                new ObjectParameter("OnDiscardMessageSubject", typeof(string));
    
            var onDiscardMessageBodyParameter = onDiscardMessageBody != null ?
                new ObjectParameter("OnDiscardMessageBody", onDiscardMessageBody) :
                new ObjectParameter("OnDiscardMessageBody", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContentWorkflowState", stateIDParameter, stateNameParameter, orderParameter, isActiveParameter, sendEmailParameter, sendMessageParameter, isDisposalStateParameter, onCompleteMessageSubjectParameter, onCompleteMessageBodyParameter, onDiscardMessageSubjectParameter, onDiscardMessageBodyParameter);
        }
    
        public virtual int UpdateContentWorkflowStatePermission(Nullable<int> workflowStatePermissionID, Nullable<int> stateID, Nullable<int> permissionID, Nullable<int> roleID, Nullable<bool> allowAccess, Nullable<int> userID, Nullable<int> lastModifiedByUserID)
        {
            var workflowStatePermissionIDParameter = workflowStatePermissionID.HasValue ?
                new ObjectParameter("WorkflowStatePermissionID", workflowStatePermissionID) :
                new ObjectParameter("WorkflowStatePermissionID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContentWorkflowStatePermission", workflowStatePermissionIDParameter, stateIDParameter, permissionIDParameter, roleIDParameter, allowAccessParameter, userIDParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateDatabaseVersion(Nullable<int> major, Nullable<int> minor, Nullable<int> build)
        {
            var majorParameter = major.HasValue ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(int));
    
            var minorParameter = minor.HasValue ?
                new ObjectParameter("Minor", minor) :
                new ObjectParameter("Minor", typeof(int));
    
            var buildParameter = build.HasValue ?
                new ObjectParameter("Build", build) :
                new ObjectParameter("Build", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDatabaseVersion", majorParameter, minorParameter, buildParameter);
        }
    
        public virtual int UpdateDatabaseVersionAndName(Nullable<int> major, Nullable<int> minor, Nullable<int> build, string name)
        {
            var majorParameter = major.HasValue ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(int));
    
            var minorParameter = minor.HasValue ?
                new ObjectParameter("Minor", minor) :
                new ObjectParameter("Minor", typeof(int));
    
            var buildParameter = build.HasValue ?
                new ObjectParameter("Build", build) :
                new ObjectParameter("Build", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDatabaseVersionAndName", majorParameter, minorParameter, buildParameter, nameParameter);
        }
    
        public virtual int UpdateDesktopModule(Nullable<int> desktopModuleId, Nullable<int> packageID, string moduleName, string folderName, string friendlyName, string description, string version, Nullable<bool> isPremium, Nullable<bool> isAdmin, string businessController, Nullable<int> supportedFeatures, Nullable<int> shareable, string compatibleVersions, string dependencies, string permissions, Nullable<int> contentItemId, Nullable<int> lastModifiedByUserID)
        {
            var desktopModuleIdParameter = desktopModuleId.HasValue ?
                new ObjectParameter("DesktopModuleId", desktopModuleId) :
                new ObjectParameter("DesktopModuleId", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var folderNameParameter = folderName != null ?
                new ObjectParameter("FolderName", folderName) :
                new ObjectParameter("FolderName", typeof(string));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var isPremiumParameter = isPremium.HasValue ?
                new ObjectParameter("IsPremium", isPremium) :
                new ObjectParameter("IsPremium", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var businessControllerParameter = businessController != null ?
                new ObjectParameter("BusinessController", businessController) :
                new ObjectParameter("BusinessController", typeof(string));
    
            var supportedFeaturesParameter = supportedFeatures.HasValue ?
                new ObjectParameter("SupportedFeatures", supportedFeatures) :
                new ObjectParameter("SupportedFeatures", typeof(int));
    
            var shareableParameter = shareable.HasValue ?
                new ObjectParameter("Shareable", shareable) :
                new ObjectParameter("Shareable", typeof(int));
    
            var compatibleVersionsParameter = compatibleVersions != null ?
                new ObjectParameter("CompatibleVersions", compatibleVersions) :
                new ObjectParameter("CompatibleVersions", typeof(string));
    
            var dependenciesParameter = dependencies != null ?
                new ObjectParameter("Dependencies", dependencies) :
                new ObjectParameter("Dependencies", typeof(string));
    
            var permissionsParameter = permissions != null ?
                new ObjectParameter("Permissions", permissions) :
                new ObjectParameter("Permissions", typeof(string));
    
            var contentItemIdParameter = contentItemId.HasValue ?
                new ObjectParameter("ContentItemId", contentItemId) :
                new ObjectParameter("ContentItemId", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDesktopModule", desktopModuleIdParameter, packageIDParameter, moduleNameParameter, folderNameParameter, friendlyNameParameter, descriptionParameter, versionParameter, isPremiumParameter, isAdminParameter, businessControllerParameter, supportedFeaturesParameter, shareableParameter, compatibleVersionsParameter, dependenciesParameter, permissionsParameter, contentItemIdParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateDesktopModulePermission(Nullable<int> desktopModulePermissionId, Nullable<int> portalDesktopModuleId, Nullable<int> permissionId, Nullable<int> roleId, Nullable<bool> allowAccess, Nullable<int> userId, Nullable<int> lastModifiedByUserId)
        {
            var desktopModulePermissionIdParameter = desktopModulePermissionId.HasValue ?
                new ObjectParameter("DesktopModulePermissionId", desktopModulePermissionId) :
                new ObjectParameter("DesktopModulePermissionId", typeof(int));
    
            var portalDesktopModuleIdParameter = portalDesktopModuleId.HasValue ?
                new ObjectParameter("PortalDesktopModuleId", portalDesktopModuleId) :
                new ObjectParameter("PortalDesktopModuleId", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lastModifiedByUserIdParameter = lastModifiedByUserId.HasValue ?
                new ObjectParameter("LastModifiedByUserId", lastModifiedByUserId) :
                new ObjectParameter("LastModifiedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDesktopModulePermission", desktopModulePermissionIdParameter, portalDesktopModuleIdParameter, permissionIdParameter, roleIdParameter, allowAccessParameter, userIdParameter, lastModifiedByUserIdParameter);
        }
    
        public virtual int UpdateEventLogConfig(Nullable<int> iD, string logTypeKey, Nullable<int> logTypePortalID, Nullable<bool> loggingIsActive, Nullable<int> keepMostRecent, Nullable<bool> emailNotificationIsActive, Nullable<int> notificationThreshold, Nullable<int> notificationThresholdTime, Nullable<int> notificationThresholdTimeType, string mailFromAddress, string mailToAddress)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var logTypeKeyParameter = logTypeKey != null ?
                new ObjectParameter("LogTypeKey", logTypeKey) :
                new ObjectParameter("LogTypeKey", typeof(string));
    
            var logTypePortalIDParameter = logTypePortalID.HasValue ?
                new ObjectParameter("LogTypePortalID", logTypePortalID) :
                new ObjectParameter("LogTypePortalID", typeof(int));
    
            var loggingIsActiveParameter = loggingIsActive.HasValue ?
                new ObjectParameter("LoggingIsActive", loggingIsActive) :
                new ObjectParameter("LoggingIsActive", typeof(bool));
    
            var keepMostRecentParameter = keepMostRecent.HasValue ?
                new ObjectParameter("KeepMostRecent", keepMostRecent) :
                new ObjectParameter("KeepMostRecent", typeof(int));
    
            var emailNotificationIsActiveParameter = emailNotificationIsActive.HasValue ?
                new ObjectParameter("EmailNotificationIsActive", emailNotificationIsActive) :
                new ObjectParameter("EmailNotificationIsActive", typeof(bool));
    
            var notificationThresholdParameter = notificationThreshold.HasValue ?
                new ObjectParameter("NotificationThreshold", notificationThreshold) :
                new ObjectParameter("NotificationThreshold", typeof(int));
    
            var notificationThresholdTimeParameter = notificationThresholdTime.HasValue ?
                new ObjectParameter("NotificationThresholdTime", notificationThresholdTime) :
                new ObjectParameter("NotificationThresholdTime", typeof(int));
    
            var notificationThresholdTimeTypeParameter = notificationThresholdTimeType.HasValue ?
                new ObjectParameter("NotificationThresholdTimeType", notificationThresholdTimeType) :
                new ObjectParameter("NotificationThresholdTimeType", typeof(int));
    
            var mailFromAddressParameter = mailFromAddress != null ?
                new ObjectParameter("MailFromAddress", mailFromAddress) :
                new ObjectParameter("MailFromAddress", typeof(string));
    
            var mailToAddressParameter = mailToAddress != null ?
                new ObjectParameter("MailToAddress", mailToAddress) :
                new ObjectParameter("MailToAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEventLogConfig", iDParameter, logTypeKeyParameter, logTypePortalIDParameter, loggingIsActiveParameter, keepMostRecentParameter, emailNotificationIsActiveParameter, notificationThresholdParameter, notificationThresholdTimeParameter, notificationThresholdTimeTypeParameter, mailFromAddressParameter, mailToAddressParameter);
        }
    
        public virtual int UpdateEventLogPendingNotif(Nullable<int> logConfigID)
        {
            var logConfigIDParameter = logConfigID.HasValue ?
                new ObjectParameter("LogConfigID", logConfigID) :
                new ObjectParameter("LogConfigID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEventLogPendingNotif", logConfigIDParameter);
        }
    
        public virtual int UpdateEventLogType(string logTypeKey, string logTypeFriendlyName, string logTypeDescription, string logTypeOwner, string logTypeCSSClass)
        {
            var logTypeKeyParameter = logTypeKey != null ?
                new ObjectParameter("LogTypeKey", logTypeKey) :
                new ObjectParameter("LogTypeKey", typeof(string));
    
            var logTypeFriendlyNameParameter = logTypeFriendlyName != null ?
                new ObjectParameter("LogTypeFriendlyName", logTypeFriendlyName) :
                new ObjectParameter("LogTypeFriendlyName", typeof(string));
    
            var logTypeDescriptionParameter = logTypeDescription != null ?
                new ObjectParameter("LogTypeDescription", logTypeDescription) :
                new ObjectParameter("LogTypeDescription", typeof(string));
    
            var logTypeOwnerParameter = logTypeOwner != null ?
                new ObjectParameter("LogTypeOwner", logTypeOwner) :
                new ObjectParameter("LogTypeOwner", typeof(string));
    
            var logTypeCSSClassParameter = logTypeCSSClass != null ?
                new ObjectParameter("LogTypeCSSClass", logTypeCSSClass) :
                new ObjectParameter("LogTypeCSSClass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEventLogType", logTypeKeyParameter, logTypeFriendlyNameParameter, logTypeDescriptionParameter, logTypeOwnerParameter, logTypeCSSClassParameter);
        }
    
        public virtual int UpdateExtensionUrlProvider(Nullable<int> extensionUrlProviderID, Nullable<bool> isActive)
        {
            var extensionUrlProviderIDParameter = extensionUrlProviderID.HasValue ?
                new ObjectParameter("ExtensionUrlProviderID", extensionUrlProviderID) :
                new ObjectParameter("ExtensionUrlProviderID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExtensionUrlProvider", extensionUrlProviderIDParameter, isActiveParameter);
        }
    
        public virtual int UpdateFile(Nullable<int> fileId, Nullable<System.Guid> versionGuid, string fileName, string extension, Nullable<int> size, Nullable<int> width, Nullable<int> height, string contentType, Nullable<int> folderID, Nullable<int> lastModifiedByUserID, string hash, Nullable<System.DateTime> lastModificationTime, string title, Nullable<bool> enablePublishPeriod, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> contentItemID)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            var hashParameter = hash != null ?
                new ObjectParameter("Hash", hash) :
                new ObjectParameter("Hash", typeof(string));
    
            var lastModificationTimeParameter = lastModificationTime.HasValue ?
                new ObjectParameter("LastModificationTime", lastModificationTime) :
                new ObjectParameter("LastModificationTime", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var enablePublishPeriodParameter = enablePublishPeriod.HasValue ?
                new ObjectParameter("EnablePublishPeriod", enablePublishPeriod) :
                new ObjectParameter("EnablePublishPeriod", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFile", fileIdParameter, versionGuidParameter, fileNameParameter, extensionParameter, sizeParameter, widthParameter, heightParameter, contentTypeParameter, folderIDParameter, lastModifiedByUserIDParameter, hashParameter, lastModificationTimeParameter, titleParameter, enablePublishPeriodParameter, startDateParameter, endDateParameter, contentItemIDParameter);
        }
    
        public virtual int UpdateFileContent(Nullable<int> fileId, byte[] content)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFileContent", fileIdParameter, contentParameter);
        }
    
        public virtual int UpdateFileHashCode(Nullable<int> fileId, string hashCode)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var hashCodeParameter = hashCode != null ?
                new ObjectParameter("HashCode", hashCode) :
                new ObjectParameter("HashCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFileHashCode", fileIdParameter, hashCodeParameter);
        }
    
        public virtual int UpdateFileLastModificationTime(Nullable<int> fileId, Nullable<System.DateTime> lastModificationTime)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var lastModificationTimeParameter = lastModificationTime.HasValue ?
                new ObjectParameter("LastModificationTime", lastModificationTime) :
                new ObjectParameter("LastModificationTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFileLastModificationTime", fileIdParameter, lastModificationTimeParameter);
        }
    
        public virtual int UpdateFileVersion(Nullable<int> fileID, Nullable<System.Guid> versionGuid)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFileVersion", fileIDParameter, versionGuidParameter);
        }
    
        public virtual int UpdateFolder(Nullable<int> portalID, Nullable<System.Guid> versionGuid, Nullable<int> folderID, string folderPath, string mappedPath, Nullable<int> storageLocation, Nullable<bool> isProtected, Nullable<bool> isCached, Nullable<System.DateTime> lastUpdated, Nullable<int> lastModifiedByUserID, Nullable<int> folderMappingID, Nullable<bool> isVersioned, Nullable<int> workflowID, Nullable<int> parentID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var mappedPathParameter = mappedPath != null ?
                new ObjectParameter("MappedPath", mappedPath) :
                new ObjectParameter("MappedPath", typeof(string));
    
            var storageLocationParameter = storageLocation.HasValue ?
                new ObjectParameter("StorageLocation", storageLocation) :
                new ObjectParameter("StorageLocation", typeof(int));
    
            var isProtectedParameter = isProtected.HasValue ?
                new ObjectParameter("IsProtected", isProtected) :
                new ObjectParameter("IsProtected", typeof(bool));
    
            var isCachedParameter = isCached.HasValue ?
                new ObjectParameter("IsCached", isCached) :
                new ObjectParameter("IsCached", typeof(bool));
    
            var lastUpdatedParameter = lastUpdated.HasValue ?
                new ObjectParameter("LastUpdated", lastUpdated) :
                new ObjectParameter("LastUpdated", typeof(System.DateTime));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            var isVersionedParameter = isVersioned.HasValue ?
                new ObjectParameter("IsVersioned", isVersioned) :
                new ObjectParameter("IsVersioned", typeof(bool));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFolder", portalIDParameter, versionGuidParameter, folderIDParameter, folderPathParameter, mappedPathParameter, storageLocationParameter, isProtectedParameter, isCachedParameter, lastUpdatedParameter, lastModifiedByUserIDParameter, folderMappingIDParameter, isVersionedParameter, workflowIDParameter, parentIDParameter);
        }
    
        public virtual int UpdateFolderMapping(Nullable<int> folderMappingID, string mappingName, Nullable<int> priority, Nullable<int> lastModifiedByUserID)
        {
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            var mappingNameParameter = mappingName != null ?
                new ObjectParameter("MappingName", mappingName) :
                new ObjectParameter("MappingName", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFolderMapping", folderMappingIDParameter, mappingNameParameter, priorityParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateFolderMappingsSetting(Nullable<int> folderMappingID, string settingName, string settingValue, Nullable<int> lastModifiedByUserID)
        {
            var folderMappingIDParameter = folderMappingID.HasValue ?
                new ObjectParameter("FolderMappingID", folderMappingID) :
                new ObjectParameter("FolderMappingID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFolderMappingsSetting", folderMappingIDParameter, settingNameParameter, settingValueParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateFolderPermission(Nullable<int> folderPermissionID, Nullable<int> folderID, Nullable<int> permissionId, Nullable<int> roleId, Nullable<bool> allowAccess, Nullable<int> userId, Nullable<int> lastModifiedByUserId)
        {
            var folderPermissionIDParameter = folderPermissionID.HasValue ?
                new ObjectParameter("FolderPermissionID", folderPermissionID) :
                new ObjectParameter("FolderPermissionID", typeof(int));
    
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lastModifiedByUserIdParameter = lastModifiedByUserId.HasValue ?
                new ObjectParameter("LastModifiedByUserId", lastModifiedByUserId) :
                new ObjectParameter("LastModifiedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFolderPermission", folderPermissionIDParameter, folderIDParameter, permissionIdParameter, roleIdParameter, allowAccessParameter, userIdParameter, lastModifiedByUserIdParameter);
        }
    
        public virtual int UpdateFolderVersion(Nullable<int> folderID, Nullable<System.Guid> versionGuid)
        {
            var folderIDParameter = folderID.HasValue ?
                new ObjectParameter("FolderID", folderID) :
                new ObjectParameter("FolderID", typeof(int));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFolderVersion", folderIDParameter, versionGuidParameter);
        }
    
        public virtual int UpdateHeirarchicalTerm(Nullable<int> termID, Nullable<int> vocabularyID, Nullable<int> parentTermID, string name, string description, Nullable<int> weight, Nullable<int> lastModifiedByUserID)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            var parentTermIDParameter = parentTermID.HasValue ?
                new ObjectParameter("ParentTermID", parentTermID) :
                new ObjectParameter("ParentTermID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHeirarchicalTerm", termIDParameter, vocabularyIDParameter, parentTermIDParameter, nameParameter, descriptionParameter, weightParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateHostSetting(string settingName, string settingValue, Nullable<bool> settingIsSecure, Nullable<int> lastModifiedByUserID)
        {
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var settingIsSecureParameter = settingIsSecure.HasValue ?
                new ObjectParameter("SettingIsSecure", settingIsSecure) :
                new ObjectParameter("SettingIsSecure", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHostSetting", settingNameParameter, settingValueParameter, settingIsSecureParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateHtmlText(Nullable<int> itemID, string content, string summary, Nullable<int> stateID, Nullable<bool> isPublished, Nullable<int> userID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHtmlText", itemIDParameter, contentParameter, summaryParameter, stateIDParameter, isPublishedParameter, userIDParameter);
        }
    
        public virtual int UpdateIPFilter(Nullable<int> iPFilterID, string iPAddress, string subnetMask, Nullable<byte> ruleType, Nullable<int> lastModifiedByUserID)
        {
            var iPFilterIDParameter = iPFilterID.HasValue ?
                new ObjectParameter("IPFilterID", iPFilterID) :
                new ObjectParameter("IPFilterID", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var subnetMaskParameter = subnetMask != null ?
                new ObjectParameter("SubnetMask", subnetMask) :
                new ObjectParameter("SubnetMask", typeof(string));
    
            var ruleTypeParameter = ruleType.HasValue ?
                new ObjectParameter("RuleType", ruleType) :
                new ObjectParameter("RuleType", typeof(byte));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIPFilter", iPFilterIDParameter, iPAddressParameter, subnetMaskParameter, ruleTypeParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateLanguage(Nullable<int> languageID, string cultureCode, string cultureName, string fallbackCulture, Nullable<int> lastModifiedByUserID)
        {
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var cultureNameParameter = cultureName != null ?
                new ObjectParameter("CultureName", cultureName) :
                new ObjectParameter("CultureName", typeof(string));
    
            var fallbackCultureParameter = fallbackCulture != null ?
                new ObjectParameter("FallbackCulture", fallbackCulture) :
                new ObjectParameter("FallbackCulture", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLanguage", languageIDParameter, cultureCodeParameter, cultureNameParameter, fallbackCultureParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateLanguagePack(Nullable<int> languagePackID, Nullable<int> packageID, Nullable<int> languageID, Nullable<int> dependentPackageID, Nullable<int> lastModifiedByUserID)
        {
            var languagePackIDParameter = languagePackID.HasValue ?
                new ObjectParameter("LanguagePackID", languagePackID) :
                new ObjectParameter("LanguagePackID", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var dependentPackageIDParameter = dependentPackageID.HasValue ?
                new ObjectParameter("DependentPackageID", dependentPackageID) :
                new ObjectParameter("DependentPackageID", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLanguagePack", languagePackIDParameter, packageIDParameter, languageIDParameter, dependentPackageIDParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateLegacyFolders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLegacyFolders");
        }
    
        public virtual int UpdateListEntry(Nullable<int> entryID, string value, string text, string description, Nullable<int> lastModifiedByUserID)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateListEntry", entryIDParameter, valueParameter, textParameter, descriptionParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateListSortOrder(Nullable<int> entryID, Nullable<bool> moveUp)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var moveUpParameter = moveUp.HasValue ?
                new ObjectParameter("MoveUp", moveUp) :
                new ObjectParameter("MoveUp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateListSortOrder", entryIDParameter, moveUpParameter);
        }
    
        public virtual int UpdateModule(Nullable<int> moduleId, Nullable<int> moduleDefId, Nullable<int> contentItemID, Nullable<bool> allTabs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> inheritViewPermissions, Nullable<bool> isShareable, Nullable<bool> isShareableViewOnly, Nullable<bool> isDeleted, Nullable<int> lastModifiedByUserID)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var moduleDefIdParameter = moduleDefId.HasValue ?
                new ObjectParameter("ModuleDefId", moduleDefId) :
                new ObjectParameter("ModuleDefId", typeof(int));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var allTabsParameter = allTabs.HasValue ?
                new ObjectParameter("AllTabs", allTabs) :
                new ObjectParameter("AllTabs", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var inheritViewPermissionsParameter = inheritViewPermissions.HasValue ?
                new ObjectParameter("InheritViewPermissions", inheritViewPermissions) :
                new ObjectParameter("InheritViewPermissions", typeof(bool));
    
            var isShareableParameter = isShareable.HasValue ?
                new ObjectParameter("IsShareable", isShareable) :
                new ObjectParameter("IsShareable", typeof(bool));
    
            var isShareableViewOnlyParameter = isShareableViewOnly.HasValue ?
                new ObjectParameter("IsShareableViewOnly", isShareableViewOnly) :
                new ObjectParameter("IsShareableViewOnly", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateModule", moduleIdParameter, moduleDefIdParameter, contentItemIDParameter, allTabsParameter, startDateParameter, endDateParameter, inheritViewPermissionsParameter, isShareableParameter, isShareableViewOnlyParameter, isDeletedParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateModuleControl(Nullable<int> moduleControlId, Nullable<int> moduleDefID, string controlKey, string controlTitle, string controlSrc, string iconFile, Nullable<int> controlType, Nullable<int> viewOrder, string helpUrl, Nullable<bool> supportsPartialRendering, Nullable<bool> supportsPopUps, Nullable<int> lastModifiedByUserID)
        {
            var moduleControlIdParameter = moduleControlId.HasValue ?
                new ObjectParameter("ModuleControlId", moduleControlId) :
                new ObjectParameter("ModuleControlId", typeof(int));
    
            var moduleDefIDParameter = moduleDefID.HasValue ?
                new ObjectParameter("ModuleDefID", moduleDefID) :
                new ObjectParameter("ModuleDefID", typeof(int));
    
            var controlKeyParameter = controlKey != null ?
                new ObjectParameter("ControlKey", controlKey) :
                new ObjectParameter("ControlKey", typeof(string));
    
            var controlTitleParameter = controlTitle != null ?
                new ObjectParameter("ControlTitle", controlTitle) :
                new ObjectParameter("ControlTitle", typeof(string));
    
            var controlSrcParameter = controlSrc != null ?
                new ObjectParameter("ControlSrc", controlSrc) :
                new ObjectParameter("ControlSrc", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var controlTypeParameter = controlType.HasValue ?
                new ObjectParameter("ControlType", controlType) :
                new ObjectParameter("ControlType", typeof(int));
    
            var viewOrderParameter = viewOrder.HasValue ?
                new ObjectParameter("ViewOrder", viewOrder) :
                new ObjectParameter("ViewOrder", typeof(int));
    
            var helpUrlParameter = helpUrl != null ?
                new ObjectParameter("HelpUrl", helpUrl) :
                new ObjectParameter("HelpUrl", typeof(string));
    
            var supportsPartialRenderingParameter = supportsPartialRendering.HasValue ?
                new ObjectParameter("SupportsPartialRendering", supportsPartialRendering) :
                new ObjectParameter("SupportsPartialRendering", typeof(bool));
    
            var supportsPopUpsParameter = supportsPopUps.HasValue ?
                new ObjectParameter("SupportsPopUps", supportsPopUps) :
                new ObjectParameter("SupportsPopUps", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateModuleControl", moduleControlIdParameter, moduleDefIDParameter, controlKeyParameter, controlTitleParameter, controlSrcParameter, iconFileParameter, controlTypeParameter, viewOrderParameter, helpUrlParameter, supportsPartialRenderingParameter, supportsPopUpsParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateModuleDefinition(Nullable<int> moduleDefId, string friendlyName, string definitionName, Nullable<int> defaultCacheTime, Nullable<int> lastModifiedByUserID)
        {
            var moduleDefIdParameter = moduleDefId.HasValue ?
                new ObjectParameter("ModuleDefId", moduleDefId) :
                new ObjectParameter("ModuleDefId", typeof(int));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var definitionNameParameter = definitionName != null ?
                new ObjectParameter("DefinitionName", definitionName) :
                new ObjectParameter("DefinitionName", typeof(string));
    
            var defaultCacheTimeParameter = defaultCacheTime.HasValue ?
                new ObjectParameter("DefaultCacheTime", defaultCacheTime) :
                new ObjectParameter("DefaultCacheTime", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateModuleDefinition", moduleDefIdParameter, friendlyNameParameter, definitionNameParameter, defaultCacheTimeParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateModuleLastContentModifiedOnDate(Nullable<int> moduleID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateModuleLastContentModifiedOnDate", moduleIDParameter);
        }
    
        public virtual int UpdateModuleOrder(Nullable<int> tabId, Nullable<int> moduleId, Nullable<int> moduleOrder, string paneName)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var moduleOrderParameter = moduleOrder.HasValue ?
                new ObjectParameter("ModuleOrder", moduleOrder) :
                new ObjectParameter("ModuleOrder", typeof(int));
    
            var paneNameParameter = paneName != null ?
                new ObjectParameter("PaneName", paneName) :
                new ObjectParameter("PaneName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateModuleOrder", tabIdParameter, moduleIdParameter, moduleOrderParameter, paneNameParameter);
        }
    
        public virtual int UpdateModulePermission(Nullable<int> modulePermissionId, Nullable<int> portalId, Nullable<int> moduleId, Nullable<int> permissionId, Nullable<int> roleId, Nullable<bool> allowAccess, Nullable<int> userId, Nullable<int> lastModifiedByUserId)
        {
            var modulePermissionIdParameter = modulePermissionId.HasValue ?
                new ObjectParameter("ModulePermissionId", modulePermissionId) :
                new ObjectParameter("ModulePermissionId", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lastModifiedByUserIdParameter = lastModifiedByUserId.HasValue ?
                new ObjectParameter("LastModifiedByUserId", lastModifiedByUserId) :
                new ObjectParameter("LastModifiedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateModulePermission", modulePermissionIdParameter, portalIdParameter, moduleIdParameter, permissionIdParameter, roleIdParameter, allowAccessParameter, userIdParameter, lastModifiedByUserIdParameter);
        }
    
        public virtual int UpdateModuleSetting(Nullable<int> moduleId, string settingName, string settingValue, Nullable<int> lastModifiedByUserID)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateModuleSetting", moduleIdParameter, settingNameParameter, settingValueParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateOnlineUser(Nullable<int> userID, Nullable<int> portalID, Nullable<int> tabID, Nullable<System.DateTime> lastActiveDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var lastActiveDateParameter = lastActiveDate.HasValue ?
                new ObjectParameter("LastActiveDate", lastActiveDate) :
                new ObjectParameter("LastActiveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOnlineUser", userIDParameter, portalIDParameter, tabIDParameter, lastActiveDateParameter);
        }
    
        public virtual int UpdatePackage(Nullable<int> packageID, Nullable<int> portalID, string friendlyName, string description, string packageType, string version, string license, string manifest, string owner, string organization, string url, string email, string releaseNotes, Nullable<bool> isSystemPackage, Nullable<int> lastModifiedByUserID, string folderName, string iconFile)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var packageTypeParameter = packageType != null ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var licenseParameter = license != null ?
                new ObjectParameter("License", license) :
                new ObjectParameter("License", typeof(string));
    
            var manifestParameter = manifest != null ?
                new ObjectParameter("Manifest", manifest) :
                new ObjectParameter("Manifest", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(string));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var releaseNotesParameter = releaseNotes != null ?
                new ObjectParameter("ReleaseNotes", releaseNotes) :
                new ObjectParameter("ReleaseNotes", typeof(string));
    
            var isSystemPackageParameter = isSystemPackage.HasValue ?
                new ObjectParameter("IsSystemPackage", isSystemPackage) :
                new ObjectParameter("IsSystemPackage", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            var folderNameParameter = folderName != null ?
                new ObjectParameter("FolderName", folderName) :
                new ObjectParameter("FolderName", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePackage", packageIDParameter, portalIDParameter, friendlyNameParameter, descriptionParameter, packageTypeParameter, versionParameter, licenseParameter, manifestParameter, ownerParameter, organizationParameter, urlParameter, emailParameter, releaseNotesParameter, isSystemPackageParameter, lastModifiedByUserIDParameter, folderNameParameter, iconFileParameter);
        }
    
        public virtual int UpdatePermission(Nullable<int> permissionID, string permissionCode, Nullable<int> moduleDefID, string permissionKey, string permissionName, Nullable<int> lastModifiedByUserID)
        {
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            var permissionCodeParameter = permissionCode != null ?
                new ObjectParameter("PermissionCode", permissionCode) :
                new ObjectParameter("PermissionCode", typeof(string));
    
            var moduleDefIDParameter = moduleDefID.HasValue ?
                new ObjectParameter("ModuleDefID", moduleDefID) :
                new ObjectParameter("ModuleDefID", typeof(int));
    
            var permissionKeyParameter = permissionKey != null ?
                new ObjectParameter("PermissionKey", permissionKey) :
                new ObjectParameter("PermissionKey", typeof(string));
    
            var permissionNameParameter = permissionName != null ?
                new ObjectParameter("PermissionName", permissionName) :
                new ObjectParameter("PermissionName", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePermission", permissionIDParameter, permissionCodeParameter, moduleDefIDParameter, permissionKeyParameter, permissionNameParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdatePortalAlias(Nullable<int> portalAliasID, Nullable<int> portalID, string hTTPAlias, string cultureCode, string skin, string browserType, Nullable<bool> isPrimary, Nullable<int> lastModifiedByUserID)
        {
            var portalAliasIDParameter = portalAliasID.HasValue ?
                new ObjectParameter("PortalAliasID", portalAliasID) :
                new ObjectParameter("PortalAliasID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var hTTPAliasParameter = hTTPAlias != null ?
                new ObjectParameter("HTTPAlias", hTTPAlias) :
                new ObjectParameter("HTTPAlias", typeof(string));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var skinParameter = skin != null ?
                new ObjectParameter("Skin", skin) :
                new ObjectParameter("Skin", typeof(string));
    
            var browserTypeParameter = browserType != null ?
                new ObjectParameter("BrowserType", browserType) :
                new ObjectParameter("BrowserType", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePortalAlias", portalAliasIDParameter, portalIDParameter, hTTPAliasParameter, cultureCodeParameter, skinParameter, browserTypeParameter, isPrimaryParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdatePortalAliasOnInstall(string portalAlias, Nullable<int> lastModifiedByUserID)
        {
            var portalAliasParameter = portalAlias != null ?
                new ObjectParameter("PortalAlias", portalAlias) :
                new ObjectParameter("PortalAlias", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePortalAliasOnInstall", portalAliasParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdatePortalDefaultLanguage(Nullable<int> portalId, string cultureCode)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePortalDefaultLanguage", portalIdParameter, cultureCodeParameter);
        }
    
        public virtual int UpdatePortalGroup(Nullable<int> portalGroupID, string portalGroupName, string portalGroupDescription, string authenticationDomain, Nullable<int> lastModifiedByUserID)
        {
            var portalGroupIDParameter = portalGroupID.HasValue ?
                new ObjectParameter("PortalGroupID", portalGroupID) :
                new ObjectParameter("PortalGroupID", typeof(int));
    
            var portalGroupNameParameter = portalGroupName != null ?
                new ObjectParameter("PortalGroupName", portalGroupName) :
                new ObjectParameter("PortalGroupName", typeof(string));
    
            var portalGroupDescriptionParameter = portalGroupDescription != null ?
                new ObjectParameter("PortalGroupDescription", portalGroupDescription) :
                new ObjectParameter("PortalGroupDescription", typeof(string));
    
            var authenticationDomainParameter = authenticationDomain != null ?
                new ObjectParameter("AuthenticationDomain", authenticationDomain) :
                new ObjectParameter("AuthenticationDomain", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePortalGroup", portalGroupIDParameter, portalGroupNameParameter, portalGroupDescriptionParameter, authenticationDomainParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdatePortalInfo(Nullable<int> portalID, Nullable<int> portalGroupID, string portalName, string logoFile, string footerText, Nullable<System.DateTime> expiryDate, Nullable<int> userRegistration, Nullable<int> bannerAdvertising, string currency, Nullable<int> administratorId, Nullable<decimal> hostFee, Nullable<int> hostSpace, Nullable<int> pageQuota, Nullable<int> userQuota, string paymentProcessor, string processorUserId, string processorPassword, string description, string keyWords, string backgroundFile, Nullable<int> siteLogHistory, Nullable<int> splashTabId, Nullable<int> homeTabId, Nullable<int> loginTabId, Nullable<int> registerTabId, Nullable<int> userTabId, Nullable<int> searchTabId, Nullable<int> custom404TabId, Nullable<int> custom500TabId, string defaultLanguage, string homeDirectory, Nullable<int> lastModifiedByUserID, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var portalGroupIDParameter = portalGroupID.HasValue ?
                new ObjectParameter("PortalGroupID", portalGroupID) :
                new ObjectParameter("PortalGroupID", typeof(int));
    
            var portalNameParameter = portalName != null ?
                new ObjectParameter("PortalName", portalName) :
                new ObjectParameter("PortalName", typeof(string));
    
            var logoFileParameter = logoFile != null ?
                new ObjectParameter("LogoFile", logoFile) :
                new ObjectParameter("LogoFile", typeof(string));
    
            var footerTextParameter = footerText != null ?
                new ObjectParameter("FooterText", footerText) :
                new ObjectParameter("FooterText", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var userRegistrationParameter = userRegistration.HasValue ?
                new ObjectParameter("UserRegistration", userRegistration) :
                new ObjectParameter("UserRegistration", typeof(int));
    
            var bannerAdvertisingParameter = bannerAdvertising.HasValue ?
                new ObjectParameter("BannerAdvertising", bannerAdvertising) :
                new ObjectParameter("BannerAdvertising", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var administratorIdParameter = administratorId.HasValue ?
                new ObjectParameter("AdministratorId", administratorId) :
                new ObjectParameter("AdministratorId", typeof(int));
    
            var hostFeeParameter = hostFee.HasValue ?
                new ObjectParameter("HostFee", hostFee) :
                new ObjectParameter("HostFee", typeof(decimal));
    
            var hostSpaceParameter = hostSpace.HasValue ?
                new ObjectParameter("HostSpace", hostSpace) :
                new ObjectParameter("HostSpace", typeof(int));
    
            var pageQuotaParameter = pageQuota.HasValue ?
                new ObjectParameter("PageQuota", pageQuota) :
                new ObjectParameter("PageQuota", typeof(int));
    
            var userQuotaParameter = userQuota.HasValue ?
                new ObjectParameter("UserQuota", userQuota) :
                new ObjectParameter("UserQuota", typeof(int));
    
            var paymentProcessorParameter = paymentProcessor != null ?
                new ObjectParameter("PaymentProcessor", paymentProcessor) :
                new ObjectParameter("PaymentProcessor", typeof(string));
    
            var processorUserIdParameter = processorUserId != null ?
                new ObjectParameter("ProcessorUserId", processorUserId) :
                new ObjectParameter("ProcessorUserId", typeof(string));
    
            var processorPasswordParameter = processorPassword != null ?
                new ObjectParameter("ProcessorPassword", processorPassword) :
                new ObjectParameter("ProcessorPassword", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var backgroundFileParameter = backgroundFile != null ?
                new ObjectParameter("BackgroundFile", backgroundFile) :
                new ObjectParameter("BackgroundFile", typeof(string));
    
            var siteLogHistoryParameter = siteLogHistory.HasValue ?
                new ObjectParameter("SiteLogHistory", siteLogHistory) :
                new ObjectParameter("SiteLogHistory", typeof(int));
    
            var splashTabIdParameter = splashTabId.HasValue ?
                new ObjectParameter("SplashTabId", splashTabId) :
                new ObjectParameter("SplashTabId", typeof(int));
    
            var homeTabIdParameter = homeTabId.HasValue ?
                new ObjectParameter("HomeTabId", homeTabId) :
                new ObjectParameter("HomeTabId", typeof(int));
    
            var loginTabIdParameter = loginTabId.HasValue ?
                new ObjectParameter("LoginTabId", loginTabId) :
                new ObjectParameter("LoginTabId", typeof(int));
    
            var registerTabIdParameter = registerTabId.HasValue ?
                new ObjectParameter("RegisterTabId", registerTabId) :
                new ObjectParameter("RegisterTabId", typeof(int));
    
            var userTabIdParameter = userTabId.HasValue ?
                new ObjectParameter("UserTabId", userTabId) :
                new ObjectParameter("UserTabId", typeof(int));
    
            var searchTabIdParameter = searchTabId.HasValue ?
                new ObjectParameter("SearchTabId", searchTabId) :
                new ObjectParameter("SearchTabId", typeof(int));
    
            var custom404TabIdParameter = custom404TabId.HasValue ?
                new ObjectParameter("Custom404TabId", custom404TabId) :
                new ObjectParameter("Custom404TabId", typeof(int));
    
            var custom500TabIdParameter = custom500TabId.HasValue ?
                new ObjectParameter("Custom500TabId", custom500TabId) :
                new ObjectParameter("Custom500TabId", typeof(int));
    
            var defaultLanguageParameter = defaultLanguage != null ?
                new ObjectParameter("DefaultLanguage", defaultLanguage) :
                new ObjectParameter("DefaultLanguage", typeof(string));
    
            var homeDirectoryParameter = homeDirectory != null ?
                new ObjectParameter("HomeDirectory", homeDirectory) :
                new ObjectParameter("HomeDirectory", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePortalInfo", portalIDParameter, portalGroupIDParameter, portalNameParameter, logoFileParameter, footerTextParameter, expiryDateParameter, userRegistrationParameter, bannerAdvertisingParameter, currencyParameter, administratorIdParameter, hostFeeParameter, hostSpaceParameter, pageQuotaParameter, userQuotaParameter, paymentProcessorParameter, processorUserIdParameter, processorPasswordParameter, descriptionParameter, keyWordsParameter, backgroundFileParameter, siteLogHistoryParameter, splashTabIdParameter, homeTabIdParameter, loginTabIdParameter, registerTabIdParameter, userTabIdParameter, searchTabIdParameter, custom404TabIdParameter, custom500TabIdParameter, defaultLanguageParameter, homeDirectoryParameter, lastModifiedByUserIDParameter, cultureCodeParameter);
        }
    
        public virtual int UpdatePortalLanguage(Nullable<int> portalId, Nullable<int> languageId, Nullable<bool> isPublished, Nullable<int> lastModifiedByUserID)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePortalLanguage", portalIdParameter, languageIdParameter, isPublishedParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdatePortalSetting(Nullable<int> portalID, string settingName, string settingValue, Nullable<int> userID, string cultureCode)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePortalSetting", portalIDParameter, settingNameParameter, settingValueParameter, userIDParameter, cultureCodeParameter);
        }
    
        public virtual int UpdatePortalSetup(Nullable<int> portalId, Nullable<int> administratorId, Nullable<int> administratorRoleId, Nullable<int> registeredRoleId, Nullable<int> splashTabId, Nullable<int> homeTabId, Nullable<int> loginTabId, Nullable<int> registerTabId, Nullable<int> userTabId, Nullable<int> searchTabId, Nullable<int> custom404TabId, Nullable<int> custom500TabId, Nullable<int> adminTabId, string cultureCode)
        {
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var administratorIdParameter = administratorId.HasValue ?
                new ObjectParameter("AdministratorId", administratorId) :
                new ObjectParameter("AdministratorId", typeof(int));
    
            var administratorRoleIdParameter = administratorRoleId.HasValue ?
                new ObjectParameter("AdministratorRoleId", administratorRoleId) :
                new ObjectParameter("AdministratorRoleId", typeof(int));
    
            var registeredRoleIdParameter = registeredRoleId.HasValue ?
                new ObjectParameter("RegisteredRoleId", registeredRoleId) :
                new ObjectParameter("RegisteredRoleId", typeof(int));
    
            var splashTabIdParameter = splashTabId.HasValue ?
                new ObjectParameter("SplashTabId", splashTabId) :
                new ObjectParameter("SplashTabId", typeof(int));
    
            var homeTabIdParameter = homeTabId.HasValue ?
                new ObjectParameter("HomeTabId", homeTabId) :
                new ObjectParameter("HomeTabId", typeof(int));
    
            var loginTabIdParameter = loginTabId.HasValue ?
                new ObjectParameter("LoginTabId", loginTabId) :
                new ObjectParameter("LoginTabId", typeof(int));
    
            var registerTabIdParameter = registerTabId.HasValue ?
                new ObjectParameter("RegisterTabId", registerTabId) :
                new ObjectParameter("RegisterTabId", typeof(int));
    
            var userTabIdParameter = userTabId.HasValue ?
                new ObjectParameter("UserTabId", userTabId) :
                new ObjectParameter("UserTabId", typeof(int));
    
            var searchTabIdParameter = searchTabId.HasValue ?
                new ObjectParameter("SearchTabId", searchTabId) :
                new ObjectParameter("SearchTabId", typeof(int));
    
            var custom404TabIdParameter = custom404TabId.HasValue ?
                new ObjectParameter("Custom404TabId", custom404TabId) :
                new ObjectParameter("Custom404TabId", typeof(int));
    
            var custom500TabIdParameter = custom500TabId.HasValue ?
                new ObjectParameter("Custom500TabId", custom500TabId) :
                new ObjectParameter("Custom500TabId", typeof(int));
    
            var adminTabIdParameter = adminTabId.HasValue ?
                new ObjectParameter("AdminTabId", adminTabId) :
                new ObjectParameter("AdminTabId", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePortalSetup", portalIdParameter, administratorIdParameter, administratorRoleIdParameter, registeredRoleIdParameter, splashTabIdParameter, homeTabIdParameter, loginTabIdParameter, registerTabIdParameter, userTabIdParameter, searchTabIdParameter, custom404TabIdParameter, custom500TabIdParameter, adminTabIdParameter, cultureCodeParameter);
        }
    
        public virtual int UpdateProfile(Nullable<int> userID, Nullable<int> portalID, string profileData)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var profileDataParameter = profileData != null ?
                new ObjectParameter("ProfileData", profileData) :
                new ObjectParameter("ProfileData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProfile", userIDParameter, portalIDParameter, profileDataParameter);
        }
    
        public virtual int UpdatePropertyDefinition(Nullable<int> propertyDefinitionId, Nullable<int> dataType, string defaultValue, string propertyCategory, string propertyName, Nullable<bool> readOnly, Nullable<bool> required, string validationExpression, Nullable<int> viewOrder, Nullable<bool> visible, Nullable<int> length, Nullable<int> defaultVisibility, Nullable<int> lastModifiedByUserID)
        {
            var propertyDefinitionIdParameter = propertyDefinitionId.HasValue ?
                new ObjectParameter("PropertyDefinitionId", propertyDefinitionId) :
                new ObjectParameter("PropertyDefinitionId", typeof(int));
    
            var dataTypeParameter = dataType.HasValue ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(int));
    
            var defaultValueParameter = defaultValue != null ?
                new ObjectParameter("DefaultValue", defaultValue) :
                new ObjectParameter("DefaultValue", typeof(string));
    
            var propertyCategoryParameter = propertyCategory != null ?
                new ObjectParameter("PropertyCategory", propertyCategory) :
                new ObjectParameter("PropertyCategory", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var readOnlyParameter = readOnly.HasValue ?
                new ObjectParameter("ReadOnly", readOnly) :
                new ObjectParameter("ReadOnly", typeof(bool));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(bool));
    
            var validationExpressionParameter = validationExpression != null ?
                new ObjectParameter("ValidationExpression", validationExpression) :
                new ObjectParameter("ValidationExpression", typeof(string));
    
            var viewOrderParameter = viewOrder.HasValue ?
                new ObjectParameter("ViewOrder", viewOrder) :
                new ObjectParameter("ViewOrder", typeof(int));
    
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("Visible", visible) :
                new ObjectParameter("Visible", typeof(bool));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var defaultVisibilityParameter = defaultVisibility.HasValue ?
                new ObjectParameter("DefaultVisibility", defaultVisibility) :
                new ObjectParameter("DefaultVisibility", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePropertyDefinition", propertyDefinitionIdParameter, dataTypeParameter, defaultValueParameter, propertyCategoryParameter, propertyNameParameter, readOnlyParameter, requiredParameter, validationExpressionParameter, viewOrderParameter, visibleParameter, lengthParameter, defaultVisibilityParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateRole(Nullable<int> roleId, Nullable<int> roleGroupId, string roleName, string description, Nullable<decimal> serviceFee, Nullable<int> billingPeriod, string billingFrequency, Nullable<decimal> trialFee, Nullable<int> trialPeriod, string trialFrequency, Nullable<bool> isPublic, Nullable<bool> autoAssignment, string rSVPCode, string iconFile, Nullable<int> lastModifiedByUserID, Nullable<int> status, Nullable<int> securityMode, Nullable<bool> isSystemRole)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleGroupIdParameter = roleGroupId.HasValue ?
                new ObjectParameter("RoleGroupId", roleGroupId) :
                new ObjectParameter("RoleGroupId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var serviceFeeParameter = serviceFee.HasValue ?
                new ObjectParameter("ServiceFee", serviceFee) :
                new ObjectParameter("ServiceFee", typeof(decimal));
    
            var billingPeriodParameter = billingPeriod.HasValue ?
                new ObjectParameter("BillingPeriod", billingPeriod) :
                new ObjectParameter("BillingPeriod", typeof(int));
    
            var billingFrequencyParameter = billingFrequency != null ?
                new ObjectParameter("BillingFrequency", billingFrequency) :
                new ObjectParameter("BillingFrequency", typeof(string));
    
            var trialFeeParameter = trialFee.HasValue ?
                new ObjectParameter("TrialFee", trialFee) :
                new ObjectParameter("TrialFee", typeof(decimal));
    
            var trialPeriodParameter = trialPeriod.HasValue ?
                new ObjectParameter("TrialPeriod", trialPeriod) :
                new ObjectParameter("TrialPeriod", typeof(int));
    
            var trialFrequencyParameter = trialFrequency != null ?
                new ObjectParameter("TrialFrequency", trialFrequency) :
                new ObjectParameter("TrialFrequency", typeof(string));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            var autoAssignmentParameter = autoAssignment.HasValue ?
                new ObjectParameter("AutoAssignment", autoAssignment) :
                new ObjectParameter("AutoAssignment", typeof(bool));
    
            var rSVPCodeParameter = rSVPCode != null ?
                new ObjectParameter("RSVPCode", rSVPCode) :
                new ObjectParameter("RSVPCode", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var securityModeParameter = securityMode.HasValue ?
                new ObjectParameter("SecurityMode", securityMode) :
                new ObjectParameter("SecurityMode", typeof(int));
    
            var isSystemRoleParameter = isSystemRole.HasValue ?
                new ObjectParameter("IsSystemRole", isSystemRole) :
                new ObjectParameter("IsSystemRole", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRole", roleIdParameter, roleGroupIdParameter, roleNameParameter, descriptionParameter, serviceFeeParameter, billingPeriodParameter, billingFrequencyParameter, trialFeeParameter, trialPeriodParameter, trialFrequencyParameter, isPublicParameter, autoAssignmentParameter, rSVPCodeParameter, iconFileParameter, lastModifiedByUserIDParameter, statusParameter, securityModeParameter, isSystemRoleParameter);
        }
    
        public virtual int UpdateRoleGroup(Nullable<int> roleGroupId, string roleGroupName, string description, Nullable<int> lastModifiedUserID)
        {
            var roleGroupIdParameter = roleGroupId.HasValue ?
                new ObjectParameter("RoleGroupId", roleGroupId) :
                new ObjectParameter("RoleGroupId", typeof(int));
    
            var roleGroupNameParameter = roleGroupName != null ?
                new ObjectParameter("RoleGroupName", roleGroupName) :
                new ObjectParameter("RoleGroupName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lastModifiedUserIDParameter = lastModifiedUserID.HasValue ?
                new ObjectParameter("LastModifiedUserID", lastModifiedUserID) :
                new ObjectParameter("LastModifiedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoleGroup", roleGroupIdParameter, roleGroupNameParameter, descriptionParameter, lastModifiedUserIDParameter);
        }
    
        public virtual int UpdateRoleSetting(Nullable<int> roleID, string settingName, string settingValue, Nullable<int> userID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoleSetting", roleIDParameter, settingNameParameter, settingValueParameter, userIDParameter);
        }
    
        public virtual int UpdateSchedule(Nullable<int> scheduleID, string typeFullName, Nullable<int> timeLapse, string timeLapseMeasurement, Nullable<int> retryTimeLapse, string retryTimeLapseMeasurement, Nullable<int> retainHistoryNum, string attachToEvent, Nullable<bool> catchUpEnabled, Nullable<bool> enabled, string objectDependencies, string servers, Nullable<int> lastModifiedByUserID, string friendlyName, Nullable<System.DateTime> scheduleStartDate)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var typeFullNameParameter = typeFullName != null ?
                new ObjectParameter("TypeFullName", typeFullName) :
                new ObjectParameter("TypeFullName", typeof(string));
    
            var timeLapseParameter = timeLapse.HasValue ?
                new ObjectParameter("TimeLapse", timeLapse) :
                new ObjectParameter("TimeLapse", typeof(int));
    
            var timeLapseMeasurementParameter = timeLapseMeasurement != null ?
                new ObjectParameter("TimeLapseMeasurement", timeLapseMeasurement) :
                new ObjectParameter("TimeLapseMeasurement", typeof(string));
    
            var retryTimeLapseParameter = retryTimeLapse.HasValue ?
                new ObjectParameter("RetryTimeLapse", retryTimeLapse) :
                new ObjectParameter("RetryTimeLapse", typeof(int));
    
            var retryTimeLapseMeasurementParameter = retryTimeLapseMeasurement != null ?
                new ObjectParameter("RetryTimeLapseMeasurement", retryTimeLapseMeasurement) :
                new ObjectParameter("RetryTimeLapseMeasurement", typeof(string));
    
            var retainHistoryNumParameter = retainHistoryNum.HasValue ?
                new ObjectParameter("RetainHistoryNum", retainHistoryNum) :
                new ObjectParameter("RetainHistoryNum", typeof(int));
    
            var attachToEventParameter = attachToEvent != null ?
                new ObjectParameter("AttachToEvent", attachToEvent) :
                new ObjectParameter("AttachToEvent", typeof(string));
    
            var catchUpEnabledParameter = catchUpEnabled.HasValue ?
                new ObjectParameter("CatchUpEnabled", catchUpEnabled) :
                new ObjectParameter("CatchUpEnabled", typeof(bool));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            var objectDependenciesParameter = objectDependencies != null ?
                new ObjectParameter("ObjectDependencies", objectDependencies) :
                new ObjectParameter("ObjectDependencies", typeof(string));
    
            var serversParameter = servers != null ?
                new ObjectParameter("Servers", servers) :
                new ObjectParameter("Servers", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var scheduleStartDateParameter = scheduleStartDate.HasValue ?
                new ObjectParameter("ScheduleStartDate", scheduleStartDate) :
                new ObjectParameter("ScheduleStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchedule", scheduleIDParameter, typeFullNameParameter, timeLapseParameter, timeLapseMeasurementParameter, retryTimeLapseParameter, retryTimeLapseMeasurementParameter, retainHistoryNumParameter, attachToEventParameter, catchUpEnabledParameter, enabledParameter, objectDependenciesParameter, serversParameter, lastModifiedByUserIDParameter, friendlyNameParameter, scheduleStartDateParameter);
        }
    
        public virtual int UpdateScheduleHistory(Nullable<int> scheduleHistoryID, Nullable<System.DateTime> endDate, Nullable<bool> succeeded, string logNotes, Nullable<System.DateTime> nextStart)
        {
            var scheduleHistoryIDParameter = scheduleHistoryID.HasValue ?
                new ObjectParameter("ScheduleHistoryID", scheduleHistoryID) :
                new ObjectParameter("ScheduleHistoryID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var succeededParameter = succeeded.HasValue ?
                new ObjectParameter("Succeeded", succeeded) :
                new ObjectParameter("Succeeded", typeof(bool));
    
            var logNotesParameter = logNotes != null ?
                new ObjectParameter("LogNotes", logNotes) :
                new ObjectParameter("LogNotes", typeof(string));
    
            var nextStartParameter = nextStart.HasValue ?
                new ObjectParameter("NextStart", nextStart) :
                new ObjectParameter("NextStart", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScheduleHistory", scheduleHistoryIDParameter, endDateParameter, succeededParameter, logNotesParameter, nextStartParameter);
        }
    
        public virtual int UpdateScopeType(Nullable<int> scopeTypeId, string scopeType)
        {
            var scopeTypeIdParameter = scopeTypeId.HasValue ?
                new ObjectParameter("ScopeTypeId", scopeTypeId) :
                new ObjectParameter("ScopeTypeId", typeof(int));
    
            var scopeTypeParameter = scopeType != null ?
                new ObjectParameter("ScopeType", scopeType) :
                new ObjectParameter("ScopeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScopeType", scopeTypeIdParameter, scopeTypeParameter);
        }
    
        public virtual int UpdateSearchCommonWord(Nullable<int> commonWordID, string commonWord, string locale)
        {
            var commonWordIDParameter = commonWordID.HasValue ?
                new ObjectParameter("CommonWordID", commonWordID) :
                new ObjectParameter("CommonWordID", typeof(int));
    
            var commonWordParameter = commonWord != null ?
                new ObjectParameter("CommonWord", commonWord) :
                new ObjectParameter("CommonWord", typeof(string));
    
            var localeParameter = locale != null ?
                new ObjectParameter("Locale", locale) :
                new ObjectParameter("Locale", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSearchCommonWord", commonWordIDParameter, commonWordParameter, localeParameter);
        }
    
        public virtual int UpdateSearchStopWords(Nullable<int> stopWordsID, string stopWords, Nullable<int> lastModifiedByUserID)
        {
            var stopWordsIDParameter = stopWordsID.HasValue ?
                new ObjectParameter("StopWordsID", stopWordsID) :
                new ObjectParameter("StopWordsID", typeof(int));
    
            var stopWordsParameter = stopWords != null ?
                new ObjectParameter("StopWords", stopWords) :
                new ObjectParameter("StopWords", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSearchStopWords", stopWordsIDParameter, stopWordsParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateServer(Nullable<int> serverID, string uRL, string uniqueId, Nullable<bool> enabled, string group)
        {
            var serverIDParameter = serverID.HasValue ?
                new ObjectParameter("ServerID", serverID) :
                new ObjectParameter("ServerID", typeof(int));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServer", serverIDParameter, uRLParameter, uniqueIdParameter, enabledParameter, groupParameter);
        }
    
        public virtual int UpdateServerActivity(string serverName, string iISAppName, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> pingFailureCount, Nullable<bool> enabled)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var iISAppNameParameter = iISAppName != null ?
                new ObjectParameter("IISAppName", iISAppName) :
                new ObjectParameter("IISAppName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var pingFailureCountParameter = pingFailureCount.HasValue ?
                new ObjectParameter("PingFailureCount", pingFailureCount) :
                new ObjectParameter("PingFailureCount", typeof(int));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServerActivity", serverNameParameter, iISAppNameParameter, createdDateParameter, lastActivityDateParameter, pingFailureCountParameter, enabledParameter);
        }
    
        public virtual int UpdateSimpleTerm(Nullable<int> termID, Nullable<int> vocabularyID, string name, string description, Nullable<int> weight, Nullable<int> lastModifiedByUserID)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSimpleTerm", termIDParameter, vocabularyIDParameter, nameParameter, descriptionParameter, weightParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateSkin(Nullable<int> skinID, string skinSrc)
        {
            var skinIDParameter = skinID.HasValue ?
                new ObjectParameter("SkinID", skinID) :
                new ObjectParameter("SkinID", typeof(int));
    
            var skinSrcParameter = skinSrc != null ?
                new ObjectParameter("SkinSrc", skinSrc) :
                new ObjectParameter("SkinSrc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSkin", skinIDParameter, skinSrcParameter);
        }
    
        public virtual int UpdateSkinControl(Nullable<int> skinControlID, Nullable<int> packageID, string controlKey, string controlSrc, Nullable<bool> supportsPartialRendering, Nullable<int> lastModifiedByUserID)
        {
            var skinControlIDParameter = skinControlID.HasValue ?
                new ObjectParameter("SkinControlID", skinControlID) :
                new ObjectParameter("SkinControlID", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var controlKeyParameter = controlKey != null ?
                new ObjectParameter("ControlKey", controlKey) :
                new ObjectParameter("ControlKey", typeof(string));
    
            var controlSrcParameter = controlSrc != null ?
                new ObjectParameter("ControlSrc", controlSrc) :
                new ObjectParameter("ControlSrc", typeof(string));
    
            var supportsPartialRenderingParameter = supportsPartialRendering.HasValue ?
                new ObjectParameter("SupportsPartialRendering", supportsPartialRendering) :
                new ObjectParameter("SupportsPartialRendering", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSkinControl", skinControlIDParameter, packageIDParameter, controlKeyParameter, controlSrcParameter, supportsPartialRenderingParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateSkinPackage(Nullable<int> skinPackageID, Nullable<int> packageID, Nullable<int> portalID, string skinName, string skinType, Nullable<int> lastModifiedByUserID)
        {
            var skinPackageIDParameter = skinPackageID.HasValue ?
                new ObjectParameter("SkinPackageID", skinPackageID) :
                new ObjectParameter("SkinPackageID", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var skinNameParameter = skinName != null ?
                new ObjectParameter("SkinName", skinName) :
                new ObjectParameter("SkinName", typeof(string));
    
            var skinTypeParameter = skinType != null ?
                new ObjectParameter("SkinType", skinType) :
                new ObjectParameter("SkinType", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSkinPackage", skinPackageIDParameter, packageIDParameter, portalIDParameter, skinNameParameter, skinTypeParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateSynonymsGroup(Nullable<int> synonymsGroupID, string synonymsTags, Nullable<int> lastModifiedByUserID)
        {
            var synonymsGroupIDParameter = synonymsGroupID.HasValue ?
                new ObjectParameter("SynonymsGroupID", synonymsGroupID) :
                new ObjectParameter("SynonymsGroupID", typeof(int));
    
            var synonymsTagsParameter = synonymsTags != null ?
                new ObjectParameter("SynonymsTags", synonymsTags) :
                new ObjectParameter("SynonymsTags", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSynonymsGroup", synonymsGroupIDParameter, synonymsTagsParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateSystemMessage(Nullable<int> portalID, string messageName, string messageValue)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var messageNameParameter = messageName != null ?
                new ObjectParameter("MessageName", messageName) :
                new ObjectParameter("MessageName", typeof(string));
    
            var messageValueParameter = messageValue != null ?
                new ObjectParameter("MessageValue", messageValue) :
                new ObjectParameter("MessageValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSystemMessage", portalIDParameter, messageNameParameter, messageValueParameter);
        }
    
        public virtual int UpdateTab(Nullable<int> tabId, Nullable<int> contentItemID, Nullable<int> portalId, Nullable<System.Guid> versionGuid, Nullable<System.Guid> defaultLanguageGuid, Nullable<System.Guid> localizedVersionGuid, string tabName, Nullable<bool> isVisible, Nullable<bool> disableLink, Nullable<int> parentId, string iconFile, string iconFileLarge, string title, string description, string keyWords, Nullable<bool> isDeleted, string url, string skinSrc, string containerSrc, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> refreshInterval, string pageHeadText, Nullable<bool> isSecure, Nullable<bool> permanentRedirect, Nullable<double> siteMapPriority, Nullable<int> lastModifiedByUserID, string cultureCode, Nullable<bool> isSystem)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var contentItemIDParameter = contentItemID.HasValue ?
                new ObjectParameter("ContentItemID", contentItemID) :
                new ObjectParameter("ContentItemID", typeof(int));
    
            var portalIdParameter = portalId.HasValue ?
                new ObjectParameter("PortalId", portalId) :
                new ObjectParameter("PortalId", typeof(int));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var defaultLanguageGuidParameter = defaultLanguageGuid.HasValue ?
                new ObjectParameter("DefaultLanguageGuid", defaultLanguageGuid) :
                new ObjectParameter("DefaultLanguageGuid", typeof(System.Guid));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("IsVisible", isVisible) :
                new ObjectParameter("IsVisible", typeof(bool));
    
            var disableLinkParameter = disableLink.HasValue ?
                new ObjectParameter("DisableLink", disableLink) :
                new ObjectParameter("DisableLink", typeof(bool));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var iconFileLargeParameter = iconFileLarge != null ?
                new ObjectParameter("IconFileLarge", iconFileLarge) :
                new ObjectParameter("IconFileLarge", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var skinSrcParameter = skinSrc != null ?
                new ObjectParameter("SkinSrc", skinSrc) :
                new ObjectParameter("SkinSrc", typeof(string));
    
            var containerSrcParameter = containerSrc != null ?
                new ObjectParameter("ContainerSrc", containerSrc) :
                new ObjectParameter("ContainerSrc", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var refreshIntervalParameter = refreshInterval.HasValue ?
                new ObjectParameter("RefreshInterval", refreshInterval) :
                new ObjectParameter("RefreshInterval", typeof(int));
    
            var pageHeadTextParameter = pageHeadText != null ?
                new ObjectParameter("PageHeadText", pageHeadText) :
                new ObjectParameter("PageHeadText", typeof(string));
    
            var isSecureParameter = isSecure.HasValue ?
                new ObjectParameter("IsSecure", isSecure) :
                new ObjectParameter("IsSecure", typeof(bool));
    
            var permanentRedirectParameter = permanentRedirect.HasValue ?
                new ObjectParameter("PermanentRedirect", permanentRedirect) :
                new ObjectParameter("PermanentRedirect", typeof(bool));
    
            var siteMapPriorityParameter = siteMapPriority.HasValue ?
                new ObjectParameter("SiteMapPriority", siteMapPriority) :
                new ObjectParameter("SiteMapPriority", typeof(double));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var isSystemParameter = isSystem.HasValue ?
                new ObjectParameter("IsSystem", isSystem) :
                new ObjectParameter("IsSystem", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTab", tabIdParameter, contentItemIDParameter, portalIdParameter, versionGuidParameter, defaultLanguageGuidParameter, localizedVersionGuidParameter, tabNameParameter, isVisibleParameter, disableLinkParameter, parentIdParameter, iconFileParameter, iconFileLargeParameter, titleParameter, descriptionParameter, keyWordsParameter, isDeletedParameter, urlParameter, skinSrcParameter, containerSrcParameter, startDateParameter, endDateParameter, refreshIntervalParameter, pageHeadTextParameter, isSecureParameter, permanentRedirectParameter, siteMapPriorityParameter, lastModifiedByUserIDParameter, cultureCodeParameter, isSystemParameter);
        }
    
        public virtual int UpdateTabModule(Nullable<int> tabModuleId, Nullable<int> tabId, Nullable<int> moduleId, string moduleTitle, string header, string footer, Nullable<int> moduleOrder, string paneName, Nullable<int> cacheTime, string cacheMethod, string alignment, string color, string border, string iconFile, Nullable<int> visibility, string containerSrc, Nullable<bool> displayTitle, Nullable<bool> displayPrint, Nullable<bool> displaySyndicate, Nullable<bool> isWebSlice, string webSliceTitle, Nullable<System.DateTime> webSliceExpiryDate, Nullable<int> webSliceTTL, Nullable<System.Guid> versionGuid, Nullable<System.Guid> defaultLanguageGuid, Nullable<System.Guid> localizedVersionGuid, string cultureCode, Nullable<int> lastModifiedByUserID)
        {
            var tabModuleIdParameter = tabModuleId.HasValue ?
                new ObjectParameter("TabModuleId", tabModuleId) :
                new ObjectParameter("TabModuleId", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var moduleTitleParameter = moduleTitle != null ?
                new ObjectParameter("ModuleTitle", moduleTitle) :
                new ObjectParameter("ModuleTitle", typeof(string));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var footerParameter = footer != null ?
                new ObjectParameter("Footer", footer) :
                new ObjectParameter("Footer", typeof(string));
    
            var moduleOrderParameter = moduleOrder.HasValue ?
                new ObjectParameter("ModuleOrder", moduleOrder) :
                new ObjectParameter("ModuleOrder", typeof(int));
    
            var paneNameParameter = paneName != null ?
                new ObjectParameter("PaneName", paneName) :
                new ObjectParameter("PaneName", typeof(string));
    
            var cacheTimeParameter = cacheTime.HasValue ?
                new ObjectParameter("CacheTime", cacheTime) :
                new ObjectParameter("CacheTime", typeof(int));
    
            var cacheMethodParameter = cacheMethod != null ?
                new ObjectParameter("CacheMethod", cacheMethod) :
                new ObjectParameter("CacheMethod", typeof(string));
    
            var alignmentParameter = alignment != null ?
                new ObjectParameter("Alignment", alignment) :
                new ObjectParameter("Alignment", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var borderParameter = border != null ?
                new ObjectParameter("Border", border) :
                new ObjectParameter("Border", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            var visibilityParameter = visibility.HasValue ?
                new ObjectParameter("Visibility", visibility) :
                new ObjectParameter("Visibility", typeof(int));
    
            var containerSrcParameter = containerSrc != null ?
                new ObjectParameter("ContainerSrc", containerSrc) :
                new ObjectParameter("ContainerSrc", typeof(string));
    
            var displayTitleParameter = displayTitle.HasValue ?
                new ObjectParameter("DisplayTitle", displayTitle) :
                new ObjectParameter("DisplayTitle", typeof(bool));
    
            var displayPrintParameter = displayPrint.HasValue ?
                new ObjectParameter("DisplayPrint", displayPrint) :
                new ObjectParameter("DisplayPrint", typeof(bool));
    
            var displaySyndicateParameter = displaySyndicate.HasValue ?
                new ObjectParameter("DisplaySyndicate", displaySyndicate) :
                new ObjectParameter("DisplaySyndicate", typeof(bool));
    
            var isWebSliceParameter = isWebSlice.HasValue ?
                new ObjectParameter("IsWebSlice", isWebSlice) :
                new ObjectParameter("IsWebSlice", typeof(bool));
    
            var webSliceTitleParameter = webSliceTitle != null ?
                new ObjectParameter("WebSliceTitle", webSliceTitle) :
                new ObjectParameter("WebSliceTitle", typeof(string));
    
            var webSliceExpiryDateParameter = webSliceExpiryDate.HasValue ?
                new ObjectParameter("WebSliceExpiryDate", webSliceExpiryDate) :
                new ObjectParameter("WebSliceExpiryDate", typeof(System.DateTime));
    
            var webSliceTTLParameter = webSliceTTL.HasValue ?
                new ObjectParameter("WebSliceTTL", webSliceTTL) :
                new ObjectParameter("WebSliceTTL", typeof(int));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            var defaultLanguageGuidParameter = defaultLanguageGuid.HasValue ?
                new ObjectParameter("DefaultLanguageGuid", defaultLanguageGuid) :
                new ObjectParameter("DefaultLanguageGuid", typeof(System.Guid));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var cultureCodeParameter = cultureCode != null ?
                new ObjectParameter("CultureCode", cultureCode) :
                new ObjectParameter("CultureCode", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabModule", tabModuleIdParameter, tabIdParameter, moduleIdParameter, moduleTitleParameter, headerParameter, footerParameter, moduleOrderParameter, paneNameParameter, cacheTimeParameter, cacheMethodParameter, alignmentParameter, colorParameter, borderParameter, iconFileParameter, visibilityParameter, containerSrcParameter, displayTitleParameter, displayPrintParameter, displaySyndicateParameter, isWebSliceParameter, webSliceTitleParameter, webSliceExpiryDateParameter, webSliceTTLParameter, versionGuidParameter, defaultLanguageGuidParameter, localizedVersionGuidParameter, cultureCodeParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateTabModuleSetting(Nullable<int> tabModuleId, string settingName, string settingValue, Nullable<int> lastModifiedByUserID)
        {
            var tabModuleIdParameter = tabModuleId.HasValue ?
                new ObjectParameter("TabModuleId", tabModuleId) :
                new ObjectParameter("TabModuleId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabModuleSetting", tabModuleIdParameter, settingNameParameter, settingValueParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateTabModuleTranslationStatus(Nullable<int> tabModuleId, Nullable<System.Guid> localizedVersionGuid, Nullable<int> lastModifiedByUserID)
        {
            var tabModuleIdParameter = tabModuleId.HasValue ?
                new ObjectParameter("TabModuleId", tabModuleId) :
                new ObjectParameter("TabModuleId", typeof(int));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabModuleTranslationStatus", tabModuleIdParameter, localizedVersionGuidParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateTabModuleVersion(Nullable<int> tabModuleID, Nullable<System.Guid> versionGuid)
        {
            var tabModuleIDParameter = tabModuleID.HasValue ?
                new ObjectParameter("TabModuleID", tabModuleID) :
                new ObjectParameter("TabModuleID", typeof(int));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabModuleVersion", tabModuleIDParameter, versionGuidParameter);
        }
    
        public virtual int UpdateTabModuleVersionByModule(Nullable<int> moduleID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabModuleVersionByModule", moduleIDParameter);
        }
    
        public virtual int UpdateTabOrder(Nullable<int> tabId, Nullable<int> tabOrder, Nullable<int> parentId, Nullable<int> lastModifiedByUserID)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var tabOrderParameter = tabOrder.HasValue ?
                new ObjectParameter("TabOrder", tabOrder) :
                new ObjectParameter("TabOrder", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabOrder", tabIdParameter, tabOrderParameter, parentIdParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateTabPermission(Nullable<int> tabPermissionId, Nullable<int> tabId, Nullable<int> permissionId, Nullable<int> roleId, Nullable<bool> allowAccess, Nullable<int> userId, Nullable<int> lastModifiedByUserId)
        {
            var tabPermissionIdParameter = tabPermissionId.HasValue ?
                new ObjectParameter("TabPermissionId", tabPermissionId) :
                new ObjectParameter("TabPermissionId", typeof(int));
    
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("PermissionId", permissionId) :
                new ObjectParameter("PermissionId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var allowAccessParameter = allowAccess.HasValue ?
                new ObjectParameter("AllowAccess", allowAccess) :
                new ObjectParameter("AllowAccess", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lastModifiedByUserIdParameter = lastModifiedByUserId.HasValue ?
                new ObjectParameter("LastModifiedByUserId", lastModifiedByUserId) :
                new ObjectParameter("LastModifiedByUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabPermission", tabPermissionIdParameter, tabIdParameter, permissionIdParameter, roleIdParameter, allowAccessParameter, userIdParameter, lastModifiedByUserIdParameter);
        }
    
        public virtual int UpdateTabSetting(Nullable<int> tabID, string settingName, string settingValue, Nullable<int> lastModifiedByUserID)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabSetting", tabIDParameter, settingNameParameter, settingValueParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateTabTranslationStatus(Nullable<int> tabId, Nullable<System.Guid> localizedVersionGuid, Nullable<int> lastModifiedByUserID)
        {
            var tabIdParameter = tabId.HasValue ?
                new ObjectParameter("TabId", tabId) :
                new ObjectParameter("TabId", typeof(int));
    
            var localizedVersionGuidParameter = localizedVersionGuid.HasValue ?
                new ObjectParameter("LocalizedVersionGuid", localizedVersionGuid) :
                new ObjectParameter("LocalizedVersionGuid", typeof(System.Guid));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabTranslationStatus", tabIdParameter, localizedVersionGuidParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateTabVersion(Nullable<int> tabID, Nullable<System.Guid> versionGuid)
        {
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var versionGuidParameter = versionGuid.HasValue ?
                new ObjectParameter("VersionGuid", versionGuid) :
                new ObjectParameter("VersionGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTabVersion", tabIDParameter, versionGuidParameter);
        }
    
        public virtual int UpdateUrlTracking(Nullable<int> portalID, string url, Nullable<bool> logActivity, Nullable<bool> trackClicks, Nullable<int> moduleId, Nullable<bool> newWindow)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var logActivityParameter = logActivity.HasValue ?
                new ObjectParameter("LogActivity", logActivity) :
                new ObjectParameter("LogActivity", typeof(bool));
    
            var trackClicksParameter = trackClicks.HasValue ?
                new ObjectParameter("TrackClicks", trackClicks) :
                new ObjectParameter("TrackClicks", typeof(bool));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var newWindowParameter = newWindow.HasValue ?
                new ObjectParameter("NewWindow", newWindow) :
                new ObjectParameter("NewWindow", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUrlTracking", portalIDParameter, urlParameter, logActivityParameter, trackClicksParameter, moduleIdParameter, newWindowParameter);
        }
    
        public virtual int UpdateUrlTrackingStats(Nullable<int> portalID, string url, Nullable<int> moduleId)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUrlTrackingStats", portalIDParameter, urlParameter, moduleIdParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> userID, Nullable<int> portalID, string firstName, string lastName, Nullable<bool> isSuperUser, string email, string displayName, string vanityUrl, Nullable<bool> updatePassword, Nullable<bool> authorised, Nullable<bool> refreshRoles, string lastIPAddress, Nullable<System.Guid> passwordResetToken, Nullable<System.DateTime> passwordResetExpiration, Nullable<bool> isDeleted, Nullable<int> lastModifiedByUserID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var isSuperUserParameter = isSuperUser.HasValue ?
                new ObjectParameter("IsSuperUser", isSuperUser) :
                new ObjectParameter("IsSuperUser", typeof(bool));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var vanityUrlParameter = vanityUrl != null ?
                new ObjectParameter("VanityUrl", vanityUrl) :
                new ObjectParameter("VanityUrl", typeof(string));
    
            var updatePasswordParameter = updatePassword.HasValue ?
                new ObjectParameter("UpdatePassword", updatePassword) :
                new ObjectParameter("UpdatePassword", typeof(bool));
    
            var authorisedParameter = authorised.HasValue ?
                new ObjectParameter("Authorised", authorised) :
                new ObjectParameter("Authorised", typeof(bool));
    
            var refreshRolesParameter = refreshRoles.HasValue ?
                new ObjectParameter("RefreshRoles", refreshRoles) :
                new ObjectParameter("RefreshRoles", typeof(bool));
    
            var lastIPAddressParameter = lastIPAddress != null ?
                new ObjectParameter("LastIPAddress", lastIPAddress) :
                new ObjectParameter("LastIPAddress", typeof(string));
    
            var passwordResetTokenParameter = passwordResetToken.HasValue ?
                new ObjectParameter("passwordResetToken", passwordResetToken) :
                new ObjectParameter("passwordResetToken", typeof(System.Guid));
    
            var passwordResetExpirationParameter = passwordResetExpiration.HasValue ?
                new ObjectParameter("passwordResetExpiration", passwordResetExpiration) :
                new ObjectParameter("passwordResetExpiration", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", userIDParameter, portalIDParameter, firstNameParameter, lastNameParameter, isSuperUserParameter, emailParameter, displayNameParameter, vanityUrlParameter, updatePasswordParameter, authorisedParameter, refreshRolesParameter, lastIPAddressParameter, passwordResetTokenParameter, passwordResetExpirationParameter, isDeletedParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateUserProfileProperty(Nullable<int> profileID, Nullable<int> userID, Nullable<int> propertyDefinitionID, string propertyValue, Nullable<int> visibility, string extendedVisibility, Nullable<System.DateTime> lastUpdatedDate)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var propertyDefinitionIDParameter = propertyDefinitionID.HasValue ?
                new ObjectParameter("PropertyDefinitionID", propertyDefinitionID) :
                new ObjectParameter("PropertyDefinitionID", typeof(int));
    
            var propertyValueParameter = propertyValue != null ?
                new ObjectParameter("PropertyValue", propertyValue) :
                new ObjectParameter("PropertyValue", typeof(string));
    
            var visibilityParameter = visibility.HasValue ?
                new ObjectParameter("Visibility", visibility) :
                new ObjectParameter("Visibility", typeof(int));
    
            var extendedVisibilityParameter = extendedVisibility != null ?
                new ObjectParameter("ExtendedVisibility", extendedVisibility) :
                new ObjectParameter("ExtendedVisibility", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserProfileProperty", profileIDParameter, userIDParameter, propertyDefinitionIDParameter, propertyValueParameter, visibilityParameter, extendedVisibilityParameter, lastUpdatedDateParameter);
        }
    
        public virtual int UpdateUserRole(Nullable<int> userRoleId, Nullable<int> status, Nullable<bool> isOwner, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expiryDate, Nullable<int> lastModifiedByUserID)
        {
            var userRoleIdParameter = userRoleId.HasValue ?
                new ObjectParameter("UserRoleId", userRoleId) :
                new ObjectParameter("UserRoleId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isOwnerParameter = isOwner.HasValue ?
                new ObjectParameter("IsOwner", isOwner) :
                new ObjectParameter("IsOwner", typeof(bool));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserRole", userRoleIdParameter, statusParameter, isOwnerParameter, effectiveDateParameter, expiryDateParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UpdateVendor(Nullable<int> vendorId, string vendorName, string unit, string street, string city, string region, string country, string postalCode, string telephone, string fax, string cell, string email, string website, string firstName, string lastName, string userName, string logoFile, string keyWords, Nullable<bool> authorized)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var cellParameter = cell != null ?
                new ObjectParameter("Cell", cell) :
                new ObjectParameter("Cell", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var logoFileParameter = logoFile != null ?
                new ObjectParameter("LogoFile", logoFile) :
                new ObjectParameter("LogoFile", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var authorizedParameter = authorized.HasValue ?
                new ObjectParameter("Authorized", authorized) :
                new ObjectParameter("Authorized", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVendor", vendorIdParameter, vendorNameParameter, unitParameter, streetParameter, cityParameter, regionParameter, countryParameter, postalCodeParameter, telephoneParameter, faxParameter, cellParameter, emailParameter, websiteParameter, firstNameParameter, lastNameParameter, userNameParameter, logoFileParameter, keyWordsParameter, authorizedParameter);
        }
    
        public virtual int UpdateVocabulary(Nullable<int> vocabularyID, Nullable<int> vocabularyTypeID, string name, string description, Nullable<int> weight, Nullable<int> scopeID, Nullable<int> scopeTypeID, Nullable<int> lastModifiedByUserID)
        {
            var vocabularyIDParameter = vocabularyID.HasValue ?
                new ObjectParameter("VocabularyID", vocabularyID) :
                new ObjectParameter("VocabularyID", typeof(int));
    
            var vocabularyTypeIDParameter = vocabularyTypeID.HasValue ?
                new ObjectParameter("VocabularyTypeID", vocabularyTypeID) :
                new ObjectParameter("VocabularyTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var scopeIDParameter = scopeID.HasValue ?
                new ObjectParameter("ScopeID", scopeID) :
                new ObjectParameter("ScopeID", typeof(int));
    
            var scopeTypeIDParameter = scopeTypeID.HasValue ?
                new ObjectParameter("ScopeTypeID", scopeTypeID) :
                new ObjectParameter("ScopeTypeID", typeof(int));
    
            var lastModifiedByUserIDParameter = lastModifiedByUserID.HasValue ?
                new ObjectParameter("LastModifiedByUserID", lastModifiedByUserID) :
                new ObjectParameter("LastModifiedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVocabulary", vocabularyIDParameter, vocabularyTypeIDParameter, nameParameter, descriptionParameter, weightParameter, scopeIDParameter, scopeTypeIDParameter, lastModifiedByUserIDParameter);
        }
    
        public virtual int UserDefinedTable_AddData(Nullable<int> userDefinedRowId, Nullable<int> userDefinedFieldId, string fieldValue)
        {
            var userDefinedRowIdParameter = userDefinedRowId.HasValue ?
                new ObjectParameter("UserDefinedRowId", userDefinedRowId) :
                new ObjectParameter("UserDefinedRowId", typeof(int));
    
            var userDefinedFieldIdParameter = userDefinedFieldId.HasValue ?
                new ObjectParameter("UserDefinedFieldId", userDefinedFieldId) :
                new ObjectParameter("UserDefinedFieldId", typeof(int));
    
            var fieldValueParameter = fieldValue != null ?
                new ObjectParameter("FieldValue", fieldValue) :
                new ObjectParameter("FieldValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_AddData", userDefinedRowIdParameter, userDefinedFieldIdParameter, fieldValueParameter);
        }
    
        public virtual int UserDefinedTable_AddField(Nullable<int> moduleId, string fieldTitle, Nullable<int> beforePos, string helpText, Nullable<bool> required, string fieldType, string @default, Nullable<bool> visible, Nullable<bool> showOnEdit, Nullable<bool> searchable, Nullable<bool> @private, Nullable<bool> multipleValues, string inputSettings, string outputSettings, Nullable<bool> normalizeFlag, string validationRule, string validationMessage, string editStyle)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var fieldTitleParameter = fieldTitle != null ?
                new ObjectParameter("FieldTitle", fieldTitle) :
                new ObjectParameter("FieldTitle", typeof(string));
    
            var beforePosParameter = beforePos.HasValue ?
                new ObjectParameter("BeforePos", beforePos) :
                new ObjectParameter("BeforePos", typeof(int));
    
            var helpTextParameter = helpText != null ?
                new ObjectParameter("HelpText", helpText) :
                new ObjectParameter("HelpText", typeof(string));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(bool));
    
            var fieldTypeParameter = fieldType != null ?
                new ObjectParameter("FieldType", fieldType) :
                new ObjectParameter("FieldType", typeof(string));
    
            var defaultParameter = @default != null ?
                new ObjectParameter("Default", @default) :
                new ObjectParameter("Default", typeof(string));
    
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("Visible", visible) :
                new ObjectParameter("Visible", typeof(bool));
    
            var showOnEditParameter = showOnEdit.HasValue ?
                new ObjectParameter("ShowOnEdit", showOnEdit) :
                new ObjectParameter("ShowOnEdit", typeof(bool));
    
            var searchableParameter = searchable.HasValue ?
                new ObjectParameter("Searchable", searchable) :
                new ObjectParameter("Searchable", typeof(bool));
    
            var privateParameter = @private.HasValue ?
                new ObjectParameter("Private", @private) :
                new ObjectParameter("Private", typeof(bool));
    
            var multipleValuesParameter = multipleValues.HasValue ?
                new ObjectParameter("MultipleValues", multipleValues) :
                new ObjectParameter("MultipleValues", typeof(bool));
    
            var inputSettingsParameter = inputSettings != null ?
                new ObjectParameter("InputSettings", inputSettings) :
                new ObjectParameter("InputSettings", typeof(string));
    
            var outputSettingsParameter = outputSettings != null ?
                new ObjectParameter("OutputSettings", outputSettings) :
                new ObjectParameter("OutputSettings", typeof(string));
    
            var normalizeFlagParameter = normalizeFlag.HasValue ?
                new ObjectParameter("NormalizeFlag", normalizeFlag) :
                new ObjectParameter("NormalizeFlag", typeof(bool));
    
            var validationRuleParameter = validationRule != null ?
                new ObjectParameter("ValidationRule", validationRule) :
                new ObjectParameter("ValidationRule", typeof(string));
    
            var validationMessageParameter = validationMessage != null ?
                new ObjectParameter("ValidationMessage", validationMessage) :
                new ObjectParameter("ValidationMessage", typeof(string));
    
            var editStyleParameter = editStyle != null ?
                new ObjectParameter("EditStyle", editStyle) :
                new ObjectParameter("EditStyle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_AddField", moduleIdParameter, fieldTitleParameter, beforePosParameter, helpTextParameter, requiredParameter, fieldTypeParameter, defaultParameter, visibleParameter, showOnEditParameter, searchableParameter, privateParameter, multipleValuesParameter, inputSettingsParameter, outputSettingsParameter, normalizeFlagParameter, validationRuleParameter, validationMessageParameter, editStyleParameter);
        }
    
        public virtual int UserDefinedTable_AddRow(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_AddRow", moduleIdParameter);
        }
    
        public virtual int UserDefinedTable_DeleteData(Nullable<int> userDefinedRowId, Nullable<int> userDefinedFieldId)
        {
            var userDefinedRowIdParameter = userDefinedRowId.HasValue ?
                new ObjectParameter("UserDefinedRowId", userDefinedRowId) :
                new ObjectParameter("UserDefinedRowId", typeof(int));
    
            var userDefinedFieldIdParameter = userDefinedFieldId.HasValue ?
                new ObjectParameter("UserDefinedFieldId", userDefinedFieldId) :
                new ObjectParameter("UserDefinedFieldId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_DeleteData", userDefinedRowIdParameter, userDefinedFieldIdParameter);
        }
    
        public virtual int UserDefinedTable_DeleteField(Nullable<int> userDefinedFieldId)
        {
            var userDefinedFieldIdParameter = userDefinedFieldId.HasValue ?
                new ObjectParameter("UserDefinedFieldId", userDefinedFieldId) :
                new ObjectParameter("UserDefinedFieldId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_DeleteField", userDefinedFieldIdParameter);
        }
    
        public virtual int UserDefinedTable_DeleteRow(Nullable<int> userDefinedRowId, Nullable<int> moduleID)
        {
            var userDefinedRowIdParameter = userDefinedRowId.HasValue ?
                new ObjectParameter("UserDefinedRowId", userDefinedRowId) :
                new ObjectParameter("UserDefinedRowId", typeof(int));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_DeleteRow", userDefinedRowIdParameter, moduleIDParameter);
        }
    
        public virtual int UserDefinedTable_DeleteRows(Nullable<int> moduleID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_DeleteRows", moduleIDParameter);
        }
    
        public virtual int UserDefinedTable_FillDefaultData(Nullable<int> moduleID, Nullable<int> fieldId, string defaultValue)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var fieldIdParameter = fieldId.HasValue ?
                new ObjectParameter("FieldId", fieldId) :
                new ObjectParameter("FieldId", typeof(int));
    
            var defaultValueParameter = defaultValue != null ?
                new ObjectParameter("DefaultValue", defaultValue) :
                new ObjectParameter("DefaultValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_FillDefaultData", moduleIDParameter, fieldIdParameter, defaultValueParameter);
        }
    
        public virtual int UserDefinedTable_GetData(Nullable<int> userDefinedRowId, Nullable<int> userDefinedFieldId)
        {
            var userDefinedRowIdParameter = userDefinedRowId.HasValue ?
                new ObjectParameter("UserDefinedRowId", userDefinedRowId) :
                new ObjectParameter("UserDefinedRowId", typeof(int));
    
            var userDefinedFieldIdParameter = userDefinedFieldId.HasValue ?
                new ObjectParameter("UserDefinedFieldId", userDefinedFieldId) :
                new ObjectParameter("UserDefinedFieldId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_GetData", userDefinedRowIdParameter, userDefinedFieldIdParameter);
        }
    
        public virtual int UserDefinedTable_GetField(Nullable<int> userDefinedFieldId)
        {
            var userDefinedFieldIdParameter = userDefinedFieldId.HasValue ?
                new ObjectParameter("UserDefinedFieldId", userDefinedFieldId) :
                new ObjectParameter("UserDefinedFieldId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_GetField", userDefinedFieldIdParameter);
        }
    
        public virtual int UserDefinedTable_GetFieldDataCount(Nullable<int> fieldId)
        {
            var fieldIdParameter = fieldId.HasValue ?
                new ObjectParameter("FieldId", fieldId) :
                new ObjectParameter("FieldId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_GetFieldDataCount", fieldIdParameter);
        }
    
        public virtual int UserDefinedTable_GetFields(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_GetFields", moduleIdParameter);
        }
    
        public virtual int UserDefinedTable_GetFieldSettings(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_GetFieldSettings", moduleIdParameter);
        }
    
        public virtual int UserDefinedTable_GetRow(Nullable<int> userDefinedRowId, Nullable<int> moduleId)
        {
            var userDefinedRowIdParameter = userDefinedRowId.HasValue ?
                new ObjectParameter("UserDefinedRowId", userDefinedRowId) :
                new ObjectParameter("UserDefinedRowId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_GetRow", userDefinedRowIdParameter, moduleIdParameter);
        }
    
        public virtual int UserDefinedTable_GetRows(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_GetRows", moduleIdParameter);
        }
    
        public virtual int UserDefinedTable_Reset(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_Reset", moduleIdParameter);
        }
    
        public virtual int UserDefinedTable_SetFieldOrder(Nullable<int> userDefinedFieldId, Nullable<int> fieldOrder)
        {
            var userDefinedFieldIdParameter = userDefinedFieldId.HasValue ?
                new ObjectParameter("UserDefinedFieldId", userDefinedFieldId) :
                new ObjectParameter("UserDefinedFieldId", typeof(int));
    
            var fieldOrderParameter = fieldOrder.HasValue ?
                new ObjectParameter("FieldOrder", fieldOrder) :
                new ObjectParameter("FieldOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_SetFieldOrder", userDefinedFieldIdParameter, fieldOrderParameter);
        }
    
        public virtual int UserDefinedTable_SwapFieldOrder(Nullable<int> firstUserDefinedFieldId, Nullable<int> secndUserDefinedFieldId)
        {
            var firstUserDefinedFieldIdParameter = firstUserDefinedFieldId.HasValue ?
                new ObjectParameter("FirstUserDefinedFieldId", firstUserDefinedFieldId) :
                new ObjectParameter("FirstUserDefinedFieldId", typeof(int));
    
            var secndUserDefinedFieldIdParameter = secndUserDefinedFieldId.HasValue ?
                new ObjectParameter("SecndUserDefinedFieldId", secndUserDefinedFieldId) :
                new ObjectParameter("SecndUserDefinedFieldId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_SwapFieldOrder", firstUserDefinedFieldIdParameter, secndUserDefinedFieldIdParameter);
        }
    
        public virtual int UserDefinedTable_UpdateData(Nullable<int> userDefinedRowId, Nullable<int> userDefinedFieldId, string fieldValue)
        {
            var userDefinedRowIdParameter = userDefinedRowId.HasValue ?
                new ObjectParameter("UserDefinedRowId", userDefinedRowId) :
                new ObjectParameter("UserDefinedRowId", typeof(int));
    
            var userDefinedFieldIdParameter = userDefinedFieldId.HasValue ?
                new ObjectParameter("UserDefinedFieldId", userDefinedFieldId) :
                new ObjectParameter("UserDefinedFieldId", typeof(int));
    
            var fieldValueParameter = fieldValue != null ?
                new ObjectParameter("FieldValue", fieldValue) :
                new ObjectParameter("FieldValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_UpdateData", userDefinedRowIdParameter, userDefinedFieldIdParameter, fieldValueParameter);
        }
    
        public virtual int UserDefinedTable_UpdateField(Nullable<int> userDefinedFieldId, string fieldTitle, string helpText, Nullable<bool> required, string fieldType, string @default, Nullable<bool> visible, Nullable<bool> showOnEdit, Nullable<bool> searchable, Nullable<bool> @private, Nullable<bool> multipleValues, string inputSettings, string outputSettings, Nullable<bool> normalizeFlag, string validationRule, string validationMessage, string editStyle)
        {
            var userDefinedFieldIdParameter = userDefinedFieldId.HasValue ?
                new ObjectParameter("UserDefinedFieldId", userDefinedFieldId) :
                new ObjectParameter("UserDefinedFieldId", typeof(int));
    
            var fieldTitleParameter = fieldTitle != null ?
                new ObjectParameter("FieldTitle", fieldTitle) :
                new ObjectParameter("FieldTitle", typeof(string));
    
            var helpTextParameter = helpText != null ?
                new ObjectParameter("HelpText", helpText) :
                new ObjectParameter("HelpText", typeof(string));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(bool));
    
            var fieldTypeParameter = fieldType != null ?
                new ObjectParameter("FieldType", fieldType) :
                new ObjectParameter("FieldType", typeof(string));
    
            var defaultParameter = @default != null ?
                new ObjectParameter("default", @default) :
                new ObjectParameter("default", typeof(string));
    
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("Visible", visible) :
                new ObjectParameter("Visible", typeof(bool));
    
            var showOnEditParameter = showOnEdit.HasValue ?
                new ObjectParameter("ShowOnEdit", showOnEdit) :
                new ObjectParameter("ShowOnEdit", typeof(bool));
    
            var searchableParameter = searchable.HasValue ?
                new ObjectParameter("Searchable", searchable) :
                new ObjectParameter("Searchable", typeof(bool));
    
            var privateParameter = @private.HasValue ?
                new ObjectParameter("Private", @private) :
                new ObjectParameter("Private", typeof(bool));
    
            var multipleValuesParameter = multipleValues.HasValue ?
                new ObjectParameter("MultipleValues", multipleValues) :
                new ObjectParameter("MultipleValues", typeof(bool));
    
            var inputSettingsParameter = inputSettings != null ?
                new ObjectParameter("InputSettings", inputSettings) :
                new ObjectParameter("InputSettings", typeof(string));
    
            var outputSettingsParameter = outputSettings != null ?
                new ObjectParameter("OutputSettings", outputSettings) :
                new ObjectParameter("OutputSettings", typeof(string));
    
            var normalizeFlagParameter = normalizeFlag.HasValue ?
                new ObjectParameter("NormalizeFlag", normalizeFlag) :
                new ObjectParameter("NormalizeFlag", typeof(bool));
    
            var validationRuleParameter = validationRule != null ?
                new ObjectParameter("ValidationRule", validationRule) :
                new ObjectParameter("ValidationRule", typeof(string));
    
            var validationMessageParameter = validationMessage != null ?
                new ObjectParameter("ValidationMessage", validationMessage) :
                new ObjectParameter("ValidationMessage", typeof(string));
    
            var editStyleParameter = editStyle != null ?
                new ObjectParameter("EditStyle", editStyle) :
                new ObjectParameter("EditStyle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_UpdateField", userDefinedFieldIdParameter, fieldTitleParameter, helpTextParameter, requiredParameter, fieldTypeParameter, defaultParameter, visibleParameter, showOnEditParameter, searchableParameter, privateParameter, multipleValuesParameter, inputSettingsParameter, outputSettingsParameter, normalizeFlagParameter, validationRuleParameter, validationMessageParameter, editStyleParameter);
        }
    
        public virtual int UserDefinedTable_UpdateFieldSetting(Nullable<int> fieldId, string settingName, string settingValue)
        {
            var fieldIdParameter = fieldId.HasValue ?
                new ObjectParameter("fieldId", fieldId) :
                new ObjectParameter("fieldId", typeof(int));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDefinedTable_UpdateFieldSetting", fieldIdParameter, settingNameParameter, settingValueParameter);
        }
    
        public virtual int wns_contentslider_AddSlider(Nullable<int> moduleId, string sliderName, string sliderContent, string alternateText, string link, Nullable<bool> newWindow, Nullable<int> displayOrder, Nullable<int> lastUpdatedBy, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var sliderNameParameter = sliderName != null ?
                new ObjectParameter("SliderName", sliderName) :
                new ObjectParameter("SliderName", typeof(string));
    
            var sliderContentParameter = sliderContent != null ?
                new ObjectParameter("SliderContent", sliderContent) :
                new ObjectParameter("SliderContent", typeof(string));
    
            var alternateTextParameter = alternateText != null ?
                new ObjectParameter("AlternateText", alternateText) :
                new ObjectParameter("AlternateText", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var newWindowParameter = newWindow.HasValue ?
                new ObjectParameter("NewWindow", newWindow) :
                new ObjectParameter("NewWindow", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var lastUpdatedByParameter = lastUpdatedBy.HasValue ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_contentslider_AddSlider", moduleIdParameter, sliderNameParameter, sliderContentParameter, alternateTextParameter, linkParameter, newWindowParameter, displayOrderParameter, lastUpdatedByParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int wns_contentslider_DeleteSlider(Nullable<int> sliderId)
        {
            var sliderIdParameter = sliderId.HasValue ?
                new ObjectParameter("SliderId", sliderId) :
                new ObjectParameter("SliderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_contentslider_DeleteSlider", sliderIdParameter);
        }
    
        public virtual int wns_contentslider_GetSlider(Nullable<int> sliderId)
        {
            var sliderIdParameter = sliderId.HasValue ?
                new ObjectParameter("SliderId", sliderId) :
                new ObjectParameter("SliderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_contentslider_GetSlider", sliderIdParameter);
        }
    
        public virtual int wns_contentslider_GetSliders(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_contentslider_GetSliders", moduleIdParameter);
        }
    
        public virtual int wns_contentslider_GetSlidersForEdit(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_contentslider_GetSlidersForEdit", moduleIdParameter);
        }
    
        public virtual int wns_contentslider_UpdateSlider(Nullable<int> sliderId, Nullable<int> moduleId, string sliderName, string sliderContent, string alternateText, string link, Nullable<bool> newWindow, Nullable<int> displayOrder, Nullable<int> lastUpdatedBy, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var sliderIdParameter = sliderId.HasValue ?
                new ObjectParameter("SliderId", sliderId) :
                new ObjectParameter("SliderId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var sliderNameParameter = sliderName != null ?
                new ObjectParameter("SliderName", sliderName) :
                new ObjectParameter("SliderName", typeof(string));
    
            var sliderContentParameter = sliderContent != null ?
                new ObjectParameter("SliderContent", sliderContent) :
                new ObjectParameter("SliderContent", typeof(string));
    
            var alternateTextParameter = alternateText != null ?
                new ObjectParameter("AlternateText", alternateText) :
                new ObjectParameter("AlternateText", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var newWindowParameter = newWindow.HasValue ?
                new ObjectParameter("NewWindow", newWindow) :
                new ObjectParameter("NewWindow", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var lastUpdatedByParameter = lastUpdatedBy.HasValue ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_contentslider_UpdateSlider", sliderIdParameter, moduleIdParameter, sliderNameParameter, sliderContentParameter, alternateTextParameter, linkParameter, newWindowParameter, displayOrderParameter, lastUpdatedByParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int wns_inj_AddInjectionContent(Nullable<int> moduleId, Nullable<bool> injectTop, string injectName, string injectContent, Nullable<bool> isEnabled, Nullable<int> orderShown, string customProperties)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var injectTopParameter = injectTop.HasValue ?
                new ObjectParameter("InjectTop", injectTop) :
                new ObjectParameter("InjectTop", typeof(bool));
    
            var injectNameParameter = injectName != null ?
                new ObjectParameter("InjectName", injectName) :
                new ObjectParameter("InjectName", typeof(string));
    
            var injectContentParameter = injectContent != null ?
                new ObjectParameter("InjectContent", injectContent) :
                new ObjectParameter("InjectContent", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var orderShownParameter = orderShown.HasValue ?
                new ObjectParameter("OrderShown", orderShown) :
                new ObjectParameter("OrderShown", typeof(int));
    
            var customPropertiesParameter = customProperties != null ?
                new ObjectParameter("CustomProperties", customProperties) :
                new ObjectParameter("CustomProperties", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_AddInjectionContent", moduleIdParameter, injectTopParameter, injectNameParameter, injectContentParameter, isEnabledParameter, orderShownParameter, customPropertiesParameter);
        }
    
        public virtual int wns_inj_ChangeOrder(Nullable<int> injectionId, string direction)
        {
            var injectionIdParameter = injectionId.HasValue ?
                new ObjectParameter("InjectionId", injectionId) :
                new ObjectParameter("InjectionId", typeof(int));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_ChangeOrder", injectionIdParameter, directionParameter);
        }
    
        public virtual int wns_inj_DeleteInjectionContent(Nullable<int> injectionId)
        {
            var injectionIdParameter = injectionId.HasValue ?
                new ObjectParameter("InjectionId", injectionId) :
                new ObjectParameter("InjectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_DeleteInjectionContent", injectionIdParameter);
        }
    
        public virtual int wns_inj_DisableInjectionContent(Nullable<int> injectionId)
        {
            var injectionIdParameter = injectionId.HasValue ?
                new ObjectParameter("InjectionId", injectionId) :
                new ObjectParameter("InjectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_DisableInjectionContent", injectionIdParameter);
        }
    
        public virtual int wns_inj_DoesInjectionNameExist(string injectionName, Nullable<int> moduleId)
        {
            var injectionNameParameter = injectionName != null ?
                new ObjectParameter("InjectionName", injectionName) :
                new ObjectParameter("InjectionName", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_DoesInjectionNameExist", injectionNameParameter, moduleIdParameter);
        }
    
        public virtual int wns_inj_EnableInjectionContent(Nullable<int> injectionId)
        {
            var injectionIdParameter = injectionId.HasValue ?
                new ObjectParameter("InjectionId", injectionId) :
                new ObjectParameter("InjectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_EnableInjectionContent", injectionIdParameter);
        }
    
        public virtual int wns_inj_GetActiveInjectionContents(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_GetActiveInjectionContents", moduleIdParameter);
        }
    
        public virtual int wns_inj_GetInjectionContent(Nullable<int> injectionId)
        {
            var injectionIdParameter = injectionId.HasValue ?
                new ObjectParameter("InjectionId", injectionId) :
                new ObjectParameter("InjectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_GetInjectionContent", injectionIdParameter);
        }
    
        public virtual int wns_inj_GetInjectionContents(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_GetInjectionContents", moduleIdParameter);
        }
    
        public virtual int wns_inj_GetNextOrderNumber(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_GetNextOrderNumber", moduleIdParameter);
        }
    
        public virtual int wns_inj_UpdateInjectionContent(Nullable<int> injectionId, Nullable<int> moduleId, Nullable<bool> injectTop, string injectName, string injectContent, Nullable<bool> isEnabled, Nullable<int> orderShown, string customProperties)
        {
            var injectionIdParameter = injectionId.HasValue ?
                new ObjectParameter("InjectionId", injectionId) :
                new ObjectParameter("InjectionId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var injectTopParameter = injectTop.HasValue ?
                new ObjectParameter("InjectTop", injectTop) :
                new ObjectParameter("InjectTop", typeof(bool));
    
            var injectNameParameter = injectName != null ?
                new ObjectParameter("InjectName", injectName) :
                new ObjectParameter("InjectName", typeof(string));
    
            var injectContentParameter = injectContent != null ?
                new ObjectParameter("InjectContent", injectContent) :
                new ObjectParameter("InjectContent", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var orderShownParameter = orderShown.HasValue ?
                new ObjectParameter("OrderShown", orderShown) :
                new ObjectParameter("OrderShown", typeof(int));
    
            var customPropertiesParameter = customProperties != null ?
                new ObjectParameter("CustomProperties", customProperties) :
                new ObjectParameter("CustomProperties", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("wns_inj_UpdateInjectionContent", injectionIdParameter, moduleIdParameter, injectTopParameter, injectNameParameter, injectContentParameter, isEnabledParameter, orderShownParameter, customPropertiesParameter);
        }
    }
}
